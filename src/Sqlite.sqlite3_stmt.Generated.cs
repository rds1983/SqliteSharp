// Generated by Hebron at 4/3/2022 2:10:11 AM

using System;
using System.Runtime.InteropServices;
using Hebron.Runtime;

namespace SqliteSharp
{
	unsafe partial class Sqlite
	{
		public static int bindText(sqlite3_stmt* pStmt, int i, void* zData, long nData, delegate17 xDel, byte encoding)
		{
			Vdbe p = (Vdbe)(pStmt);
			sqlite3_value pVar;
			int rc = 0;
			rc = (int)(vdbeUnbind(p, (int)(i)));
			if ((rc) == (0))
			{
				if (zData != null)
				{
					pVar = p.aVar[i - 1];
					rc = (int)(sqlite3VdbeMemSetStr(pVar, zData, (long)(nData), (byte)(encoding), xDel));
					if (((rc) == (0)) && (encoding != 0))
					{
						rc = (int)(sqlite3VdbeChangeEncoding(pVar, (int)((p.db).enc)));
					}

					if ((rc) != 0)
					{
						sqlite3Error(p.db, (int)(rc));
						rc = (int)(sqlite3ApiExit(p.db, (int)(rc)));
					}
				}

				sqlite3_mutex_leave(p.db.mutex);
			}
			else if ((xDel != null) && (xDel != ((Void(Void * ))(-1))))
			{
				xDel(zData);
			}

			return (int)(rc);
		}
		public static void columnMallocFailure(sqlite3_stmt* pStmt)
		{
			Vdbe p = (Vdbe)(pStmt);
			if ((p) != null)
			{
				p.rc = (int)(sqlite3ApiExit(p.db, (int)(p.rc)));
				sqlite3_mutex_leave(p.db.mutex);
			}
		}
		public static sqlite3_value columnMem(sqlite3_stmt* pStmt, int i)
		{
			Vdbe pVm;
			sqlite3_value pOut;
			pVm = (Vdbe)(pStmt);
			if ((pVm) == (null))
				return columnNullValue();
			sqlite3_mutex_enter(pVm.db.mutex);
			if (((pVm.pResultSet != null) && ((i) < (pVm.nResColumn))) && ((i) >= (0)))
			{
				pOut = pVm.pResultSet[i];
			}
			else
			{
				sqlite3Error(pVm.db, (int)(25));
				pOut = columnNullValue();
			}

			return pOut;
		}
		public static int sqlite3_bind_blob(sqlite3_stmt* pStmt, int i, void* zData, int nData, delegate17 xDel)
		{
			return (int)(bindText(pStmt, (int)(i), zData, (long)(nData), xDel, (byte)(0)));
		}
		public static int sqlite3_bind_blob64(sqlite3_stmt* pStmt, int i, void* zData, ulong nData, delegate17 xDel)
		{
			return (int)(bindText(pStmt, (int)(i), zData, (long)(nData), xDel, (byte)(0)));
		}
		public static int sqlite3_bind_double(sqlite3_stmt* pStmt, int i, double rValue)
		{
			int rc = 0;
			Vdbe p = (Vdbe)(pStmt);
			rc = (int)(vdbeUnbind(p, (int)(i)));
			if ((rc) == (0))
			{
				sqlite3VdbeMemSetDouble(p.aVar[i - 1], (double)(rValue));
				sqlite3_mutex_leave(p.db.mutex);
			}

			return (int)(rc);
		}
		public static int sqlite3_bind_int(sqlite3_stmt* p, int i, int iValue)
		{
			return (int)(sqlite3_bind_int64(p, (int)(i), (long)(iValue)));
		}
		public static int sqlite3_bind_int64(sqlite3_stmt* pStmt, int i, long iValue)
		{
			int rc = 0;
			Vdbe p = (Vdbe)(pStmt);
			rc = (int)(vdbeUnbind(p, (int)(i)));
			if ((rc) == (0))
			{
				sqlite3VdbeMemSetInt64(p.aVar[i - 1], (long)(iValue));
				sqlite3_mutex_leave(p.db.mutex);
			}

			return (int)(rc);
		}
		public static int sqlite3_bind_null(sqlite3_stmt* pStmt, int i)
		{
			int rc = 0;
			Vdbe p = (Vdbe)(pStmt);
			rc = (int)(vdbeUnbind(p, (int)(i)));
			if ((rc) == (0))
			{
				sqlite3_mutex_leave(p.db.mutex);
			}

			return (int)(rc);
		}
		public static int sqlite3_bind_parameter_count(sqlite3_stmt* pStmt)
		{
			Vdbe p = (Vdbe)(pStmt);
			return (int)(p ? p.nVar : 0);
		}
		public static int sqlite3_bind_parameter_index(sqlite3_stmt* pStmt, sbyte* zName)
		{
			return (int)(sqlite3VdbeParameterIndex((Vdbe)(pStmt), zName, (int)(sqlite3Strlen30(zName))));
		}
		public static int sqlite3_bind_pointer(sqlite3_stmt* pStmt, int i, void* pPtr, sbyte* zPTtype, delegate17 xDestructor)
		{
			int rc = 0;
			Vdbe p = (Vdbe)(pStmt);
			rc = (int)(vdbeUnbind(p, (int)(i)));
			if ((rc) == (0))
			{
				sqlite3VdbeMemSetPointer(p.aVar[i - 1], pPtr, zPTtype, xDestructor);
				sqlite3_mutex_leave(p.db.mutex);
			}
			else if ((xDestructor) != null)
			{
				xDestructor(pPtr);
			}

			return (int)(rc);
		}
		public static int sqlite3_bind_text(sqlite3_stmt* pStmt, int i, sbyte* zData, int nData, delegate17 xDel)
		{
			return (int)(bindText(pStmt, (int)(i), zData, (long)(nData), xDel, (byte)(1)));
		}
		public static int sqlite3_bind_text16(sqlite3_stmt* pStmt, int i, void* zData, int nData, delegate17 xDel)
		{
			return (int)(bindText(pStmt, (int)(i), zData, (long)(nData), xDel, (byte)(2)));
		}
		public static int sqlite3_bind_text64(sqlite3_stmt* pStmt, int i, sbyte* zData, ulong nData, delegate17 xDel, byte enc)
		{
			if ((enc) == (4))
				enc = (byte)(2);
			return (int)(bindText(pStmt, (int)(i), zData, (long)(nData), xDel, (byte)(enc)));
		}
		public static int sqlite3_bind_value(sqlite3_stmt* pStmt, int i, sqlite3_value pValue)
		{
			int rc = 0;
			switch (sqlite3_value_type(pValue))
			{
				case 1:
					{
						rc = (int)(sqlite3_bind_int64(pStmt, (int)(i), (long)(pValue.u.i)));
						break;
					}

				case 2:
					{
						rc = (int)(sqlite3_bind_double(pStmt, (int)(i), (double)((pValue.flags & 0x0008) ? pValue.u.r : (double)(pValue.u.i))));
						break;
					}

				case 4:
					{
						if ((pValue.flags & 0x4000) != 0)
						{
							rc = (int)(sqlite3_bind_zeroblob(pStmt, (int)(i), (int)(pValue.u.nZero)));
						}
						else
						{
							rc = (int)(sqlite3_bind_blob(pStmt, (int)(i), pValue.z, (int)(pValue.n), ((Void(Void * ))(-1))));
						}

						break;
					}

				case 3:
					{
						rc = (int)(bindText(pStmt, (int)(i), pValue.z, (long)(pValue.n), ((Void(Void * ))(-1)), (byte)(pValue.enc)));
						break;
					}

				default:
					{
						rc = (int)(sqlite3_bind_null(pStmt, (int)(i)));
						break;
					}
			}

			return (int)(rc);
		}
		public static int sqlite3_bind_zeroblob(sqlite3_stmt* pStmt, int i, int n)
		{
			int rc = 0;
			Vdbe p = (Vdbe)(pStmt);
			rc = (int)(vdbeUnbind(p, (int)(i)));
			if ((rc) == (0))
			{
				sqlite3VdbeMemSetZeroBlob(p.aVar[i - 1], (int)(n));
				sqlite3_mutex_leave(p.db.mutex);
			}

			return (int)(rc);
		}
		public static int sqlite3_bind_zeroblob64(sqlite3_stmt* pStmt, int i, ulong n)
		{
			int rc = 0;
			Vdbe p = (Vdbe)(pStmt);
			sqlite3_mutex_enter(p.db.mutex);
			if ((n) > ((ulong)(p.db.aLimit[0])))
			{
				rc = (int)(18);
			}
			else
			{
				rc = (int)(sqlite3_bind_zeroblob(pStmt, (int)(i), (int)(n)));
			}

			rc = (int)(sqlite3ApiExit(p.db, (int)(rc)));
			sqlite3_mutex_leave(p.db.mutex);
			return (int)(rc);
		}
		public static int sqlite3_clear_bindings(sqlite3_stmt* pStmt)
		{
			int i = 0;
			int rc = (int)(0);
			Vdbe p = (Vdbe)(pStmt);
			sqlite3_mutex* mutex = ((Vdbe)(pStmt)).db.mutex;
			sqlite3_mutex_enter(mutex);
			for (i = (int)(0); (i) < (p.nVar); i++)
			{
				sqlite3VdbeMemRelease(p.aVar[i]);
				p.aVar[i].flags = (ushort)(0x0001);
			}

			if ((p.expmask) != 0)
			{
				p.expired = (uint)(1);
			}

			sqlite3_mutex_leave(mutex);
			return (int)(rc);
		}
		public static int sqlite3_column_bytes(sqlite3_stmt* pStmt, int i)
		{
			int val = (int)(sqlite3_value_bytes(columnMem(pStmt, (int)(i))));
			columnMallocFailure(pStmt);
			return (int)(val);
		}
		public static int sqlite3_column_bytes16(sqlite3_stmt* pStmt, int i)
		{
			int val = (int)(sqlite3_value_bytes16(columnMem(pStmt, (int)(i))));
			columnMallocFailure(pStmt);
			return (int)(val);
		}
		public static int sqlite3_column_count(sqlite3_stmt* pStmt)
		{
			Vdbe pVm = (Vdbe)(pStmt);
			return (int)(pVm ? pVm.nResColumn : 0);
		}
		public static double sqlite3_column_double(sqlite3_stmt* pStmt, int i)
		{
			double val = (double)(sqlite3_value_double(columnMem(pStmt, (int)(i))));
			columnMallocFailure(pStmt);
			return (double)(val);
		}
		public static int sqlite3_column_int(sqlite3_stmt* pStmt, int i)
		{
			int val = (int)(sqlite3_value_int(columnMem(pStmt, (int)(i))));
			columnMallocFailure(pStmt);
			return (int)(val);
		}
		public static long sqlite3_column_int64(sqlite3_stmt* pStmt, int i)
		{
			long val = (long)(sqlite3_value_int64(columnMem(pStmt, (int)(i))));
			columnMallocFailure(pStmt);
			return (long)(val);
		}
		public static int sqlite3_column_type(sqlite3_stmt* pStmt, int i)
		{
			int iType = (int)(sqlite3_value_type(columnMem(pStmt, (int)(i))));
			columnMallocFailure(pStmt);
			return (int)(iType);
		}
		public static sqlite3_value sqlite3_column_value(sqlite3_stmt* pStmt, int i)
		{
			sqlite3_value pOut = columnMem(pStmt, (int)(i));
			if ((pOut.flags & 0x0800) != 0)
			{
				pOut.flags &= (ushort)(~0x0800);
				pOut.flags |= (ushort)(0x1000);
			}

			columnMallocFailure(pStmt);
			return pOut;
		}
		public static int sqlite3_data_count(sqlite3_stmt* pStmt)
		{
			Vdbe pVm = (Vdbe)(pStmt);
			if (((pVm) == (null)) || ((pVm.pResultSet) == (null)))
				return (int)(0);
			return (int)(pVm.nResColumn);
		}
		public static sqlite3 sqlite3_db_handle(sqlite3_stmt* pStmt)
		{
			return pStmt ? ((Vdbe)(pStmt)).db : null;
		}
		public static int sqlite3_expired(sqlite3_stmt* pStmt)
		{
			Vdbe p = (Vdbe)(pStmt);
			return (((p) == (null)) || ((p.expired) != 0) ? 1 : 0);
		}
		public static int sqlite3_finalize(sqlite3_stmt* pStmt)
		{
			int rc = 0;
			if ((pStmt) == (null))
			{
				rc = (int)(0);
			}
			else
			{
				Vdbe v = (Vdbe)(pStmt);
				sqlite3 db = v.db;
				if ((vdbeSafety(v)) != 0)
					return (int)(sqlite3MisuseError((int)(85171)));
				sqlite3_mutex_enter(db.mutex);
				if (((v).startTime) > (0))
				{
					invokeProfileCallback(db, v);
				}

				rc = (int)(sqlite3VdbeFinalize(v));
				rc = (int)(sqlite3ApiExit(db, (int)(rc)));
				sqlite3LeaveMutexAndCloseZombie(db);
			}

			return (int)(rc);
		}
		public static int sqlite3_reset(sqlite3_stmt* pStmt)
		{
			int rc = 0;
			if ((pStmt) == (null))
			{
				rc = (int)(0);
			}
			else
			{
				Vdbe v = (Vdbe)(pStmt);
				sqlite3 db = v.db;
				sqlite3_mutex_enter(db.mutex);
				if (((v).startTime) > (0))
				{
					invokeProfileCallback(db, v);
				}

				rc = (int)(sqlite3VdbeReset(v));
				sqlite3VdbeRewind(v);
				rc = (int)(sqlite3ApiExit(db, (int)(rc)));
				sqlite3_mutex_leave(db.mutex);
			}

			return (int)(rc);
		}
		public static int sqlite3_step(sqlite3_stmt* pStmt)
		{
			int rc = (int)(0);
			Vdbe v = (Vdbe)(pStmt);
			int cnt = (int)(0);
			sqlite3 db;
			if ((vdbeSafetyNotNull(v)) != 0)
			{
				return (int)(sqlite3MisuseError((int)(85831)));
			}

			db = v.db;
			sqlite3_mutex_enter(db.mutex);
			v.doingRerun = (byte)(0);
			while (((rc = (int)(sqlite3Step(v))) == (17)) && ((cnt++) < (50)))
			{
				int savedPc = (int)(v.pc);
				rc = (int)(sqlite3Reprepare(v));
				if (rc != 0)
				{
					sbyte* zErr = (sbyte*)(sqlite3_value_text(db.pErr));
					sqlite3DbFree(db, v.zErrMsg);
					if (db.mallocFailed == 0)
					{
						v.zErrMsg = sqlite3DbStrDup(db, zErr);
						v.rc = (int)(rc = (int)(sqlite3ApiExit(db, (int)(rc))));
					}
					else
					{
						v.zErrMsg = null;
						v.rc = (int)(rc = (int)(7));
					}

					break;
				}

				sqlite3_reset(pStmt);
				if ((savedPc) >= (0))
					v.doingRerun = (byte)(1);
			}

			sqlite3_mutex_leave(db.mutex);
			return (int)(rc);
		}
		public static int sqlite3_stmt_busy(sqlite3_stmt* pStmt)
		{
			Vdbe v = (Vdbe)(pStmt);
			return (((v != null) && ((v.iVdbeMagic) == (0x2df20da3))) && ((v.pc) >= (0)) ? 1 : 0);
		}
		public static int sqlite3_stmt_isexplain(sqlite3_stmt* pStmt)
		{
			return (int)(pStmt ? ((Vdbe)(pStmt)).explain : 0);
		}
		public static int sqlite3_stmt_readonly(sqlite3_stmt* pStmt)
		{
			return (int)(pStmt ? ((Vdbe)(pStmt)).readOnly : 1);
		}
		public static int sqlite3_stmt_status(sqlite3_stmt* pStmt, int op, int resetFlag)
		{
			Vdbe pVdbe = (Vdbe)(pStmt);
			uint v = 0;
			if ((op) == (99))
			{
				sqlite3 db = pVdbe.db;
				sqlite3_mutex_enter(db.mutex);
				v = (uint)(0);
				db.pnBytesFreed = (int*)(&v);
				sqlite3VdbeClearObject(db, pVdbe);
				sqlite3DbFree(db, pVdbe);
				db.pnBytesFreed = null;
				sqlite3_mutex_leave(db.mutex);
			}
			else
			{
				v = (uint)(pVdbe.aCounter[op]);
				if ((resetFlag) != 0)
					pVdbe.aCounter[op] = (uint)(0);
			}

			return (int)(v);
		}
		public static int sqlite3_transfer_bindings(sqlite3_stmt* pFromStmt, sqlite3_stmt* pToStmt)
		{
			Vdbe pFrom = (Vdbe)(pFromStmt);
			Vdbe pTo = (Vdbe)(pToStmt);
			if (pFrom.nVar != pTo.nVar)
			{
				return (int)(1);
			}

			if ((pTo.expmask) != 0)
			{
				pTo.expired = (uint)(1);
			}

			if ((pFrom.expmask) != 0)
			{
				pFrom.expired = (uint)(1);
			}

			return (int)(sqlite3TransferBindings(pFromStmt, pToStmt));
		}
		public static int sqlite3TransferBindings(sqlite3_stmt* pFromStmt, sqlite3_stmt* pToStmt)
		{
			Vdbe pFrom = (Vdbe)(pFromStmt);
			Vdbe pTo = (Vdbe)(pToStmt);
			int i = 0;
			sqlite3_mutex_enter(pTo.db.mutex);
			for (i = (int)(0); (i) < (pFrom.nVar); i++)
			{
				sqlite3VdbeMemMove(pTo.aVar[i], pFrom.aVar[i]);
			}

			sqlite3_mutex_leave(pTo.db.mutex);
			return (int)(0);
		}
	}
}