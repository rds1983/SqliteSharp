// Generated by Hebron at 4/3/2022 2:10:11 AM

using System;
using System.Runtime.InteropServices;
using Hebron.Runtime;

namespace SqliteSharp
{
	unsafe partial class Sqlite
	{
		public static int winLockSharedMemory(winShmNode pShmNode)
		{
			int rc = (int)(winShmSystemLock(pShmNode, (int)(3), (int)(((22 + 8) * 4) + 8), (int)(1)));
			if ((rc) == (0))
			{
				if ((pShmNode.isReadonly) != 0)
				{
					pShmNode.isUnlocked = (byte)(1);
					winShmSystemLock(pShmNode, (int)(1), (int)(((22 + 8) * 4) + 8), (int)(1));
					return (int)(8 | (5 << 8));
				}
				else if ((winTruncate((sqlite3_file)(pShmNode.hFile), (long)(0))) != 0)
				{
					winShmSystemLock(pShmNode, (int)(1), (int)(((22 + 8) * 4) + 8), (int)(1));
					return (int)(winLogErrorAtLine((int)(10 | (18 << 8)), (uint)((Uint())(aSyscall[26].pCurrent)()), "winLockSharedMemory", pShmNode.zFilename, (int)(46822)));
				}
			}

			if ((rc) == (0))
			{
				winShmSystemLock(pShmNode, (int)(1), (int)(((22 + 8) * 4) + 8), (int)(1));
			}

			return (int)(winShmSystemLock(pShmNode, (int)(2), (int)(((22 + 8) * 4) + 8), (int)(1)));
		}
		public static int winShmSystemLock(winShmNode pFile, int lockType, int ofst, int nByte)
		{
			int rc = (int)(0);
			if ((lockType) == (1))
			{
				rc = (int)(winUnlockFile(&pFile.hFile.h, (uint)(ofst), (uint)(0), (uint)(nByte), (uint)(0)));
			}
			else
			{
				uint dwFlags = (uint)(0x00000001);
				if ((lockType) == (3))
					dwFlags |= (uint)(0x00000002);
				rc = (int)(winLockFile(&pFile.hFile.h, (uint)(dwFlags), (uint)(ofst), (uint)(0), (uint)(nByte), (uint)(0)));
			}

			if (rc != 0)
			{
				rc = (int)(0);
			}
			else
			{
				pFile.lastErrno = (uint)((Uint())(aSyscall[26].pCurrent)());
				rc = (int)(5);
			}

			return (int)(rc);
		}
	}
}