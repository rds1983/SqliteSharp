// Generated by Hebron at 4/3/2022 2:10:11 AM

using System;
using System.Runtime.InteropServices;
using Hebron.Runtime;

namespace SqliteSharp
{
	unsafe partial class Sqlite
	{
		public static void jsonAppendChar(JsonString p, sbyte c)
		{
			if (((p.nUsed) >= (p.nAlloc)) && (jsonGrow(p, (uint)(1)) != 0))
				return;
			p.zBuf[p.nUsed++] = (sbyte)(c);
		}
		public static void jsonAppendRaw(JsonString p, sbyte* zIn, uint N)
		{
			if ((N) == (0))
				return;
			if (((N + p.nUsed) >= (p.nAlloc)) && (jsonGrow(p, (uint)(N)) != 0))
				return;
			CRuntime.memcpy(p.zBuf + p.nUsed, zIn, (ulong)(N));
			p.nUsed += (ulong)(N);
		}
		public static void jsonAppendSeparator(JsonString p)
		{
			sbyte c = 0;
			if ((p.nUsed) == (0))
				return;
			c = (sbyte)(p.zBuf[p.nUsed - 1]);
			if ((c != 91) && (c != 123))
				jsonAppendChar(p, (sbyte)(44));
		}
		public static void jsonAppendString(JsonString p, sbyte* zIn, uint N)
		{
			uint i = 0;
			if (((zIn) == (null)) || (((N + p.nUsed + 2) >= (p.nAlloc)) && (jsonGrow(p, (uint)(N + 2)) != 0)))
				return;
			p.zBuf[p.nUsed++] = (sbyte)(34);
			for (i = (uint)(0); (i) < (N); i++)
			{
				byte c = (byte)(((byte*)(zIn))[i]);
				if (((c) == (34)) || ((c) == (92)))
				{
				json_simple_escape:
					;
					if (((p.nUsed + N + 3 - i) > (p.nAlloc)) && (jsonGrow(p, (uint)(N + 3 - i)) != 0))
						return;
					p.zBuf[p.nUsed++] = (sbyte)(92);
				}
				else if ((c) <= (0x1f))
				{
					if ((jsonAppendString_aSpecial[c]) != 0)
					{
						c = (byte)(jsonAppendString_aSpecial[c]);
						goto json_simple_escape;
					}

					if (((p.nUsed + N + 7 + i) > (p.nAlloc)) && (jsonGrow(p, (uint)(N + 7 - i)) != 0))
						return;
					p.zBuf[p.nUsed++] = (sbyte)(92);
					p.zBuf[p.nUsed++] = (sbyte)(117);
					p.zBuf[p.nUsed++] = (sbyte)(48);
					p.zBuf[p.nUsed++] = (sbyte)(48);
					p.zBuf[p.nUsed++] = (sbyte)(48 + (c >> 4));
					c = (byte)("0123456789abcdef"[c & 0xf]);
				}

				p.zBuf[p.nUsed++] = (sbyte)(c);
			}

			p.zBuf[p.nUsed++] = (sbyte)(34);
		}
		public static void jsonAppendValue(JsonString p, sqlite3_value pValue)
		{
			switch (sqlite3_value_type(pValue))
			{
				case 5:
					{
						jsonAppendRaw(p, "null", (uint)(4));
						break;
					}

				case 1:
				case 2:
					{
						sbyte* z = (sbyte*)(sqlite3_value_text(pValue));
						uint n = (uint)(sqlite3_value_bytes(pValue));
						jsonAppendRaw(p, z, (uint)(n));
						break;
					}

				case 3:
					{
						sbyte* z = (sbyte*)(sqlite3_value_text(pValue));
						uint n = (uint)(sqlite3_value_bytes(pValue));
						if ((sqlite3_value_subtype(pValue)) == (74))
						{
							jsonAppendRaw(p, z, (uint)(n));
						}
						else
						{
							jsonAppendString(p, z, (uint)(n));
						}

						break;
					}

				default:
					{
						if ((p.bErr) == (0))
						{
							sqlite3_result_error(p.pCtx, "JSON cannot hold BLOB values", (int)(-1));
							p.bErr = (byte)(2);
							jsonReset(p);
						}

						break;
					}
			}
		}
		public static int jsonGrow(JsonString p, uint N)
		{
			ulong nTotal = (ulong)((N) < (p.nAlloc) ? p.nAlloc * 2 : p.nAlloc + N + 10);
			sbyte* zNew;
			if ((p.bStatic) != 0)
			{
				if ((p.bErr) != 0)
					return (int)(1);
				zNew = sqlite3_malloc64((ulong)(nTotal));
				if ((zNew) == (null))
				{
					jsonOom(p);
					return (int)(7);
				}

				CRuntime.memcpy(zNew, p.zBuf, (ulong)(p.nUsed));
				p.zBuf = zNew;
				p.bStatic = (byte)(0);
			}
			else
			{
				zNew = sqlite3_realloc64(p.zBuf, (ulong)(nTotal));
				if ((zNew) == (null))
				{
					jsonOom(p);
					return (int)(7);
				}

				p.zBuf = zNew;
			}

			p.nAlloc = (ulong)(nTotal);
			return (int)(0);
		}
		public static void jsonInit(JsonString p, sqlite3_context pCtx)
		{
			p.pCtx = pCtx;
			p.bErr = (byte)(0);
			jsonZero(p);
		}
		public static void jsonOom(JsonString p)
		{
			p.bErr = (byte)(1);
			sqlite3_result_error_nomem(p.pCtx);
			jsonReset(p);
		}
		public static void jsonReset(JsonString p)
		{
			if (p.bStatic == 0)
				sqlite3_free(p.zBuf);
			jsonZero(p);
		}
		public static void jsonResult(JsonString p)
		{
			if ((p.bErr) == (0))
			{
				sqlite3_result_text64(p.pCtx, p.zBuf, (ulong)(p.nUsed), (p.bStatic) != 0 ? ((Void(Void * ))(-1)) : sqlite3_free, (byte)(1));
				jsonZero(p);
			}
		}
		public static void jsonZero(JsonString p)
		{
			p.zBuf = p.zSpace;
			p.nAlloc = (ulong)(100 * sizeof(sbyte));
			p.nUsed = (ulong)(0);
			p.bStatic = (byte)(1);
		}
	}
}