// Generated by Hebron at 4/3/2022 2:10:11 AM

using System;
using System.Runtime.InteropServices;
using Hebron.Runtime;

namespace SqliteSharp
{
	unsafe partial class Sqlite
	{
		public static void windowAggFinal(WindowCodeArg p, int bFin)
		{
			Parse pParse = p.pParse;
			Window pMWin = p.pMWin;
			Vdbe v = sqlite3GetVdbe(pParse);
			Window pWin;
			for (pWin = pMWin; pWin; pWin = pWin.pNextWin)
			{
				if ((((pMWin.regStartRowid) == (0)) && ((pWin.pFunc.funcFlags & 0x1000) != 0)) && (pWin.eStart != 90))
				{
					sqlite3VdbeAddOp2(v, (int)(74), (int)(0), (int)(pWin.regResult));
					sqlite3VdbeAddOp1(v, (int)(34), (int)(pWin.csrApp));
					sqlite3VdbeAddOp3(v, (int)(93), (int)(pWin.csrApp), (int)(0), (int)(pWin.regResult));
					sqlite3VdbeJumpHere(v, (int)(sqlite3VdbeCurrentAddr(v) - 2));
				}
				else if ((pWin.regApp) != 0)
				{
				}
				else
				{
					int nArg = (int)(windowArgCount(pWin));
					if ((bFin) != 0)
					{
						sqlite3VdbeAddOp2(v, (int)(164), (int)(pWin.regAccum), (int)(nArg));
						sqlite3VdbeAppendP4(v, pWin.pFunc, (int)(-8));
						sqlite3VdbeAddOp2(v, (int)(79), (int)(pWin.regAccum), (int)(pWin.regResult));
						sqlite3VdbeAddOp2(v, (int)(74), (int)(0), (int)(pWin.regAccum));
					}
					else
					{
						sqlite3VdbeAddOp3(v, (int)(163), (int)(pWin.regAccum), (int)(nArg), (int)(pWin.regResult));
						sqlite3VdbeAppendP4(v, pWin.pFunc, (int)(-8));
					}
				}
			}
		}
		public static void windowAggStep(WindowCodeArg p, Window pMWin, int csr, int bInverse, int reg)
		{
			Parse pParse = p.pParse;
			Vdbe v = sqlite3GetVdbe(pParse);
			Window pWin;
			for (pWin = pMWin; pWin; pWin = pWin.pNextWin)
			{
				FuncDef pFunc = pWin.pFunc;
				int regArg = 0;
				int nArg = (int)((pWin.bExprArgs) != 0 ? 0 : windowArgCount(pWin));
				int i = 0;
				for (i = (int)(0); (i) < (nArg); i++)
				{
					if ((i != 1) || (pFunc.zName != nth_valueName))
					{
						sqlite3VdbeAddOp3(v, (int)(93), (int)(csr), (int)(pWin.iArgCol + i), (int)(reg + i));
					}
					else
					{
						sqlite3VdbeAddOp3(v, (int)(93), (int)(pMWin.iEphCsr), (int)(pWin.iArgCol + i), (int)(reg + i));
					}
				}

				regArg = (int)(reg);
				if ((((pMWin.regStartRowid) == (0)) && ((pFunc.funcFlags & 0x1000) != 0)) && (pWin.eStart != 90))
				{
					int addrIsNull = (int)(sqlite3VdbeAddOp1(v, (int)(50), (int)(regArg)));
					if ((bInverse) == (0))
					{
						sqlite3VdbeAddOp2(v, (int)(85), (int)(pWin.regApp + 1), (int)(1));
						sqlite3VdbeAddOp2(v, (int)(80), (int)(regArg), (int)(pWin.regApp));
						sqlite3VdbeAddOp3(v, (int)(96), (int)(pWin.regApp), (int)(2), (int)(pWin.regApp + 2));
						sqlite3VdbeAddOp2(v, (int)(137), (int)(pWin.csrApp), (int)(pWin.regApp + 2));
					}
					else
					{
						sqlite3VdbeAddOp4Int(v, (int)(25), (int)(pWin.csrApp), (int)(0), (int)(regArg), (int)(1));
						sqlite3VdbeAddOp1(v, (int)(129), (int)(pWin.csrApp));
						sqlite3VdbeJumpHere(v, (int)(sqlite3VdbeCurrentAddr(v) - 2));
					}

					sqlite3VdbeJumpHere(v, (int)(addrIsNull));
				}
				else if ((pWin.regApp) != 0)
				{
					sqlite3VdbeAddOp2(v, (int)(85), (int)(pWin.regApp + 1 - bInverse), (int)(1));
				}
				else if (pFunc.xSFunc != noopStepFunc)
				{
					int addrIf = (int)(0);
					if ((pWin.pFilter) != null)
					{
						int regTmp = 0;
						regTmp = (int)(sqlite3GetTempReg(pParse));
						sqlite3VdbeAddOp3(v, (int)(93), (int)(csr), (int)(pWin.iArgCol + nArg), (int)(regTmp));
						addrIf = (int)(sqlite3VdbeAddOp3(v, (int)(20), (int)(regTmp), (int)(0), (int)(1)));
						sqlite3ReleaseTempReg(pParse, (int)(regTmp));
					}

					if ((pWin.bExprArgs) != 0)
					{
						int iOp = (int)(sqlite3VdbeCurrentAddr(v));
						int iEnd = 0;
						nArg = (int)(pWin.pOwner.x.pList.nExpr);
						regArg = (int)(sqlite3GetTempRange(pParse, (int)(nArg)));
						sqlite3ExprCodeExprList(pParse, pWin.pOwner.x.pList, (int)(regArg), (int)(0), (byte)(0));
						for (iEnd = (int)(sqlite3VdbeCurrentAddr(v)); (iOp) < (iEnd); iOp++)
						{
							VdbeOp* pOp = sqlite3VdbeGetOp(v, (int)(iOp));
							if (((pOp->opcode) == (93)) && ((pOp->p1) == (pWin.iEphCsr)))
							{
								pOp->p1 = (int)(csr);
							}
						}
					}

					if ((pFunc.funcFlags & 0x0020) != 0)
					{
						CollSeq pColl;
						pColl = sqlite3ExprNNCollSeq(pParse, pWin.pOwner.x.pList.a[0].pExpr);
						sqlite3VdbeAddOp4(v, (int)(84), (int)(0), (int)(0), (int)(0), (sbyte*)(pColl), (int)(-2));
					}

					sqlite3VdbeAddOp3(v, (int)((bInverse) != 0 ? 160 : 161), (int)(bInverse), (int)(regArg), (int)(pWin.regAccum));
					sqlite3VdbeAppendP4(v, pFunc, (int)(-8));
					sqlite3VdbeChangeP5(v, (ushort)((byte)(nArg)));
					if ((pWin.bExprArgs) != 0)
					{
						sqlite3ReleaseTempRange(pParse, (int)(regArg), (int)(nArg));
					}

					if ((addrIf) != 0)
						sqlite3VdbeJumpHere(v, (int)(addrIf));
				}
			}
		}
		public static int windowCodeOp(WindowCodeArg p, int op, int regCountdown, int jumpOnEof)
		{
			int csr = 0; int reg = 0;
			Parse pParse = p.pParse;
			Window pMWin = p.pMWin;
			int ret = (int)(0);
			Vdbe v = p.pVdbe;
			int addrContinue = (int)(0);
			int bPeer = (int)(pMWin.eFrmType != 76);
			int lblDone = (int)(sqlite3VdbeMakeLabel(pParse));
			int addrNextRange = (int)(0);
			if (((op) == (2)) && ((pMWin.eStart) == (90)))
			{
				return (int)(0);
			}

			if ((regCountdown) > (0))
			{
				if ((pMWin.eFrmType) == (89))
				{
					addrNextRange = (int)(sqlite3VdbeCurrentAddr(v));
					if ((op) == (2))
					{
						if ((pMWin.eStart) == (86))
						{
							windowCodeRangeTest(p, (int)(55), (int)(p.current.csr), (int)(regCountdown), (int)(p.start.csr), (int)(lblDone));
						}
						else
						{
							windowCodeRangeTest(p, (int)(57), (int)(p.start.csr), (int)(regCountdown), (int)(p.current.csr), (int)(lblDone));
						}
					}
					else
					{
						windowCodeRangeTest(p, (int)(54), (int)(p.end.csr), (int)(regCountdown), (int)(p.current.csr), (int)(lblDone));
					}
				}
				else
				{
					sqlite3VdbeAddOp3(v, (int)(49), (int)(regCountdown), (int)(lblDone), (int)(1));
				}
			}

			if (((op) == (1)) && ((pMWin.regStartRowid) == (0)))
			{
				windowAggFinal(p, (int)(0));
			}

			addrContinue = (int)(sqlite3VdbeCurrentAddr(v));
			if ((((pMWin.eStart) == (pMWin.eEnd)) && ((regCountdown) != 0)) && ((pMWin.eFrmType) == (89)))
			{
				int regRowid1 = (int)(sqlite3GetTempReg(pParse));
				int regRowid2 = (int)(sqlite3GetTempReg(pParse));
				if ((op) == (2))
				{
					sqlite3VdbeAddOp2(v, (int)(134), (int)(p.start.csr), (int)(regRowid1));
					sqlite3VdbeAddOp2(v, (int)(134), (int)(p.end.csr), (int)(regRowid2));
					sqlite3VdbeAddOp3(v, (int)(57), (int)(regRowid2), (int)(lblDone), (int)(regRowid1));
				}
				else if ((p.regRowid) != 0)
				{
					sqlite3VdbeAddOp2(v, (int)(134), (int)(p.end.csr), (int)(regRowid1));
					sqlite3VdbeAddOp3(v, (int)(57), (int)(p.regRowid), (int)(lblDone), (int)(regRowid1));
				}

				sqlite3ReleaseTempReg(pParse, (int)(regRowid1));
				sqlite3ReleaseTempReg(pParse, (int)(regRowid2));
			}

			switch (op)
			{
				case 1:
					csr = (int)(p.current.csr);
					reg = (int)(p.current.reg);
					windowReturnOneRow(p);
					break;
				case 2:
					csr = (int)(p.start.csr);
					reg = (int)(p.start.reg);
					if ((pMWin.regStartRowid) != 0)
					{
						sqlite3VdbeAddOp2(v, (int)(85), (int)(pMWin.regStartRowid), (int)(1));
					}
					else
					{
						windowAggStep(p, pMWin, (int)(csr), (int)(1), (int)(p.regArg));
					}

					break;
				default:
					;
					csr = (int)(p.end.csr);
					reg = (int)(p.end.reg);
					if ((pMWin.regStartRowid) != 0)
					{
						sqlite3VdbeAddOp2(v, (int)(85), (int)(pMWin.regEndRowid), (int)(1));
					}
					else
					{
						windowAggStep(p, pMWin, (int)(csr), (int)(0), (int)(p.regArg));
					}

					break;
			}

			if ((op) == (p.eDelete))
			{
				sqlite3VdbeAddOp1(v, (int)(129), (int)(csr));
				sqlite3VdbeChangeP5(v, (ushort)(0x02));
			}

			if ((jumpOnEof) != 0)
			{
				sqlite3VdbeAddOp2(v, (int)(5), (int)(csr), (int)(sqlite3VdbeCurrentAddr(v) + 2));
				ret = (int)(sqlite3VdbeAddOp0(v, (int)(11)));
			}
			else
			{
				sqlite3VdbeAddOp2(v, (int)(5), (int)(csr), (int)(sqlite3VdbeCurrentAddr(v) + 1 + bPeer));
				if ((bPeer) != 0)
				{
					sqlite3VdbeAddOp2(v, (int)(11), (int)(0), (int)(lblDone));
				}
			}

			if ((bPeer) != 0)
			{
				int nReg = (int)(pMWin.pOrderBy ? pMWin.pOrderBy.nExpr : 0);
				int regTmp = (int)((nReg) != 0 ? sqlite3GetTempRange(pParse, (int)(nReg)) : 0);
				windowReadPeerValues(p, (int)(csr), (int)(regTmp));
				windowIfNewPeer(pParse, pMWin.pOrderBy, (int)(regTmp), (int)(reg), (int)(addrContinue));
				sqlite3ReleaseTempRange(pParse, (int)(regTmp), (int)(nReg));
			}

			if ((addrNextRange) != 0)
			{
				sqlite3VdbeAddOp2(v, (int)(11), (int)(0), (int)(addrNextRange));
			}

			sqlite3VdbeResolveLabel(v, (int)(lblDone));
			return (int)(ret);
		}
		public static void windowCodeRangeTest(WindowCodeArg p, int op, int csr1, int regVal, int csr2, int lbl)
		{
			Parse pParse = p.pParse;
			Vdbe v = sqlite3GetVdbe(pParse);
			ExprList pOrderBy = p.pMWin.pOrderBy;
			int reg1 = (int)(sqlite3GetTempReg(pParse));
			int reg2 = (int)(sqlite3GetTempReg(pParse));
			int regString = (int)(++pParse.nMem);
			int arith = (int)(106);
			int addrGe = 0;
			int addrDone = (int)(sqlite3VdbeMakeLabel(pParse));
			CollSeq pColl;
			windowReadPeerValues(p, (int)(csr1), (int)(reg1));
			windowReadPeerValues(p, (int)(csr2), (int)(reg2));
			if ((pOrderBy.a[0].sortFlags & 0x01) != 0)
			{
				switch (op)
				{
					case 57:
						op = (int)(55);
						break;
					case 54:
						op = (int)(56);
						break;
					default:
						;
						op = (int)(57);
						break;
				}

				arith = (int)(107);
			}

			if ((pOrderBy.a[0].sortFlags & 0x02) != 0)
			{
				int addr = (int)(sqlite3VdbeAddOp1(v, (int)(51), (int)(reg1)));
				switch (op)
				{
					case 57:
						sqlite3VdbeAddOp2(v, (int)(11), (int)(0), (int)(lbl));
						break;
					case 54:
						sqlite3VdbeAddOp2(v, (int)(51), (int)(reg2), (int)(lbl));
						break;
					case 55:
						sqlite3VdbeAddOp2(v, (int)(50), (int)(reg2), (int)(lbl));
						break;
					default:
						;
						break;
				}

				sqlite3VdbeAddOp2(v, (int)(11), (int)(0), (int)(addrDone));
				sqlite3VdbeJumpHere(v, (int)(addr));
				sqlite3VdbeAddOp2(v, (int)(50), (int)(reg2), (int)(lbl));
				if (((op) == (54)) || ((op) == (57)))
				{
					sqlite3VdbeChangeP2(v, (int)(-1), (int)(addrDone));
				}
			}

			sqlite3VdbeAddOp4(v, (int)(117), (int)(0), (int)(regString), (int)(0), "", (int)(-1));
			addrGe = (int)(sqlite3VdbeAddOp3(v, (int)(57), (int)(regString), (int)(0), (int)(reg1)));
			if ((((op) == (57)) && ((arith) == (106))) || (((op) == (55)) && ((arith) == (107))))
			{
				sqlite3VdbeAddOp3(v, (int)(op), (int)(reg2), (int)(lbl), (int)(reg1));
			}

			sqlite3VdbeAddOp3(v, (int)(arith), (int)(regVal), (int)(reg1), (int)(reg1));
			sqlite3VdbeJumpHere(v, (int)(addrGe));
			sqlite3VdbeAddOp3(v, (int)(op), (int)(reg2), (int)(lbl), (int)(reg1));
			pColl = sqlite3ExprNNCollSeq(pParse, pOrderBy.a[0].pExpr);
			sqlite3VdbeAppendP4(v, (void*)(pColl), (int)(-2));
			sqlite3VdbeChangeP5(v, (ushort)(0x80));
			sqlite3VdbeResolveLabel(v, (int)(addrDone));
			sqlite3ReleaseTempReg(pParse, (int)(reg1));
			sqlite3ReleaseTempReg(pParse, (int)(reg2));
		}
		public static void windowFullScan(WindowCodeArg p)
		{
			Window pWin;
			Parse pParse = p.pParse;
			Window pMWin = p.pMWin;
			Vdbe v = p.pVdbe;
			int regCRowid = (int)(0);
			int regCPeer = (int)(0);
			int regRowid = (int)(0);
			int regPeer = (int)(0);
			int nPeer = 0;
			int lblNext = 0;
			int lblBrk = 0;
			int addrNext = 0;
			int csr = 0;
			csr = (int)(pMWin.csrApp);
			nPeer = (int)(pMWin.pOrderBy ? pMWin.pOrderBy.nExpr : 0);
			lblNext = (int)(sqlite3VdbeMakeLabel(pParse));
			lblBrk = (int)(sqlite3VdbeMakeLabel(pParse));
			regCRowid = (int)(sqlite3GetTempReg(pParse));
			regRowid = (int)(sqlite3GetTempReg(pParse));
			if ((nPeer) != 0)
			{
				regCPeer = (int)(sqlite3GetTempRange(pParse, (int)(nPeer)));
				regPeer = (int)(sqlite3GetTempRange(pParse, (int)(nPeer)));
			}

			sqlite3VdbeAddOp2(v, (int)(134), (int)(pMWin.iEphCsr), (int)(regCRowid));
			windowReadPeerValues(p, (int)(pMWin.iEphCsr), (int)(regCPeer));
			for (pWin = pMWin; pWin; pWin = pWin.pNextWin)
			{
				sqlite3VdbeAddOp2(v, (int)(74), (int)(0), (int)(pWin.regAccum));
			}

			sqlite3VdbeAddOp3(v, (int)(25), (int)(csr), (int)(lblBrk), (int)(pMWin.regStartRowid));
			addrNext = (int)(sqlite3VdbeCurrentAddr(v));
			sqlite3VdbeAddOp2(v, (int)(134), (int)(csr), (int)(regRowid));
			sqlite3VdbeAddOp3(v, (int)(54), (int)(pMWin.regEndRowid), (int)(lblBrk), (int)(regRowid));
			if ((pMWin.eExclude) == (85))
			{
				sqlite3VdbeAddOp3(v, (int)(53), (int)(regCRowid), (int)(lblNext), (int)(regRowid));
			}
			else if (pMWin.eExclude != 66)
			{
				int addr = 0;
				int addrEq = (int)(0);
				KeyInfo pKeyInfo = null;
				if ((pMWin.pOrderBy) != null)
				{
					pKeyInfo = sqlite3KeyInfoFromExprList(pParse, pMWin.pOrderBy, (int)(0), (int)(0));
				}

				if ((pMWin.eExclude) == (94))
				{
					addrEq = (int)(sqlite3VdbeAddOp3(v, (int)(53), (int)(regCRowid), (int)(0), (int)(regRowid)));
				}

				if ((pKeyInfo) != null)
				{
					windowReadPeerValues(p, (int)(csr), (int)(regPeer));
					sqlite3VdbeAddOp3(v, (int)(89), (int)(regPeer), (int)(regCPeer), (int)(nPeer));
					sqlite3VdbeAppendP4(v, (void*)(pKeyInfo), (int)(-9));
					addr = (int)(sqlite3VdbeCurrentAddr(v) + 1);
					sqlite3VdbeAddOp3(v, (int)(16), (int)(addr), (int)(lblNext), (int)(addr));
				}
				else
				{
					sqlite3VdbeAddOp2(v, (int)(11), (int)(0), (int)(lblNext));
				}

				if ((addrEq) != 0)
					sqlite3VdbeJumpHere(v, (int)(addrEq));
			}

			windowAggStep(p, pMWin, (int)(csr), (int)(0), (int)(p.regArg));
			sqlite3VdbeResolveLabel(v, (int)(lblNext));
			sqlite3VdbeAddOp2(v, (int)(5), (int)(csr), (int)(addrNext));
			sqlite3VdbeJumpHere(v, (int)(addrNext - 1));
			sqlite3VdbeJumpHere(v, (int)(addrNext + 1));
			sqlite3ReleaseTempReg(pParse, (int)(regRowid));
			sqlite3ReleaseTempReg(pParse, (int)(regCRowid));
			if ((nPeer) != 0)
			{
				sqlite3ReleaseTempRange(pParse, (int)(regPeer), (int)(nPeer));
				sqlite3ReleaseTempRange(pParse, (int)(regCPeer), (int)(nPeer));
			}

			windowAggFinal(p, (int)(1));
		}
		public static void windowReadPeerValues(WindowCodeArg p, int csr, int reg)
		{
			Window pMWin = p.pMWin;
			ExprList pOrderBy = pMWin.pOrderBy;
			if ((pOrderBy) != null)
			{
				Vdbe v = sqlite3GetVdbe(p.pParse);
				ExprList pPart = pMWin.pPartition;
				int iColOff = (int)(pMWin.nBufferCol + (pPart ? pPart.nExpr : 0));
				int i = 0;
				for (i = (int)(0); (i) < (pOrderBy.nExpr); i++)
				{
					sqlite3VdbeAddOp3(v, (int)(93), (int)(csr), (int)(iColOff + i), (int)(reg + i));
				}
			}
		}
		public static void windowReturnOneRow(WindowCodeArg p)
		{
			Window pMWin = p.pMWin;
			Vdbe v = p.pVdbe;
			if ((pMWin.regStartRowid) != 0)
			{
				windowFullScan(p);
			}
			else
			{
				Parse pParse = p.pParse;
				Window pWin;
				for (pWin = pMWin; pWin; pWin = pWin.pNextWin)
				{
					FuncDef pFunc = pWin.pFunc;
					if (((pFunc.zName) == (nth_valueName)) || ((pFunc.zName) == (first_valueName)))
					{
						int csr = (int)(pWin.csrApp);
						int lbl = (int)(sqlite3VdbeMakeLabel(pParse));
						int tmpReg = (int)(sqlite3GetTempReg(pParse));
						sqlite3VdbeAddOp2(v, (int)(74), (int)(0), (int)(pWin.regResult));
						if ((pFunc.zName) == (nth_valueName))
						{
							sqlite3VdbeAddOp3(v, (int)(93), (int)(pMWin.iEphCsr), (int)(pWin.iArgCol + 1), (int)(tmpReg));
							windowCheckValue(pParse, (int)(tmpReg), (int)(2));
						}
						else
						{
							sqlite3VdbeAddOp2(v, (int)(71), (int)(1), (int)(tmpReg));
						}

						sqlite3VdbeAddOp3(v, (int)(106), (int)(tmpReg), (int)(pWin.regApp), (int)(tmpReg));
						sqlite3VdbeAddOp3(v, (int)(54), (int)(pWin.regApp + 1), (int)(lbl), (int)(tmpReg));
						sqlite3VdbeAddOp3(v, (int)(32), (int)(csr), (int)(0), (int)(tmpReg));
						sqlite3VdbeAddOp3(v, (int)(93), (int)(csr), (int)(pWin.iArgCol), (int)(pWin.regResult));
						sqlite3VdbeResolveLabel(v, (int)(lbl));
						sqlite3ReleaseTempReg(pParse, (int)(tmpReg));
					}
					else if (((pFunc.zName) == (leadName)) || ((pFunc.zName) == (lagName)))
					{
						int nArg = (int)(pWin.pOwner.x.pList.nExpr);
						int csr = (int)(pWin.csrApp);
						int lbl = (int)(sqlite3VdbeMakeLabel(pParse));
						int tmpReg = (int)(sqlite3GetTempReg(pParse));
						int iEph = (int)(pMWin.iEphCsr);
						if ((nArg) < (3))
						{
							sqlite3VdbeAddOp2(v, (int)(74), (int)(0), (int)(pWin.regResult));
						}
						else
						{
							sqlite3VdbeAddOp3(v, (int)(93), (int)(iEph), (int)(pWin.iArgCol + 2), (int)(pWin.regResult));
						}

						sqlite3VdbeAddOp2(v, (int)(134), (int)(iEph), (int)(tmpReg));
						if ((nArg) < (2))
						{
							int val = (int)((pFunc.zName) == (leadName) ? 1 : -1);
							sqlite3VdbeAddOp2(v, (int)(85), (int)(tmpReg), (int)(val));
						}
						else
						{
							int op = (int)((pFunc.zName) == (leadName) ? 106 : 107);
							int tmpReg2 = (int)(sqlite3GetTempReg(pParse));
							sqlite3VdbeAddOp3(v, (int)(93), (int)(iEph), (int)(pWin.iArgCol + 1), (int)(tmpReg2));
							sqlite3VdbeAddOp3(v, (int)(op), (int)(tmpReg2), (int)(tmpReg), (int)(tmpReg));
							sqlite3ReleaseTempReg(pParse, (int)(tmpReg2));
						}

						sqlite3VdbeAddOp3(v, (int)(32), (int)(csr), (int)(lbl), (int)(tmpReg));
						sqlite3VdbeAddOp3(v, (int)(93), (int)(csr), (int)(pWin.iArgCol), (int)(pWin.regResult));
						sqlite3VdbeResolveLabel(v, (int)(lbl));
						sqlite3ReleaseTempReg(pParse, (int)(tmpReg));
					}
				}
			}

			sqlite3VdbeAddOp2(v, (int)(12), (int)(p.regGosub), (int)(p.addrGosub));
		}
	}
}