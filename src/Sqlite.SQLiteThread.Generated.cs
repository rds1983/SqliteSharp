// Generated by Hebron at 4/3/2022 2:10:11 AM

using System;
using System.Runtime.InteropServices;
using Hebron.Runtime;

namespace SqliteSharp
{
	unsafe partial class Sqlite
	{
		public static int sqlite3ThreadCreate(SQLiteThread ppThread, delegate75 xTask, void* pIn)
		{
			SQLiteThread p;
			ppThread = null;
			p = sqlite3Malloc((ulong)(sizeof(SQLiteThread)));
			if ((p) == (null))
				return (int)(7);
			if (((sqlite3Config.bCoreMutex) == (0)) || ((sqlite3FaultSim((int)(200))) != 0))
			{
				CRuntime.memset(p, (int)(0), (ulong)(sizeof(SQLiteThread)));
			}
			else
			{
				p.xTask = xTask;
				p.pIn = pIn;
				p.tid = (void*)(_beginthreadex(null, (uint)(0), sqlite3ThreadProc, p, (uint)(0), &p.id));
				if ((p.tid) == (null))
				{
					CRuntime.memset(p, (int)(0), (ulong)(sizeof(SQLiteThread)));
				}
			}

			if ((p.xTask) == (null))
			{
				p.id = (uint)(GetCurrentThreadId());
				p.pResult = xTask(pIn);
			}

			ppThread = p;
			return (int)(0);
		}
		public static int sqlite3ThreadJoin(SQLiteThread p, void** ppOut)
		{
			uint rc = 0;
			int bRc = 0;
			if (((p) == (null)))
				return (int)(7);
			if ((p.xTask) == (null))
			{
				rc = (uint)(((uint)(0x00000000L)) + 0);
			}
			else
			{
				rc = (uint)(sqlite3Win32Wait(p.tid));
				bRc = (int)(CloseHandle(p.tid));
			}

			if ((rc) == (((uint)(0x00000000L)) + 0))
				*ppOut = p.pResult;
			sqlite3_free(p);
			return (int)(((rc) == (((uint)(0x00000000L)) + 0)) ? 0 : 1);
		}
	}
}