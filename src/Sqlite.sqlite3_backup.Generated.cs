// Generated by Hebron at 4/3/2022 2:10:11 AM

using System;
using System.Runtime.InteropServices;
using Hebron.Runtime;

namespace SqliteSharp
{
	unsafe partial class Sqlite
	{
		public static void attachBackupObject(sqlite3_backup p)
		{
			sqlite3_backup pp;
			pp = sqlite3PagerBackupPtr(sqlite3BtreePager(p.pSrc));
			p.pNext = pp;
			pp = p;
			p.isAttached = (int)(1);
		}
		public static int backupOnePage(sqlite3_backup p, uint iSrcPg, byte* zSrcData, int bUpdate)
		{
			Pager pDestPager = sqlite3BtreePager(p.pDest);
			int nSrcPgsz = (int)(sqlite3BtreeGetPageSize(p.pSrc));
			int nDestPgsz = (int)(sqlite3BtreeGetPageSize(p.pDest));
			int nCopy = (int)((nSrcPgsz) < (nDestPgsz) ? (nSrcPgsz) : (nDestPgsz));
			long iEnd = (long)((long)(iSrcPg) * (long)(nSrcPgsz));
			int rc = (int)(0);
			long iOff = 0;
			if ((nSrcPgsz != nDestPgsz) && ((sqlite3PagerIsMemdb(pDestPager)) != 0))
			{
				rc = (int)(8);
			}

			for (iOff = (long)(iEnd - (long)(nSrcPgsz)); ((rc) == (0)) && ((iOff) < (iEnd)); iOff += (long)(nDestPgsz))
			{
				PgHdr pDestPg = null;
				uint iDest = (uint)((uint)(iOff / nDestPgsz) + 1);
				if ((iDest) == ((sqlite3PendingByte / ((p.pDest.pBt).pageSize)) + 1))
					continue;
				if (((0) == (rc = (int)(sqlite3PagerGet(pDestPager, (uint)(iDest), pDestPg, (int)(0))))) && ((0) == (rc = (int)(sqlite3PagerWrite(pDestPg)))))
				{
					byte* zIn = &zSrcData[iOff % nSrcPgsz];
					byte* zDestData = sqlite3PagerGetData(pDestPg);
					byte* zOut = &zDestData[iOff % nDestPgsz];
					CRuntime.memcpy(zOut, zIn, (ulong)(nCopy));
					((byte*)(sqlite3PagerGetExtra(pDestPg)))[0] = (byte)(0);
					if (((iOff) == (0)) && ((bUpdate) == (0)))
					{
						sqlite3Put4byte(&zOut[28], (uint)(sqlite3BtreeLastPage(p.pSrc)));
					}
				}

				sqlite3PagerUnref(pDestPg);
			}

			return (int)(rc);
		}
		public static void backupUpdate(sqlite3_backup p, uint iPage, byte* aData)
		{
			do
			{
				if ((isFatalError((int)(p.rc)) == 0) && ((iPage) < (p.iNext)))
				{
					int rc = 0;
					sqlite3_mutex_enter(p.pDestDb.mutex);
					rc = (int)(backupOnePage(p, (uint)(iPage), aData, (int)(1)));
					sqlite3_mutex_leave(p.pDestDb.mutex);
					if (rc != 0)
					{
						p.rc = (int)(rc);
					}
				}
			}
			while ((p = p.pNext) != null);
		}
		public static int setDestPgsz(sqlite3_backup p)
		{
			int rc = 0;
			rc = (int)(sqlite3BtreeSetPageSize(p.pDest, (int)(sqlite3BtreeGetPageSize(p.pSrc)), (int)(0), (int)(0)));
			return (int)(rc);
		}
		public static int sqlite3_backup_finish(sqlite3_backup p)
		{
			sqlite3_backup pp;
			sqlite3 pSrcDb;
			int rc = 0;
			if ((p) == (null))
				return (int)(0);
			pSrcDb = p.pSrcDb;
			sqlite3_mutex_enter(pSrcDb.mutex);
			sqlite3BtreeEnter(p.pSrc);
			if ((p.pDestDb) != null)
			{
				sqlite3_mutex_enter(p.pDestDb.mutex);
			}

			if ((p.pDestDb) != null)
			{
				p.pSrc.nBackup--;
			}

			if ((p.isAttached) != 0)
			{
				pp = sqlite3PagerBackupPtr(sqlite3BtreePager(p.pSrc));
				while (pp != p)
				{
					pp = (pp).pNext;
				}

				pp = p.pNext;
			}

			sqlite3BtreeRollback(p.pDest, (int)(0), (int)(0));
			rc = (int)(((p.rc) == (101)) ? 0 : p.rc);
			if ((p.pDestDb) != null)
			{
				sqlite3Error(p.pDestDb, (int)(rc));
				sqlite3LeaveMutexAndCloseZombie(p.pDestDb);
			}

			sqlite3BtreeLeave(p.pSrc);
			if ((p.pDestDb) != null)
			{
				sqlite3_free(p);
			}

			sqlite3LeaveMutexAndCloseZombie(pSrcDb);
			return (int)(rc);
		}
		public static int sqlite3_backup_pagecount(sqlite3_backup p)
		{
			return (int)(p.nPagecount);
		}
		public static int sqlite3_backup_remaining(sqlite3_backup p)
		{
			return (int)(p.nRemaining);
		}
		public static int sqlite3_backup_step(sqlite3_backup p, int nPage)
		{
			int rc = 0;
			int destMode = 0;
			int pgszSrc = (int)(0);
			int pgszDest = (int)(0);
			sqlite3_mutex_enter(p.pSrcDb.mutex);
			sqlite3BtreeEnter(p.pSrc);
			if ((p.pDestDb) != null)
			{
				sqlite3_mutex_enter(p.pDestDb.mutex);
			}

			rc = (int)(p.rc);
			if (isFatalError((int)(rc)) == 0)
			{
				Pager pSrcPager = sqlite3BtreePager(p.pSrc);
				Pager pDestPager = sqlite3BtreePager(p.pDest);
				int ii = 0;
				int nSrcPage = (int)(-1);
				int bCloseTrans = (int)(0);
				if (((p.pDestDb) != null) && ((p.pSrc.pBt.inTransaction) == (2)))
				{
					rc = (int)(5);
				}
				else
				{
					rc = (int)(0);
				}

				if (((rc) == (0)) && ((0) == (sqlite3BtreeTxnState(p.pSrc))))
				{
					rc = (int)(sqlite3BtreeBeginTrans(p.pSrc, (int)(0), null));
					bCloseTrans = (int)(1);
				}

				if ((((p.bDestLocked) == (0)) && ((rc) == (0))) && ((setDestPgsz(p)) == (7)))
				{
					rc = (int)(7);
				}

				if ((((0) == (rc)) && ((p.bDestLocked) == (0))) && ((0) == (rc = (int)(sqlite3BtreeBeginTrans(p.pDest, (int)(2), (int*)(&p.iDestSchema))))))
				{
					p.bDestLocked = (int)(1);
				}

				pgszSrc = (int)(sqlite3BtreeGetPageSize(p.pSrc));
				pgszDest = (int)(sqlite3BtreeGetPageSize(p.pDest));
				destMode = (int)(sqlite3PagerGetJournalMode(sqlite3BtreePager(p.pDest)));
				if ((((0) == (rc)) && ((destMode) == (5))) && (pgszSrc != pgszDest))
				{
					rc = (int)(8);
				}

				nSrcPage = ((int)(sqlite3BtreeLastPage(p.pSrc)));
				for (ii = (int)(0); ((((nPage) < (0)) || ((ii) < (nPage))) && ((p.iNext) <= ((uint)(nSrcPage)))) && (rc == 0); ii++)
				{
					uint iSrcPg = (uint)(p.iNext);
					if (iSrcPg != ((sqlite3PendingByte / ((p.pSrc.pBt).pageSize)) + 1))
					{
						PgHdr pSrcPg;
						rc = (int)(sqlite3PagerGet(pSrcPager, (uint)(iSrcPg), pSrcPg, (int)(0x02)));
						if ((rc) == (0))
						{
							rc = (int)(backupOnePage(p, (uint)(iSrcPg), sqlite3PagerGetData(pSrcPg), (int)(0)));
							sqlite3PagerUnref(pSrcPg);
						}
					}

					p.iNext++;
				}

				if ((rc) == (0))
				{
					p.nPagecount = (uint)(nSrcPage);
					p.nRemaining = (uint)(nSrcPage + 1 - p.iNext);
					if ((p.iNext) > ((uint)(nSrcPage)))
					{
						rc = (int)(101);
					}
					else if (p.isAttached == 0)
					{
						attachBackupObject(p);
					}
				}

				if ((rc) == (101))
				{
					if ((nSrcPage) == (0))
					{
						rc = (int)(sqlite3BtreeNewDb(p.pDest));
						nSrcPage = (int)(1);
					}

					if (((rc) == (0)) || ((rc) == (101)))
					{
						rc = (int)(sqlite3BtreeUpdateMeta(p.pDest, (int)(1), (uint)(p.iDestSchema + 1)));
					}

					if ((rc) == (0))
					{
						if ((p.pDestDb) != null)
						{
							sqlite3ResetAllSchemasOfConnection(p.pDestDb);
						}

						if ((destMode) == (5))
						{
							rc = (int)(sqlite3BtreeSetVersion(p.pDest, (int)(2)));
						}
					}

					if ((rc) == (0))
					{
						int nDestTruncate = 0;
						if ((pgszSrc) < (pgszDest))
						{
							int ratio = (int)(pgszDest / pgszSrc);
							nDestTruncate = (int)((nSrcPage + ratio - 1) / ratio);
							if ((nDestTruncate) == ((int)((sqlite3PendingByte / ((p.pDest.pBt).pageSize)) + 1)))
							{
								nDestTruncate--;
							}
						}
						else
						{
							nDestTruncate = (int)(nSrcPage * (pgszSrc / pgszDest));
						}

						if ((pgszSrc) < (pgszDest))
						{
							long iSize = (long)((long)(pgszSrc) * (long)(nSrcPage));
							sqlite3_file pFile = sqlite3PagerFile(pDestPager);
							uint iPg = 0;
							int nDstPage = 0;
							long iOff = 0;
							long iEnd = 0;
							sqlite3PagerPagecount(pDestPager, &nDstPage);
							for (iPg = (uint)(nDestTruncate); ((rc) == (0)) && ((iPg) <= ((uint)(nDstPage))); iPg++)
							{
								if (iPg != ((sqlite3PendingByte / ((p.pDest.pBt).pageSize)) + 1))
								{
									PgHdr pPg;
									rc = (int)(sqlite3PagerGet(pDestPager, (uint)(iPg), pPg, (int)(0)));
									if ((rc) == (0))
									{
										rc = (int)(sqlite3PagerWrite(pPg));
										sqlite3PagerUnref(pPg);
									}
								}
							}

							if ((rc) == (0))
							{
								rc = (int)(sqlite3PagerCommitPhaseOne(pDestPager, null, (int)(1)));
							}

							iEnd = (long)((sqlite3PendingByte + pgszDest) < (iSize) ? (sqlite3PendingByte + pgszDest) : (iSize));
							for (iOff = (long)(sqlite3PendingByte + pgszSrc); ((rc) == (0)) && ((iOff) < (iEnd)); iOff += (long)(pgszSrc))
							{
								PgHdr pSrcPg = null;
								uint iSrcPg = (uint)((iOff / pgszSrc) + 1);
								rc = (int)(sqlite3PagerGet(pSrcPager, (uint)(iSrcPg), pSrcPg, (int)(0)));
								if ((rc) == (0))
								{
									byte* zData = sqlite3PagerGetData(pSrcPg);
									rc = (int)(sqlite3OsWrite(pFile, zData, (int)(pgszSrc), (long)(iOff)));
								}

								sqlite3PagerUnref(pSrcPg);
							}

							if ((rc) == (0))
							{
								rc = (int)(backupTruncateFile(pFile, (long)(iSize)));
							}

							if ((rc) == (0))
							{
								rc = (int)(sqlite3PagerSync(pDestPager, null));
							}
						}
						else
						{
							sqlite3PagerTruncateImage(pDestPager, (uint)(nDestTruncate));
							rc = (int)(sqlite3PagerCommitPhaseOne(pDestPager, null, (int)(0)));
						}

						if (((0) == (rc)) && ((0) == (rc = (int)(sqlite3BtreeCommitPhaseTwo(p.pDest, (int)(0))))))
						{
							rc = (int)(101);
						}
					}
				}

				if ((bCloseTrans) != 0)
				{
					sqlite3BtreeCommitPhaseOne(p.pSrc, null);
					sqlite3BtreeCommitPhaseTwo(p.pSrc, (int)(0));
				}

				if ((rc) == (10 | (12 << 8)))
				{
					rc = (int)(7);
				}

				p.rc = (int)(rc);
			}

			if ((p.pDestDb) != null)
			{
				sqlite3_mutex_leave(p.pDestDb.mutex);
			}

			sqlite3BtreeLeave(p.pSrc);
			sqlite3_mutex_leave(p.pSrcDb.mutex);
			return (int)(rc);
		}
		public static void sqlite3BackupRestart(sqlite3_backup pBackup)
		{
			sqlite3_backup p;
			for (p = pBackup; p; p = p.pNext)
			{
				p.iNext = (uint)(1);
			}
		}
		public static void sqlite3BackupUpdate(sqlite3_backup pBackup, uint iPage, byte* aData)
		{
			if ((pBackup) != null)
				backupUpdate(pBackup, (uint)(iPage), aData);
		}
	}
}