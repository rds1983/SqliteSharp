// Generated by Hebron at 4/3/2022 2:10:11 AM

using System;
using System.Runtime.InteropServices;
using Hebron.Runtime;

namespace SqliteSharp
{
	unsafe partial class Sqlite
	{
		public static int winGetReadLock(winFile pFile)
		{
			int res = 0;
			if ((1) != 0)
			{
				res = (int)(winLockFile(&pFile.h, (uint)(0x00000001), (uint)(sqlite3PendingByte + 2), (uint)(0), (uint)(510), (uint)(0)));
			}
			else
			{
				int lk = 0;
				sqlite3_randomness((int)(sizeof(int)), &lk);
				pFile.sharedLockByte = ((short)((lk & 0x7fffffff) % (510 - 1)));
				res = (int)(winLockFile(&pFile.h, (uint)(0x00000001 | 0x00000002), (uint)((sqlite3PendingByte + 2) + pFile.sharedLockByte), (uint)(0), (uint)(1), (uint)(0)));
			}

			if ((res) == (0))
			{
				pFile.lastErrno = (uint)((Uint())(aSyscall[26].pCurrent)());
			}

			return (int)(res);
		}
		public static int winMapfile(winFile pFd, long nByte)
		{
			long nMap = (long)(nByte);
			int rc = 0;
			if ((pFd.nFetchOut) > (0))
				return (int)(0);
			if ((nMap) < (0))
			{
				rc = (int)(winFileSize((sqlite3_file)(pFd), &nMap));
				if ((rc) != 0)
				{
					return (int)(10 | (7 << 8));
				}
			}

			if ((nMap) > (pFd.mmapSizeMax))
			{
				nMap = (long)(pFd.mmapSizeMax);
			}

			nMap &= (long)(~(long)(winSysInfo.dwPageSize - 1));
			if (((nMap) == (0)) && ((pFd.mmapSize) > (0)))
			{
				winUnmapfile(pFd);
			}

			if (nMap != pFd.mmapSize)
			{
				void* pNew = null;
				uint protect = (uint)(0x02);
				uint flags = (uint)(0x0004);
				winUnmapfile(pFd);
				pFd.hMap = (Void * (Void * , Void * , Void * , Void * , Void * , Void * ))(aSyscall[7].pCurrent)(pFd.h, null, (uint)(protect), (uint)((nMap >> 32) & 0xffffffff), (uint)(nMap & 0xffffffff), null);
				if ((pFd.hMap) == null)
				{
					pFd.lastErrno = (uint)((Uint())(aSyscall[26].pCurrent)());
					rc = (int)(winLogErrorAtLine((int)(10 | (24 << 8)), (uint)(pFd.lastErrno), "winMapfile1", pFd.zPath, (int)(47386)));
					return (int)(0);
				}

				pNew = (Void * (Void * , Void * , Void * , Void * , Void * ))(aSyscall[49].pCurrent)(pFd.hMap, (uint)(flags), (uint)(0), (uint)(0), (ulong)(nMap));
				if ((pNew) == null)
				{
					(Int(Void * ))(aSyscall[3].pCurrent)(pFd.hMap);
					pFd.hMap = null;
					pFd.lastErrno = (uint)((Uint())(aSyscall[26].pCurrent)());
					rc = (int)(winLogErrorAtLine((int)(10 | (24 << 8)), (uint)(pFd.lastErrno), "winMapfile2", pFd.zPath, (int)(47404)));
					return (int)(0);
				}

				pFd.pMapRegion = pNew;
				pFd.mmapSize = (long)(nMap);
			}

			return (int)(0);
		}
		public static void winModeBit(winFile pFile, byte mask, int* pArg)
		{
			if ((*pArg) < (0))
			{
				*pArg = (int)((pFile.ctrlFlags & mask) != 0);
			}
			else if ((*pArg) == (0))
			{
				pFile.ctrlFlags &= (byte)(~mask);
			}
			else
			{
				pFile.ctrlFlags |= (byte)(mask);
			}
		}
		public static int winOpenSharedMemory(winFile pDbFd)
		{
			winShm p;
			winShmNode pShmNode = null;
			int rc = (int)(0);
			winShmNode pNew;
			int nName = 0;
			p = sqlite3MallocZero((ulong)(sizeof(winShm)));
			if ((p) == (null))
				return (int)(10 | (12 << 8));
			nName = (int)(sqlite3Strlen30(pDbFd.zPath));
			pNew = sqlite3MallocZero((ulong)(sizeof(winShmNode) + nName + 17));
			if ((pNew) == (null))
			{
				sqlite3_free(p);
				return (int)(10 | (12 << 8));
			}

			pNew.zFilename = (sbyte*)(pNew[1]);
			sqlite3_snprintf((int)(nName + 15), pNew.zFilename, "%s-shm", pDbFd.zPath);
			winShmEnterMutex();
			for (pShmNode = winShmNodeList; pShmNode; pShmNode = pShmNode.pNext)
			{
				if ((sqlite3StrICmp(pShmNode.zFilename, pNew.zFilename)) == (0))
					break;
			}

			if ((pShmNode) != null)
			{
				sqlite3_free(pNew);
			}
			else
			{
				int inFlags = (int)(0x00080000);
				int outFlags = (int)(0);
				pShmNode = pNew;
				pNew = null;
				(pShmNode.hFile).h = ((void*)((long)(-1)));
				pShmNode.pNext = winShmNodeList;
				winShmNodeList = pShmNode;
				if ((sqlite3Config.bCoreMutex) != 0)
				{
					pShmNode.mutex = sqlite3_mutex_alloc((int)(0));
					if ((pShmNode.mutex) == (null))
					{
						rc = (int)(10 | (12 << 8));
						goto shm_open_err;
					}
				}

				if ((0) == (sqlite3_uri_boolean(pDbFd.zPath, "readonly_shm", (int)(0))))
				{
					inFlags |= (int)(0x00000002 | 0x00000004);
				}
				else
				{
					inFlags |= (int)(0x00000001);
				}

				rc = (int)(winOpen(pDbFd.pVfs, pShmNode.zFilename, (sqlite3_file)(pShmNode.hFile), (int)(inFlags), &outFlags));
				if (rc != 0)
				{
					rc = (int)(winLogErrorAtLine((int)(rc), (uint)((Uint())(aSyscall[26].pCurrent)()), "winOpenShm", pShmNode.zFilename, (int)(46904)));
					goto shm_open_err;
				}

				if ((outFlags) == (0x00000001))
					pShmNode.isReadonly = (byte)(1);
				rc = (int)(winLockSharedMemory(pShmNode));
				if ((rc != 0) && (rc != (8 | (5 << 8))))
					goto shm_open_err;
			}

			p.pShmNode = pShmNode;
			pShmNode.nRef++;
			pDbFd.pShm = p;
			winShmLeaveMutex();
			sqlite3_mutex_enter(pShmNode.mutex);
			p.pNext = pShmNode.pFirst;
			pShmNode.pFirst = p;
			sqlite3_mutex_leave(pShmNode.mutex);
			return (int)(rc);
		shm_open_err:
			; winShmSystemLock(pShmNode, (int)(1), (int)(((22 + 8) * 4) + 8), (int)(1));
			winShmPurge(pDbFd.pVfs, (int)(0));
			sqlite3_free(p);
			sqlite3_free(pNew);
			winShmLeaveMutex();
			return (int)(rc);
		}
		public static int winSeekFile(winFile pFile, long iOffset)
		{
			int upperBits = 0;
			int lowerBits = 0;
			uint dwRet = 0;
			uint lastErrno = 0;
			upperBits = ((int)((iOffset >> 32) & 0x7fffffff));
			lowerBits = ((int)(iOffset & 0xffffffff));
			dwRet = (uint)((Uint(Void * , Void * , Void * , Void * ))(aSyscall[54].pCurrent)(pFile.h, (int)(lowerBits), &upperBits, (uint)(0)));
			if ((((dwRet) == ((uint)(-1))) && ((lastErrno = (uint)((Uint())(aSyscall[26].pCurrent)())) != 0L)))
			{
				pFile.lastErrno = (uint)(lastErrno);
				winLogErrorAtLine((int)(10 | (22 << 8)), (uint)(pFile.lastErrno), "winSeekFile", pFile.zPath, (int)(45535));
				return (int)(1);
			}

			return (int)(0);
		}
		public static int winUnlockReadLock(winFile pFile)
		{
			int res = 0;
			uint lastErrno = 0;
			if ((1) != 0)
			{
				res = (int)(winUnlockFile(&pFile.h, (uint)(sqlite3PendingByte + 2), (uint)(0), (uint)(510), (uint)(0)));
			}
			else
			{
				res = (int)(winUnlockFile(&pFile.h, (uint)((sqlite3PendingByte + 2) + pFile.sharedLockByte), (uint)(0), (uint)(1), (uint)(0)));
			}

			if (((res) == (0)) && ((lastErrno = (uint)((Uint())(aSyscall[26].pCurrent)())) != 158L))
			{
				pFile.lastErrno = (uint)(lastErrno);
				winLogErrorAtLine((int)(10 | (8 << 8)), (uint)(pFile.lastErrno), "winUnlockReadLock", pFile.zPath, (int)(46130));
			}

			return (int)(res);
		}
		public static int winUnmapfile(winFile pFile)
		{
			if ((pFile.pMapRegion) != null)
			{
				if ((Int(Void * ))(aSyscall[59].pCurrent)(pFile.pMapRegion) == 0)
				{
					pFile.lastErrno = (uint)((Uint())(aSyscall[26].pCurrent)());
					return (int)(winLogErrorAtLine((int)(10 | (24 << 8)), (uint)(pFile.lastErrno), "winUnmapfile1", pFile.zPath, (int)(47298)));
				}

				pFile.pMapRegion = null;
				pFile.mmapSize = (long)(0);
			}

			if (pFile.hMap != null)
			{
				if ((Int(Void * ))(aSyscall[3].pCurrent)(pFile.hMap) == 0)
				{
					pFile.lastErrno = (uint)((Uint())(aSyscall[26].pCurrent)());
					return (int)(winLogErrorAtLine((int)(10 | (24 << 8)), (uint)(pFile.lastErrno), "winUnmapfile2", pFile.zPath, (int)(47309)));
				}

				pFile.hMap = null;
			}

			return (int)(0);
		}
	}
}