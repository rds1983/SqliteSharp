// Generated by Hebron at 4/3/2022 2:10:11 AM

using System;
using System.Runtime.InteropServices;
using Hebron.Runtime;

namespace SqliteSharp
{
	unsafe partial class Sqlite
	{
		public static Select findRightmost(Select p)
		{
			while ((p.pNext) != null)
			{
				p = p.pNext;
			}

			return p;
		}
		public static void gatherSelectWindows(Select p)
		{
			Walker w = new Walker();
			w.xExprCallback = gatherSelectWindowsCallback;
			w.xSelectCallback = gatherSelectWindowsSelectCallback;
			w.xSelectCallback2 = null;
			w.pParse = null;
			w.u.pSelect = p;
			sqlite3WalkSelect(w, p);
		}
		public static int hasAnchor(Select p)
		{
			while (((p) != null) && ((p.selFlags & 0x0002000) != 0))
			{
				p = p.pPrior;
			}

			return (int)(p != null);
		}
		public static void heightOfSelect(Select pSelect, int* pnHeight)
		{
			Select p;
			for (p = pSelect; p; p = p.pPrior)
			{
				heightOfExpr(p.pWhere, pnHeight);
				heightOfExpr(p.pHaving, pnHeight);
				heightOfExpr(p.pLimit, pnHeight);
				heightOfExprList(p.pEList, pnHeight);
				heightOfExprList(p.pGroupBy, pnHeight);
				heightOfExprList(p.pOrderBy, pnHeight);
			}
		}
		public static Table isSimpleCount(Select p, AggInfo pAggInfo)
		{
			Table pTab;
			Expr pExpr;
			if ((((((p.pWhere) != null) || (p.pEList.nExpr != 1)) || (p.pSrc.nSrc != 1)) || ((p.pSrc.a[0].pSelect) != null)) || (pAggInfo.nFunc != 1))
			{
				return null;
			}

			pTab = p.pSrc.a[0].pTab;
			if (!(((pTab).eTabType) == (0)))
				return null;
			pExpr = p.pEList.a[0].pExpr;
			if (pExpr.op != 168)
				return null;
			if (pExpr.pAggInfo != pAggInfo)
				return null;
			if ((pAggInfo.aFunc[0].pFunc.funcFlags & 0x0100) == (0))
				return null;
			if ((((pExpr).flags & (0x000002 | 0x1000000)) != 0))
				return null;
			return pTab;
		}
		public static void recomputeColumnsUsed(Select pSelect, SrcItem pSrcItem)
		{
			Walker w = new Walker();
			if (((pSrcItem.pTab) == (null)))
				return;
			CRuntime.memset(w, (int)(0), (ulong)(sizeof(Walker)));
			w.xExprCallback = recomputeColumnsUsedExpr;
			w.xSelectCallback = sqlite3SelectWalkNoop;
			w.u.pSrcItem = pSrcItem;
			pSrcItem.colUsed = (ulong)(0);
			sqlite3WalkSelect(w, pSelect);
		}
		public static int sqlite3SelectExprHeight(Select p)
		{
			int nHeight = (int)(0);
			heightOfSelect(p, &nHeight);
			return (int)(nHeight);
		}
		public static void sqlite3WindowLink(Select pSel, Window pWin)
		{
			if ((pSel) != null)
			{
				if (((null) == (pSel.pWin)) || ((0) == (sqlite3WindowCompare(null, pSel.pWin, pWin, (int)(0)))))
				{
					pWin.pNextWin = pSel.pWin;
					if ((pSel.pWin) != null)
					{
						pSel.pWin.ppThis = pWin.pNextWin;
					}

					pSel.pWin = pWin;
					pWin.ppThis = pSel.pWin;
				}
				else
				{
					if ((sqlite3ExprListCompare(pWin.pPartition, pSel.pWin.pPartition, (int)(-1))) != 0)
					{
						pSel.selFlags |= (uint)(0x2000000);
					}
				}
			}
		}
		public static void windowRemoveExprFromSelect(Select pSelect, Expr pExpr)
		{
			if ((pSelect.pWin) != null)
			{
				Walker sWalker = new Walker();
				CRuntime.memset(sWalker, (int)(0), (ulong)(sizeof(Walker)));
				sWalker.xExprCallback = resolveRemoveWindowsCb;
				sWalker.u.pSelect = pSelect;
				sqlite3WalkExpr(sWalker, pExpr);
			}
		}
	}
}