// Generated by Hebron at 4/3/2022 2:10:10 AM

using System;
using System.Runtime.InteropServices;
using Hebron.Runtime;

namespace SqliteSharp
{
	unsafe partial class Sqlite
	{
		public static int alsoAnInt(sqlite3_value pRec, double rValue, long* piValue)
		{
			long iValue = (long)(rValue);
			if ((sqlite3RealSameAsInt((double)(rValue), (long)(iValue))) != 0)
			{
				*piValue = (long)(iValue);
				return (int)(1);
			}

			return ((0) == (sqlite3Atoi64(pRec.z, piValue, (int)(pRec.n), (byte)(pRec.enc))) ? 1 : 0);
		}
		public static void applyAffinity(sqlite3_value pRec, sbyte affinity, byte enc)
		{
			if ((affinity) >= (0x43))
			{
				if ((pRec.flags & 0x0004) == (0))
				{
					if ((pRec.flags & 0x0008) == (0))
					{
						if ((pRec.flags & 0x0002) != 0)
							applyNumericAffinity(pRec, (int)(1));
					}
					else
					{
						sqlite3VdbeIntegerAffinity(pRec);
					}
				}
			}
			else if ((affinity) == (0x42))
			{
				if ((0) == (pRec.flags & 0x0002))
				{
					if ((pRec.flags & (0x0008 | 0x0004 | 0x0020)) != 0)
					{
						sqlite3VdbeMemStringify(pRec, (byte)(enc), (byte)(1));
					}
				}

				pRec.flags &= (ushort)(~(0x0008 | 0x0004 | 0x0020));
			}
		}
		public static void applyNumericAffinity(sqlite3_value pRec, int bTryForInt)
		{
			double rValue = 0;
			byte enc = (byte)(pRec.enc);
			int rc = 0;
			rc = (int)(sqlite3AtoF(pRec.z, &rValue, (int)(pRec.n), (byte)(enc)));
			if ((rc) <= (0))
				return;
			if (((rc) == (1)) && ((alsoAnInt(pRec, (double)(rValue), &pRec.u.i)) != 0))
			{
				pRec.flags |= (ushort)(0x0004);
			}
			else
			{
				pRec.u.r = (double)(rValue);
				pRec.flags |= (ushort)(0x0008);
				if ((bTryForInt) != 0)
					sqlite3VdbeIntegerAffinity(pRec);
			}

			pRec.flags &= (ushort)(~0x0002);
		}
		public static ushort computeNumericType(sqlite3_value pMem)
		{
			int rc = 0;
			long ix = 0;
			if ((((pMem).flags & 0x4000) ? sqlite3VdbeMemExpandBlob(pMem) : 0) != 0)
			{
				pMem.u.i = (long)(0);
				return (ushort)(0x0004);
			}

			rc = (int)(sqlite3AtoF(pMem.z, &pMem.u.r, (int)(pMem.n), (byte)(pMem.enc)));
			if ((rc) <= (0))
			{
				if (((rc) == (0)) && ((sqlite3Atoi64(pMem.z, &ix, (int)(pMem.n), (byte)(pMem.enc))) <= (1)))
				{
					pMem.u.i = (long)(ix);
					return (ushort)(0x0004);
				}
				else
				{
					return (ushort)(0x0008);
				}
			}
			else if (((rc) == (1)) && ((sqlite3Atoi64(pMem.z, &ix, (int)(pMem.n), (byte)(pMem.enc))) == (0)))
			{
				pMem.u.i = (long)(ix);
				return (ushort)(0x0004);
			}

			return (ushort)(0x0008);
		}
		public static ulong filterHash(sqlite3_value aMem, VdbeOp* pOp)
		{
			int i = 0; int mx = 0;
			ulong h = (ulong)(0);
			for (i = (int)(pOp->p3), mx = (int)(i + pOp->p4.i); (i) < (mx); i++)
			{
				sqlite3_value p = aMem[i];
				if ((p.flags & (0x0004 | 0x0020)) != 0)
				{
					h += (ulong)(p.u.i);
				}
				else if ((p.flags & 0x0008) != 0)
				{
					h += (ulong)(sqlite3VdbeIntValue(p));
				}
				else if ((p.flags & (0x0002 | 0x0010)) != 0)
				{
					h += (ulong)(p.n);
					if ((p.flags & 0x4000) != 0)
						h += (ulong)(p.u.nZero);
				}
			}

			return (ulong)(h);
		}
		public static void initMemArray(sqlite3_value p, int N, sqlite3 db, ushort flags)
		{
			while ((N--) > (0))
			{
				p.db = db;
				p.flags = (ushort)(flags);
				p.szMalloc = (int)(0);
				p++;
			}
		}
		public static long memIntValue(sqlite3_value pMem)
		{
			long value = (long)(0);
			sqlite3Atoi64(pMem.z, &value, (int)(pMem.n), (byte)(pMem.enc));
			return (long)(value);
		}
		public static double memRealValue(sqlite3_value pMem)
		{
			double val = (double)(0);
			sqlite3AtoF(pMem.z, &val, (int)(pMem.n), (byte)(pMem.enc));
			return (double)(val);
		}
		public static ushort numericType(sqlite3_value pMem)
		{
			if ((pMem.flags & (0x0004 | 0x0008 | 0x0020)) != 0)
			{
				return (ushort)(pMem.flags & (0x0004 | 0x0008 | 0x0020));
			}

			if ((pMem.flags & (0x0002 | 0x0010)) != 0)
			{
				return (ushort)(computeNumericType(pMem));
			}

			return (ushort)(0);
		}
		public static sqlite3_value out2PrereleaseWithClear(sqlite3_value pOut)
		{
			sqlite3VdbeMemSetNull(pOut);
			pOut.flags = (ushort)(0x0004);
			return pOut;
		}
		public static void releaseMemArray(sqlite3_value p, int N)
		{
			if (((p) != null) && ((N) != 0))
			{
				sqlite3_value pEnd = p[N];
				sqlite3 db = p.db;
				if ((db.pnBytesFreed) != null)
				{
					do
					{
						if ((p.szMalloc) != 0)
							sqlite3DbFree(db, p.zMalloc);
					}
					while ((++p) < (pEnd));
					return;
				}

				do
				{
					if ((p.flags & (0x2000 | 0x0400)) != 0)
					{
						sqlite3VdbeMemRelease(p);
					}
					else if ((p.szMalloc) != 0)
					{
						sqlite3DbFreeNN(db, p.zMalloc);
						p.szMalloc = (int)(0);
					}

					p.flags = (ushort)(0x0080);
				}
				while ((++p) < (pEnd));
			}
		}
		public static int sqlite3_value_bytes(sqlite3_value pVal)
		{
			return (int)(sqlite3ValueBytes(pVal, (byte)(1)));
		}
		public static int sqlite3_value_bytes16(sqlite3_value pVal)
		{
			return (int)(sqlite3ValueBytes(pVal, (byte)(2)));
		}
		public static double sqlite3_value_double(sqlite3_value pVal)
		{
			return (double)(sqlite3VdbeRealValue(pVal));
		}
		public static sqlite3_value sqlite3_value_dup(sqlite3_value pOrig)
		{
			sqlite3_value pNew;
			if ((pOrig) == (null))
				return null;
			pNew = sqlite3_malloc((int)(sizeof(sqlite3_value)));
			if ((pNew) == (null))
				return null;
			CRuntime.memset(pNew, (int)(0), (ulong)(sizeof(sqlite3_value)));
			CRuntime.memcpy(pNew, pOrig, ((ulong)(&((0).zMalloc))));
			pNew.flags &= (ushort)(~0x0400);
			pNew.db = null;
			if ((pNew.flags & (0x0002 | 0x0010)) != 0)
			{
				pNew.flags &= (ushort)(~(0x0800 | 0x0400));
				pNew.flags |= (ushort)(0x1000);
				if (sqlite3VdbeMemMakeWriteable(pNew) != 0)
				{
					sqlite3ValueFree(pNew);
					pNew = null;
				}
			}

			return pNew;
		}
		public static void sqlite3_value_free(sqlite3_value pOld)
		{
			sqlite3ValueFree(pOld);
		}
		public static int sqlite3_value_frombind(sqlite3_value pVal)
		{
			return (int)((pVal.flags & 0x0040) != 0);
		}
		public static int sqlite3_value_int(sqlite3_value pVal)
		{
			return (int)(sqlite3VdbeIntValue(pVal));
		}
		public static long sqlite3_value_int64(sqlite3_value pVal)
		{
			return (long)(sqlite3VdbeIntValue(pVal));
		}
		public static int sqlite3_value_nochange(sqlite3_value pVal)
		{
			return ((pVal.flags & (0x0001 | 0x4000)) == (0x0001 | 0x4000) ? 1 : 0);
		}
		public static int sqlite3_value_numeric_type(sqlite3_value pVal)
		{
			int eType = (int)(sqlite3_value_type(pVal));
			if ((eType) == (3))
			{
				sqlite3_value pMem = pVal;
				applyNumericAffinity(pMem, (int)(0));
				eType = (int)(sqlite3_value_type(pVal));
			}

			return (int)(eType);
		}
		public static uint sqlite3_value_subtype(sqlite3_value pVal)
		{
			sqlite3_value pMem = pVal;
			return (uint)((pMem.flags & 0x8000) ? pMem.eSubtype : 0);
		}
		public static int sqlite3_value_type(sqlite3_value pVal)
		{
			return (int)(sqlite3_value_type_aType[pVal.flags & 0x003f]);
		}
		public static int sqlite3_vtab_in_first(sqlite3_value pVal, sqlite3_value ppOut)
		{
			return (int)(valueFromValueList(pVal, ppOut, (int)(0)));
		}
		public static int sqlite3_vtab_in_next(sqlite3_value pVal, sqlite3_value ppOut)
		{
			return (int)(valueFromValueList(pVal, ppOut, (int)(1)));
		}
		public static int sqlite3BlobCompare(sqlite3_value pB1, sqlite3_value pB2)
		{
			int c = 0;
			int n1 = (int)(pB1.n);
			int n2 = (int)(pB2.n);
			if (((pB1.flags | pB2.flags) & 0x4000) != 0)
			{
				if ((pB1.flags & pB2.flags & 0x4000) != 0)
				{
					return (int)(pB1.u.nZero - pB2.u.nZero);
				}
				else if ((pB1.flags & 0x4000) != 0)
				{
					if (isAllZero(pB2.z, (int)(pB2.n)) == 0)
						return (int)(-1);
					return (int)(pB1.u.nZero - n2);
				}
				else
				{
					if (isAllZero(pB1.z, (int)(pB1.n)) == 0)
						return (int)(+1);
					return (int)(n1 - pB2.u.nZero);
				}
			}

			c = (int)(memcmp(pB1.z, pB2.z, (ulong)((n1) > (n2) ? n2 : n1)));
			if ((c) != 0)
				return (int)(c);
			return (int)(n1 - n2);
		}
		public static int sqlite3MemCompare(sqlite3_value pMem1, sqlite3_value pMem2, CollSeq pColl)
		{
			int f1 = 0; int f2 = 0;
			int combined_flags = 0;
			f1 = (int)(pMem1.flags);
			f2 = (int)(pMem2.flags);
			combined_flags = (int)(f1 | f2);
			if ((combined_flags & 0x0001) != 0)
			{
				return (int)((f2 & 0x0001) - (f1 & 0x0001));
			}

			if ((combined_flags & (0x0004 | 0x0008 | 0x0020)) != 0)
			{
				if ((f1 & f2 & (0x0004 | 0x0020)) != 0)
				{
					if ((pMem1.u.i) < (pMem2.u.i))
						return (int)(-1);
					if ((pMem1.u.i) > (pMem2.u.i))
						return (int)(+1);
					return (int)(0);
				}

				if ((f1 & f2 & 0x0008) != 0)
				{
					if ((pMem1.u.r) < (pMem2.u.r))
						return (int)(-1);
					if ((pMem1.u.r) > (pMem2.u.r))
						return (int)(+1);
					return (int)(0);
				}

				if ((f1 & (0x0004 | 0x0020)) != 0)
				{
					if ((f2 & 0x0008) != 0)
					{
						return (int)(sqlite3IntFloatCompare((long)(pMem1.u.i), (double)(pMem2.u.r)));
					}
					else if ((f2 & (0x0004 | 0x0020)) != 0)
					{
						if ((pMem1.u.i) < (pMem2.u.i))
							return (int)(-1);
						if ((pMem1.u.i) > (pMem2.u.i))
							return (int)(+1);
						return (int)(0);
					}
					else
					{
						return (int)(-1);
					}
				}

				if ((f1 & 0x0008) != 0)
				{
					if ((f2 & (0x0004 | 0x0020)) != 0)
					{
						return (int)(-sqlite3IntFloatCompare((long)(pMem2.u.i), (double)(pMem1.u.r)));
					}
					else
					{
						return (int)(-1);
					}
				}

				return (int)(+1);
			}

			if ((combined_flags & 0x0002) != 0)
			{
				if ((f1 & 0x0002) == (0))
				{
					return (int)(1);
				}

				if ((f2 & 0x0002) == (0))
				{
					return (int)(-1);
				}

				if ((pColl) != null)
				{
					return (int)(vdbeCompareMemString(pMem1, pMem2, pColl, null));
				}
			}

			return (int)(sqlite3BlobCompare(pMem1, pMem2));
		}
		public static void sqlite3ValueApplyAffinity(sqlite3_value pVal, byte affinity, byte enc)
		{
			applyAffinity(pVal, (sbyte)(affinity), (byte)(enc));
		}
		public static int sqlite3ValueBytes(sqlite3_value pVal, byte enc)
		{
			sqlite3_value p = pVal;
			if (((p.flags & 0x0002) != 0) && ((pVal.enc) == (enc)))
			{
				return (int)(p.n);
			}

			if ((p.flags & 0x0010) != 0)
			{
				if ((p.flags & 0x4000) != 0)
				{
					return (int)(p.n + p.u.nZero);
				}
				else
				{
					return (int)(p.n);
				}
			}

			if ((p.flags & 0x0001) != 0)
				return (int)(0);
			return (int)(valueBytes(pVal, (byte)(enc)));
		}
		public static void sqlite3ValueFree(sqlite3_value v)
		{
			if (v == null)
				return;
			sqlite3VdbeMemRelease(v);
			sqlite3DbFreeNN((v).db, v);
		}
		public static void sqlite3ValueSetNull(sqlite3_value p)
		{
			sqlite3VdbeMemSetNull(p);
		}
		public static void sqlite3ValueSetStr(sqlite3_value v, int n, void* z, byte enc, delegate17 xDel)
		{
			if ((v) != null)
				sqlite3VdbeMemSetStr(v, z, (long)(n), (byte)(enc), xDel);
		}
		public static int sqlite3VdbeBooleanValue(sqlite3_value pMem, int ifNull)
		{
			if ((pMem.flags & (0x0004 | 0x0020)) != 0)
				return (int)(pMem.u.i != 0);
			if ((pMem.flags & 0x0001) != 0)
				return (int)(ifNull);
			return (int)(sqlite3VdbeRealValue(pMem) != 0.0);
		}
		public static int sqlite3VdbeChangeEncoding(sqlite3_value pMem, int desiredEnc)
		{
			int rc = 0;
			if (((pMem.flags & 0x0002) == 0) || ((pMem.enc) == (desiredEnc)))
			{
				return (int)(0);
			}

			rc = (int)(sqlite3VdbeMemTranslate(pMem, (byte)(desiredEnc)));
			return (int)(rc);
		}
		public static void sqlite3VdbeIntegerAffinity(sqlite3_value pMem)
		{
			long ix = 0;
			ix = (long)(doubleToInt64((double)(pMem.u.r)));
			if ((((pMem.u.r) == (ix)) && ((ix) > (((long)(-1)) - (0xffffffff | (((long)(0x7fffffff)) << 32))))) && ((ix) < (0xffffffff | (((long)(0x7fffffff)) << 32))))
			{
				pMem.u.i = (long)(ix);
				((pMem).flags = (ushort)(((pMem).flags & ~(0xc1bf | 0x4000)) | 0x0004));
			}
		}
		public static long sqlite3VdbeIntValue(sqlite3_value pMem)
		{
			int flags = 0;
			flags = (int)(pMem.flags);
			if ((flags & (0x0004 | 0x0020)) != 0)
			{
				return (long)(pMem.u.i);
			}
			else if ((flags & 0x0008) != 0)
			{
				return (long)(doubleToInt64((double)(pMem.u.r)));
			}
			else if (((flags & (0x0002 | 0x0010)) != 0) && (pMem.z != null))
			{
				return (long)(memIntValue(pMem));
			}
			else
			{
				return (long)(0);
			}
		}
		public static int sqlite3VdbeMemAggValue(sqlite3_value pAccum, sqlite3_value pOut, FuncDef pFunc)
		{
			sqlite3_context ctx = new sqlite3_context();
			CRuntime.memset(ctx, (int)(0), (ulong)(sizeof(sqlite3_context)));
			sqlite3VdbeMemSetNull(pOut);
			ctx.pOut = pOut;
			ctx.pMem = pAccum;
			ctx.pFunc = pFunc;
			pFunc.xValue(ctx);
			return (int)(ctx.isError);
		}
		public static int sqlite3VdbeMemCast(sqlite3_value pMem, byte aff, byte encoding)
		{
			if ((pMem.flags & 0x0001) != 0)
				return (int)(0);
			switch (aff)
			{
				case 0x41:
					{
						if ((pMem.flags & 0x0010) == (0))
						{
							sqlite3ValueApplyAffinity(pMem, (byte)(0x42), (byte)(encoding));
							if ((pMem.flags & 0x0002) != 0)
								((pMem).flags = (ushort)(((pMem).flags & ~(0xc1bf | 0x4000)) | 0x0010));
						}
						else
						{
							pMem.flags &= (ushort)(~(0xc1bf & ~0x0010));
						}

						break;
					}

				case 0x43:
					{
						sqlite3VdbeMemNumerify(pMem);
						break;
					}

				case 0x44:
					{
						sqlite3VdbeMemIntegerify(pMem);
						break;
					}

				case 0x45:
					{
						sqlite3VdbeMemRealify(pMem);
						break;
					}

				default:
					{
						pMem.flags |= (ushort)((pMem.flags & 0x0010) >> 3);
						sqlite3ValueApplyAffinity(pMem, (byte)(0x42), (byte)(encoding));
						pMem.flags &= (ushort)(~(0x0004 | 0x0008 | 0x0020 | 0x0010 | 0x4000));
						return (int)(sqlite3VdbeChangeEncoding(pMem, (int)(encoding)));
					}
			}

			return (int)(0);
		}
		public static int sqlite3VdbeMemClearAndResize(sqlite3_value pMem, int szNew)
		{
			if ((pMem.szMalloc) < (szNew))
			{
				return (int)(sqlite3VdbeMemGrow(pMem, (int)(szNew), (int)(0)));
			}

			pMem.z = pMem.zMalloc;
			pMem.flags &= (ushort)(0x0001 | 0x0004 | 0x0008 | 0x0020);
			return (int)(0);
		}
		public static int sqlite3VdbeMemCopy(sqlite3_value pTo, sqlite3_value pFrom)
		{
			int rc = (int)(0);
			if ((((pTo).flags & (0x2000 | 0x0400)) != 0))
				vdbeMemClearExternAndSetNull(pTo);
			CRuntime.memcpy(pTo, pFrom, ((ulong)(&((0).zMalloc))));
			pTo.flags &= (ushort)(~0x0400);
			if ((pTo.flags & (0x0002 | 0x0010)) != 0)
			{
				if ((0) == (pFrom.flags & 0x0800))
				{
					pTo.flags |= (ushort)(0x1000);
					rc = (int)(sqlite3VdbeMemMakeWriteable(pTo));
				}
			}

			return (int)(rc);
		}
		public static int sqlite3VdbeMemExpandBlob(sqlite3_value pMem)
		{
			int nByte = 0;
			nByte = (int)(pMem.n + pMem.u.nZero);
			if ((nByte) <= (0))
			{
				if ((pMem.flags & 0x0010) == (0))
					return (int)(0);
				nByte = (int)(1);
			}

			if ((sqlite3VdbeMemGrow(pMem, (int)(nByte), (int)(1))) != 0)
			{
				return (int)(7);
			}

			CRuntime.memset(&pMem.z[pMem.n], (int)(0), (ulong)(pMem.u.nZero));
			pMem.n += (int)(pMem.u.nZero);
			pMem.flags &= (ushort)(~(0x4000 | 0x0200));
			return (int)(0);
		}
		public static int sqlite3VdbeMemFinalize(sqlite3_value pMem, FuncDef pFunc)
		{
			sqlite3_context ctx = new sqlite3_context();
			sqlite3_value t = new sqlite3_value();
			CRuntime.memset(ctx, (int)(0), (ulong)(sizeof(sqlite3_context)));
			CRuntime.memset(t, (int)(0), (ulong)(sizeof(sqlite3_value)));
			t.flags = (ushort)(0x0001);
			t.db = pMem.db;
			ctx.pOut = t;
			ctx.pMem = pMem;
			ctx.pFunc = pFunc;
			pFunc.xFinalize(ctx);
			if ((pMem.szMalloc) > (0))
				sqlite3DbFreeNN(pMem.db, pMem.zMalloc);
			CRuntime.memcpy(pMem, t, (ulong)(sizeof(sqlite3_value)));
			return (int)(ctx.isError);
		}
		public static int sqlite3VdbeMemGrow(sqlite3_value pMem, int n, int bPreserve)
		{
			if ((((pMem.szMalloc) > (0)) && ((bPreserve) != 0)) && ((pMem.z) == (pMem.zMalloc)))
			{
				if ((pMem.db) != null)
				{
					pMem.z = pMem.zMalloc = sqlite3DbReallocOrFree(pMem.db, pMem.z, (ulong)(n));
				}
				else
				{
					pMem.zMalloc = sqlite3Realloc(pMem.z, (ulong)(n));
					if ((pMem.zMalloc) == (null))
						sqlite3_free(pMem.z);
					pMem.z = pMem.zMalloc;
				}

				bPreserve = (int)(0);
			}
			else
			{
				if ((pMem.szMalloc) > (0))
					sqlite3DbFreeNN(pMem.db, pMem.zMalloc);
				pMem.zMalloc = sqlite3DbMallocRaw(pMem.db, (ulong)(n));
			}

			if ((pMem.zMalloc) == (null))
			{
				sqlite3VdbeMemSetNull(pMem);
				pMem.z = null;
				pMem.szMalloc = (int)(0);
				return (int)(7);
			}
			else
			{
				pMem.szMalloc = (int)(sqlite3DbMallocSize(pMem.db, pMem.zMalloc));
			}

			if (((bPreserve) != 0) && ((pMem.z) != null))
			{
				CRuntime.memcpy(pMem.zMalloc, pMem.z, (ulong)(pMem.n));
			}

			if ((pMem.flags & 0x0400) != 0)
			{
				pMem.xDel((void*)(pMem.z));
			}

			pMem.z = pMem.zMalloc;
			pMem.flags &= (ushort)(~(0x0400 | 0x1000 | 0x0800));
			return (int)(0);
		}
		public static int sqlite3VdbeMemHandleBom(sqlite3_value pMem)
		{
			int rc = (int)(0);
			byte bom = (byte)(0);
			if ((pMem.n) > (1))
			{
				byte b1 = (byte)(*(byte*)(pMem.z));
				byte b2 = (byte)(*(((byte*)(pMem.z)) + 1));
				if (((b1) == (0xFE)) && ((b2) == (0xFF)))
				{
					bom = (byte)(3);
				}

				if (((b1) == (0xFF)) && ((b2) == (0xFE)))
				{
					bom = (byte)(2);
				}
			}

			if ((bom) != 0)
			{
				rc = (int)(sqlite3VdbeMemMakeWriteable(pMem));
				if ((rc) == (0))
				{
					pMem.n -= (int)(2);
					CRuntime.memmove(pMem.z, &pMem.z[2], (ulong)(pMem.n));
					pMem.z[pMem.n] = (sbyte)(0);
					pMem.z[pMem.n + 1] = (sbyte)(0);
					pMem.flags |= (ushort)(0x0200);
					pMem.enc = (byte)(bom);
				}
			}

			return (int)(rc);
		}
		public static void sqlite3VdbeMemInit(sqlite3_value pMem, sqlite3 db, ushort flags)
		{
			pMem.flags = (ushort)(flags);
			pMem.db = db;
			pMem.szMalloc = (int)(0);
		}
		public static int sqlite3VdbeMemIntegerify(sqlite3_value pMem)
		{
			pMem.u.i = (long)(sqlite3VdbeIntValue(pMem));
			((pMem).flags = (ushort)(((pMem).flags & ~(0xc1bf | 0x4000)) | 0x0004));
			return (int)(0);
		}
		public static int sqlite3VdbeMemMakeWriteable(sqlite3_value pMem)
		{
			if ((pMem.flags & (0x0002 | 0x0010)) != 0)
			{
				if ((((pMem).flags & 0x4000) ? sqlite3VdbeMemExpandBlob(pMem) : 0) != 0)
					return (int)(7);
				if (((pMem.szMalloc) == (0)) || (pMem.z != pMem.zMalloc))
				{
					int rc = (int)(vdbeMemAddTerminator(pMem));
					if ((rc) != 0)
						return (int)(rc);
				}
			}

			pMem.flags &= (ushort)(~0x1000);
			return (int)(0);
		}
		public static void sqlite3VdbeMemMove(sqlite3_value pTo, sqlite3_value pFrom)
		{
			sqlite3VdbeMemRelease(pTo);
			CRuntime.memcpy(pTo, pFrom, (ulong)(sizeof(sqlite3_value)));
			pFrom.flags = (ushort)(0x0001);
			pFrom.szMalloc = (int)(0);
		}
		public static int sqlite3VdbeMemNulTerminate(sqlite3_value pMem)
		{
			if ((pMem.flags & (0x0200 | 0x0002)) != 0x0002)
			{
				return (int)(0);
			}
			else
			{
				return (int)(vdbeMemAddTerminator(pMem));
			}
		}
		public static int sqlite3VdbeMemNumerify(sqlite3_value pMem)
		{
			if ((pMem.flags & (0x0004 | 0x0008 | 0x0020 | 0x0001)) == (0))
			{
				int rc = 0;
				long ix = 0;
				rc = (int)(sqlite3AtoF(pMem.z, &pMem.u.r, (int)(pMem.n), (byte)(pMem.enc)));
				if (((((rc) == (0)) || ((rc) == (1))) && ((sqlite3Atoi64(pMem.z, &ix, (int)(pMem.n), (byte)(pMem.enc))) <= (1))) || ((sqlite3RealSameAsInt((double)(pMem.u.r), (long)(ix = ((long)(pMem.u.r))))) != 0))
				{
					pMem.u.i = (long)(ix);
					((pMem).flags = (ushort)(((pMem).flags & ~(0xc1bf | 0x4000)) | 0x0004));
				}
				else
				{
					((pMem).flags = (ushort)(((pMem).flags & ~(0xc1bf | 0x4000)) | 0x0008));
				}
			}

			pMem.flags &= (ushort)(~(0x0002 | 0x0010 | 0x4000));
			return (int)(0);
		}
		public static int sqlite3VdbeMemRealify(sqlite3_value pMem)
		{
			pMem.u.r = (double)(sqlite3VdbeRealValue(pMem));
			((pMem).flags = (ushort)(((pMem).flags & ~(0xc1bf | 0x4000)) | 0x0008));
			return (int)(0);
		}
		public static void sqlite3VdbeMemRelease(sqlite3_value p)
		{
			if ((((p).flags & (0x2000 | 0x0400)) != 0) || ((p.szMalloc) != 0))
			{
				vdbeMemClear(p);
			}
		}
		public static void sqlite3VdbeMemSetDouble(sqlite3_value pMem, double val)
		{
			sqlite3VdbeMemSetNull(pMem);
			if (sqlite3IsNaN((double)(val)) == 0)
			{
				pMem.u.r = (double)(val);
				pMem.flags = (ushort)(0x0008);
			}
		}
		public static void sqlite3VdbeMemSetInt64(sqlite3_value pMem, long val)
		{
			if ((((pMem).flags & (0x2000 | 0x0400)) != 0))
			{
				vdbeReleaseAndSetInt64(pMem, (long)(val));
			}
			else
			{
				pMem.u.i = (long)(val);
				pMem.flags = (ushort)(0x0004);
			}
		}
		public static void sqlite3VdbeMemSetNull(sqlite3_value pMem)
		{
			if ((((pMem).flags & (0x2000 | 0x0400)) != 0))
			{
				vdbeMemClearExternAndSetNull(pMem);
			}
			else
			{
				pMem.flags = (ushort)(0x0001);
			}
		}
		public static void sqlite3VdbeMemSetPointer(sqlite3_value pMem, void* pPtr, sbyte* zPType, delegate17 xDestructor)
		{
			vdbeMemClear(pMem);
			pMem.u.zPType = (zPType) != 0 ? zPType : "";
			pMem.z = pPtr;
			pMem.flags = (ushort)(0x0001 | 0x0400 | 0x8000 | 0x0200);
			pMem.eSubtype = (byte)(112);
			pMem.xDel = xDestructor ? xDestructor : sqlite3NoopDestructor;
		}
		public static int sqlite3VdbeMemSetRowSet(sqlite3_value pMem)
		{
			sqlite3 db = pMem.db;
			RowSet p;
			sqlite3VdbeMemRelease(pMem);
			p = sqlite3RowSetInit(db);
			if ((p) == (null))
				return (int)(7);
			pMem.z = (sbyte*)(p);
			pMem.flags = (ushort)(0x0010 | 0x0400);
			pMem.xDel = sqlite3RowSetDelete;
			return (int)(0);
		}
		public static int sqlite3VdbeMemSetStr(sqlite3_value pMem, sbyte* z, long n, byte enc, delegate17 xDel)
		{
			long nByte = (long)(n);
			int iLimit = 0;
			ushort flags = (ushort)(0);
			if (z == null)
			{
				sqlite3VdbeMemSetNull(pMem);
				return (int)(0);
			}

			if ((pMem.db) != null)
			{
				iLimit = (int)(pMem.db.aLimit[0]);
			}
			else
			{
				iLimit = (int)(1000000000);
			}

			flags = (ushort)((enc) == (0) ? 0x0010 : 0x0002);
			if ((nByte) < (0))
			{
				if ((enc) == (1))
				{
					nByte = (long)(CRuntime.strlen(z));
				}
				else
				{
					for (nByte = (long)(0); ((nByte) <= (iLimit)) && ((z[nByte] | z[nByte + 1]) != 0); nByte += (long)(2))
					{
					}
				}

				flags |= (ushort)(0x0200);
			}

			if ((xDel) == ((Void(Void * ))(-1)))
			{
				long nAlloc = (long)(nByte);
				if ((flags & 0x0200) != 0)
				{
					nAlloc += (long)((enc) == (1) ? 1 : 2);
				}

				if ((nByte) > (iLimit))
				{
					return (int)(sqlite3ErrorToParser(pMem.db, (int)(18)));
				}

				if ((sqlite3VdbeMemClearAndResize(pMem, (int)((nAlloc) > (32) ? (nAlloc) : (32)))) != 0)
				{
					return (int)(7);
				}

				CRuntime.memcpy(pMem.z, z, (ulong)(nAlloc));
			}
			else
			{
				sqlite3VdbeMemRelease(pMem);
				pMem.z = z;
				if ((xDel) == ((Void(Void * ))(sqlite3OomFault)))
				{
					pMem.zMalloc = pMem.z;
					pMem.szMalloc = (int)(sqlite3DbMallocSize(pMem.db, pMem.zMalloc));
				}
				else
				{
					pMem.xDel = xDel;
					flags |= (ushort)(((xDel) == null) ? 0x0800 : 0x0400);
				}
			}

			pMem.n = ((int)(nByte & 0x7fffffff));
			pMem.flags = (ushort)(flags);
			if ((enc) != 0)
			{
				pMem.enc = (byte)(enc);
			}
			else
			{
				pMem.enc = (byte)((pMem.db).enc);
			}

			if (((enc) > (1)) && ((sqlite3VdbeMemHandleBom(pMem)) != 0))
			{
				return (int)(7);
			}

			if ((nByte) > (iLimit))
			{
				return (int)(sqlite3ErrorToParser(pMem.db, (int)(18)));
			}

			return (int)(0);
		}
		public static void sqlite3VdbeMemSetZeroBlob(sqlite3_value pMem, int n)
		{
			sqlite3VdbeMemRelease(pMem);
			pMem.flags = (ushort)(0x0010 | 0x4000);
			pMem.n = (int)(0);
			if ((n) < (0))
				n = (int)(0);
			pMem.u.nZero = (int)(n);
			pMem.enc = (byte)(1);
			pMem.z = null;
		}
		public static void sqlite3VdbeMemShallowCopy(sqlite3_value pTo, sqlite3_value pFrom, int srcType)
		{
			if ((((pTo).flags & (0x2000 | 0x0400)) != 0))
			{
				vdbeClrCopy(pTo, pFrom, (int)(srcType));
				return;
			}

			CRuntime.memcpy(pTo, pFrom, ((ulong)(&((0).zMalloc))));
			if ((pFrom.flags & 0x0800) == (0))
			{
				pTo.flags &= (ushort)(~(0x0400 | 0x0800 | 0x1000));
				pTo.flags |= (ushort)(srcType);
			}
		}
		public static int sqlite3VdbeMemStringify(sqlite3_value pMem, byte enc, byte bForce)
		{
			int nByte = (int)(32);
			if ((sqlite3VdbeMemClearAndResize(pMem, (int)(nByte))) != 0)
			{
				pMem.enc = (byte)(0);
				return (int)(7);
			}

			vdbeMemRenderNum((int)(nByte), pMem.z, pMem);
			pMem.n = (int)(CRuntime.strlen(pMem.z) & 0x3fffffff);
			pMem.enc = (byte)(1);
			pMem.flags |= (ushort)(0x0002 | 0x0200);
			if ((bForce) != 0)
				pMem.flags &= (ushort)(~(0x0004 | 0x0008 | 0x0020));
			sqlite3VdbeChangeEncoding(pMem, (int)(enc));
			return (int)(0);
		}
		public static int sqlite3VdbeMemTooBig(sqlite3_value p)
		{
			if ((p.flags & (0x0002 | 0x0010)) != 0)
			{
				int n = (int)(p.n);
				if ((p.flags & 0x4000) != 0)
				{
					n += (int)(p.u.nZero);
				}

				return ((n) > (p.db.aLimit[0]) ? 1 : 0);
			}

			return (int)(0);
		}
		public static int sqlite3VdbeMemTranslate(sqlite3_value pMem, byte desiredEnc)
		{
			long len = 0;
			byte* zOut;
			byte* zIn;
			byte* zTerm;
			byte* z;
			uint c = 0;
			if ((pMem.enc != 1) && (desiredEnc != 1))
			{
				byte temp = 0;
				int rc = 0;
				rc = (int)(sqlite3VdbeMemMakeWriteable(pMem));
				if (rc != 0)
				{
					return (int)(7);
				}

				zIn = (byte*)(pMem.z);
				zTerm = &zIn[pMem.n & ~1];
				while ((zIn) < (zTerm))
				{
					temp = (byte)(*zIn);
					*zIn = (byte)(*(zIn + 1));
					zIn++;
					*zIn++ = (byte)(temp);
				}

				pMem.enc = (byte)(desiredEnc);
				goto translate_out;
			}

			if ((desiredEnc) == (1))
			{
				pMem.n &= (int)(~1);
				len = (long)(2 * (long)(pMem.n) + 1);
			}
			else
			{
				len = (long)(2 * (long)(pMem.n) + 2);
			}

			zIn = (byte*)(pMem.z);
			zTerm = &zIn[pMem.n];
			zOut = sqlite3DbMallocRaw(pMem.db, (ulong)(len));
			if (zOut == null)
			{
				return (int)(7);
			}

			z = zOut;
			if ((pMem.enc) == (1))
			{
				if ((desiredEnc) == (2))
				{
					while ((zIn) < (zTerm))
					{
						c = (uint)(*(zIn++));
						if ((c) >= (0xc0))
						{
							c = (uint)(sqlite3Utf8Trans1[c - 0xc0]);
							while ((zIn != zTerm) && ((*zIn & 0xc0) == (0x80)))
							{
								c = (uint)((c << 6) + (0x3f & *(zIn++)));
							}

							if ((((c) < (0x80)) || ((c & 0xFFFFF800) == (0xD800))) || ((c & 0xFFFFFFFE) == (0xFFFE)))
							{
								c = (uint)(0xFFFD);
							}
						}

						{
							if ((c) <= (0xFFFF))
							{
								*z++ = ((byte)(c & 0x00FF));
								*z++ = ((byte)((c >> 8) & 0x00FF));
							}
							else
							{
								*z++ = ((byte)(((c >> 10) & 0x003F) + (((c - 0x10000) >> 10) & 0x00C0)));
								*z++ = ((byte)(0x00D8 + (((c - 0x10000) >> 18) & 0x03)));
								*z++ = ((byte)(c & 0x00FF));
								*z++ = ((byte)(0x00DC + ((c >> 8) & 0x03)));
							}
						}
					}
				}
				else
				{
					while ((zIn) < (zTerm))
					{
						c = (uint)(*(zIn++));
						if ((c) >= (0xc0))
						{
							c = (uint)(sqlite3Utf8Trans1[c - 0xc0]);
							while ((zIn != zTerm) && ((*zIn & 0xc0) == (0x80)))
							{
								c = (uint)((c << 6) + (0x3f & *(zIn++)));
							}

							if ((((c) < (0x80)) || ((c & 0xFFFFF800) == (0xD800))) || ((c & 0xFFFFFFFE) == (0xFFFE)))
							{
								c = (uint)(0xFFFD);
							}
						}

						{
							if ((c) <= (0xFFFF))
							{
								*z++ = ((byte)((c >> 8) & 0x00FF));
								*z++ = ((byte)(c & 0x00FF));
							}
							else
							{
								*z++ = ((byte)(0x00D8 + (((c - 0x10000) >> 18) & 0x03)));
								*z++ = ((byte)(((c >> 10) & 0x003F) + (((c - 0x10000) >> 10) & 0x00C0)));
								*z++ = ((byte)(0x00DC + ((c >> 8) & 0x03)));
								*z++ = ((byte)(c & 0x00FF));
							}
						}
					}
				}

				pMem.n = ((int)(z - zOut));
				*z++ = (byte)(0);
			}
			else
			{
				if ((pMem.enc) == (2))
				{
					while ((zIn) < (zTerm))
					{
						c = (uint)(*(zIn++));
						c += (uint)((*(zIn++)) << 8);
						if (((c) >= (0xd800)) && ((c) < (0xe000)))
						{
							if ((zIn) < (zTerm))
							{
								int c2 = (int)(*zIn++);
								c2 += (int)((*zIn++) << 8);
								c = (uint)((c2 & 0x03FF) + ((c & 0x003F) << 10) + (((c & 0x03C0) + 0x0040) << 10));
							}
						}

						{
							if ((c) < (0x00080))
							{
								*z++ = ((byte)(c & 0xFF));
							}
							else if ((c) < (0x00800))
							{
								*z++ = (byte)(0xC0 + (byte)((c >> 6) & 0x1F));
								*z++ = (byte)(0x80 + (byte)(c & 0x3F));
							}
							else if ((c) < (0x10000))
							{
								*z++ = (byte)(0xE0 + (byte)((c >> 12) & 0x0F));
								*z++ = (byte)(0x80 + (byte)((c >> 6) & 0x3F));
								*z++ = (byte)(0x80 + (byte)(c & 0x3F));
							}
							else
							{
								*z++ = (byte)(0xF0 + (byte)((c >> 18) & 0x07));
								*z++ = (byte)(0x80 + (byte)((c >> 12) & 0x3F));
								*z++ = (byte)(0x80 + (byte)((c >> 6) & 0x3F));
								*z++ = (byte)(0x80 + (byte)(c & 0x3F));
							}
						}
					}
				}
				else
				{
					while ((zIn) < (zTerm))
					{
						c = (uint)((*(zIn++)) << 8);
						c += (uint)(*(zIn++));
						if (((c) >= (0xd800)) && ((c) < (0xe000)))
						{
							if ((zIn) < (zTerm))
							{
								int c2 = (int)((*zIn++) << 8);
								c2 += (int)(*zIn++);
								c = (uint)((c2 & 0x03FF) + ((c & 0x003F) << 10) + (((c & 0x03C0) + 0x0040) << 10));
							}
						}

						{
							if ((c) < (0x00080))
							{
								*z++ = ((byte)(c & 0xFF));
							}
							else if ((c) < (0x00800))
							{
								*z++ = (byte)(0xC0 + (byte)((c >> 6) & 0x1F));
								*z++ = (byte)(0x80 + (byte)(c & 0x3F));
							}
							else if ((c) < (0x10000))
							{
								*z++ = (byte)(0xE0 + (byte)((c >> 12) & 0x0F));
								*z++ = (byte)(0x80 + (byte)((c >> 6) & 0x3F));
								*z++ = (byte)(0x80 + (byte)(c & 0x3F));
							}
							else
							{
								*z++ = (byte)(0xF0 + (byte)((c >> 18) & 0x07));
								*z++ = (byte)(0x80 + (byte)((c >> 12) & 0x3F));
								*z++ = (byte)(0x80 + (byte)((c >> 6) & 0x3F));
								*z++ = (byte)(0x80 + (byte)(c & 0x3F));
							}
						}
					}
				}

				pMem.n = ((int)(z - zOut));
			}

			*z = (byte)(0);
			c = (uint)(0x0002 | 0x0200 | (pMem.flags & (0x003f | 0x8000)));
			sqlite3VdbeMemRelease(pMem);
			pMem.flags = (ushort)(c);
			pMem.enc = (byte)(desiredEnc);
			pMem.z = (sbyte*)(zOut);
			pMem.zMalloc = pMem.z;
			pMem.szMalloc = (int)(sqlite3DbMallocSize(pMem.db, pMem.z));
		translate_out:
			; return (int)(0);
		}
		public static double sqlite3VdbeRealValue(sqlite3_value pMem)
		{
			if ((pMem.flags & 0x0008) != 0)
			{
				return (double)(pMem.u.r);
			}
			else if ((pMem.flags & (0x0004 | 0x0020)) != 0)
			{
				return (double)(pMem.u.i);
			}
			else if ((pMem.flags & (0x0002 | 0x0010)) != 0)
			{
				return (double)(memRealValue(pMem));
			}
			else
			{
				return (double)(0);
			}
		}
		public static int valueBytes(sqlite3_value pVal, byte enc)
		{
			return (int)(valueToText(pVal, (byte)(enc)) != null ? pVal.n : 0);
		}
		public static int valueFromValueList(sqlite3_value pVal, sqlite3_value ppOut, int bNext)
		{
			int rc = 0;
			ValueList pRhs;
			ppOut = null;
			if ((pVal) == (null))
				return (int)(21);
			pRhs = (ValueList)(sqlite3_value_pointer(pVal, "ValueList"));
			if ((pRhs) == (null))
				return (int)(21);
			if ((bNext) != 0)
			{
				rc = (int)(sqlite3BtreeNext(pRhs.pCsr, (int)(0)));
			}
			else
			{
				int dummy = (int)(0);
				rc = (int)(sqlite3BtreeFirst(pRhs.pCsr, &dummy));
				if ((sqlite3BtreeEof(pRhs.pCsr)) != 0)
					rc = (int)(101);
			}

			if ((rc) == (0))
			{
				uint sz = 0;
				sqlite3_value sMem = new sqlite3_value();
				CRuntime.memset(sMem, (int)(0), (ulong)(sizeof(sqlite3_value)));
				sz = (uint)(sqlite3BtreePayloadSize(pRhs.pCsr));
				rc = (int)(sqlite3VdbeMemFromBtreeZeroOffset(pRhs.pCsr, (uint)((int)(sz)), sMem));
				if ((rc) == (0))
				{
					byte* zBuf = (byte*)(sMem.z);
					uint iSerial = 0;
					sqlite3_value pOut = pRhs.pOut;
					int iOff = (int)(1 + (byte)(((*(&zBuf[1])) < ((byte)(0x80))) ? ((iSerial) = ((uint)(*(&zBuf[1])))), 1 : 
            sqlite3GetVarint32((&zBuf[1]), &(iSerial)) ) )
            ;
					sqlite3VdbeSerialGet(&zBuf[iOff], (uint)(iSerial), pOut);
					pOut.enc = (byte)((pOut.db).enc);
					if (((pOut.flags & 0x1000) != 0) && ((sqlite3VdbeMemMakeWriteable(pOut)) != 0))
					{
						rc = (int)(7);
					}
					else
					{
						ppOut = pOut;
					}
				}

				sqlite3VdbeMemRelease(sMem);
			}

			return (int)(rc);
		}
		public static void vdbeClrCopy(sqlite3_value pTo, sqlite3_value pFrom, int eType)
		{
			vdbeMemClearExternAndSetNull(pTo);
			sqlite3VdbeMemShallowCopy(pTo, pFrom, (int)(eType));
		}
		public static int vdbeCompareMemString(sqlite3_value pMem1, sqlite3_value pMem2, CollSeq pColl, byte* prcErr)
		{
			if ((pMem1.enc) == (pColl.enc))
			{
				return (int)(pColl.xCmp(pColl.pUser, (int)(pMem1.n), pMem1.z, (int)(pMem2.n), pMem2.z));
			}
			else
			{
				int rc = 0;
				void* v1;
				void* v2;
				sqlite3_value c1 = new sqlite3_value();
				sqlite3_value c2 = new sqlite3_value();
				sqlite3VdbeMemInit(c1, pMem1.db, (ushort)(0x0001));
				sqlite3VdbeMemInit(c2, pMem1.db, (ushort)(0x0001));
				sqlite3VdbeMemShallowCopy(c1, pMem1, (int)(0x1000));
				sqlite3VdbeMemShallowCopy(c2, pMem2, (int)(0x1000));
				v1 = sqlite3ValueText(c1, (byte)(pColl.enc));
				v2 = sqlite3ValueText(c2, (byte)(pColl.enc));
				if ((((v1) == (null)) || ((v2) == (null))))
				{
					if ((prcErr) != null)
						*prcErr = (byte)(7);
					rc = (int)(0);
				}
				else
				{
					rc = (int)(pColl.xCmp(pColl.pUser, (int)(c1.n), v1, (int)(c2.n), v2));
				}

				sqlite3VdbeMemRelease(c1);
				sqlite3VdbeMemRelease(c2);
				return (int)(rc);
			}
		}
		public static int vdbeMemAddTerminator(sqlite3_value pMem)
		{
			if ((sqlite3VdbeMemGrow(pMem, (int)(pMem.n + 3), (int)(1))) != 0)
			{
				return (int)(7);
			}

			pMem.z[pMem.n] = (sbyte)(0);
			pMem.z[pMem.n + 1] = (sbyte)(0);
			pMem.z[pMem.n + 2] = (sbyte)(0);
			pMem.flags |= (ushort)(0x0200);
			return (int)(0);
		}
		public static void vdbeMemClear(sqlite3_value p)
		{
			if ((((p).flags & (0x2000 | 0x0400)) != 0))
			{
				vdbeMemClearExternAndSetNull(p);
			}

			if ((p.szMalloc) != 0)
			{
				sqlite3DbFreeNN(p.db, p.zMalloc);
				p.szMalloc = (int)(0);
			}

			p.z = null;
		}
		public static void vdbeMemClearExternAndSetNull(sqlite3_value p)
		{
			if ((p.flags & 0x2000) != 0)
			{
				sqlite3VdbeMemFinalize(p, p.u.pDef);
			}

			if ((p.flags & 0x0400) != 0)
			{
				p.xDel((void*)(p.z));
			}

			p.flags = (ushort)(0x0001);
		}
		public static void vdbeReleaseAndSetInt64(sqlite3_value pMem, long val)
		{
			sqlite3VdbeMemSetNull(pMem);
			pMem.u.i = (long)(val);
			pMem.flags = (ushort)(0x0004);
		}
	}
}