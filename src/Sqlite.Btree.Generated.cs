// Generated by Hebron at 4/3/2022 2:10:11 AM

using System;
using System.Runtime.InteropServices;
using Hebron.Runtime;

namespace SqliteSharp
{
	unsafe partial class Sqlite
	{
		public static int autoVacuumCommit(Btree p)
		{
			int rc = (int)(0);
			Pager pPager;
			BtShared pBt;
			sqlite3 db;
			pBt = p.pBt;
			pPager = pBt.pPager;
			invalidateAllOverflowCache(pBt);
			if (pBt.incrVacuum == 0)
			{
				uint nFin = 0;
				uint nFree = 0;
				uint nVac = 0;
				uint iFree = 0;
				uint nOrig = 0;
				nOrig = (uint)(btreePagecount(pBt));
				if (((ptrmapPageno((pBt), (uint)(nOrig))) == (nOrig)) || ((nOrig) == ((sqlite3PendingByte / ((pBt).pageSize)) + 1)))
				{
					return (int)(sqlite3CorruptError((int)(70159)));
				}

				nFree = (uint)(sqlite3Get4byte(&pBt.pPage1.aData[36]));
				db = p.db;
				if ((db.xAutovacPages) != null)
				{
					int iDb = 0;
					for (iDb = (int)(0); ((iDb) < (db.nDb)); iDb++)
					{
						if ((db.aDb[iDb].pBt) == (p))
							break;
					}

					nVac = (uint)(db.xAutovacPages(db.pAutovacPagesArg, db.aDb[iDb].zDbSName, (uint)(nOrig), (uint)(nFree), (uint)(pBt.pageSize)));
					if ((nVac) > (nFree))
					{
						nVac = (uint)(nFree);
					}

					if ((nVac) == (0))
					{
						return (int)(0);
					}
				}
				else
				{
					nVac = (uint)(nFree);
				}

				nFin = (uint)(finalDbSize(pBt, (uint)(nOrig), (uint)(nVac)));
				if ((nFin) > (nOrig))
					return (int)(sqlite3CorruptError((int)(70186)));
				if ((nFin) < (nOrig))
				{
					rc = (int)(saveAllCursors(pBt, (uint)(0), null));
				}

				for (iFree = (uint)(nOrig); ((iFree) > (nFin)) && ((rc) == (0)); iFree--)
				{
					rc = (int)(incrVacuumStep(pBt, (uint)(nFin), (uint)(iFree), ((nVac) == (nFree) ? 1 : 0)));
				}

				if ((((rc) == (101)) || ((rc) == (0))) && ((nFree) > (0)))
				{
					rc = (int)(sqlite3PagerWrite(pBt.pPage1.pDbPage));
					if ((nVac) == (nFree))
					{
						sqlite3Put4byte(&pBt.pPage1.aData[32], (uint)(0));
						sqlite3Put4byte(&pBt.pPage1.aData[36], (uint)(0));
					}

					sqlite3Put4byte(&pBt.pPage1.aData[28], (uint)(nFin));
					pBt.bDoTruncate = (byte)(1);
					pBt.nPage = (uint)(nFin);
				}

				if (rc != 0)
				{
					sqlite3PagerRollback(pPager);
				}
			}

			return (int)(rc);
		}
		public static int btreeCreateTable(Btree p, uint* piTable, int createTabFlags)
		{
			BtShared pBt = p.pBt;
			MemPage pRoot;
			uint pgnoRoot = 0;
			int rc = 0;
			int ptfFlags = 0;
			if ((pBt.autoVacuum) != 0)
			{
				uint pgnoMove = 0;
				MemPage pPageMove;
				invalidateAllOverflowCache(pBt);
				sqlite3BtreeGetMeta(p, (int)(4), &pgnoRoot);
				if ((pgnoRoot) > (btreePagecount(pBt)))
				{
					return (int)(sqlite3CorruptError((int)(75647)));
				}

				pgnoRoot++;
				while (((pgnoRoot) == (ptrmapPageno(pBt, (uint)(pgnoRoot)))) || ((pgnoRoot) == ((sqlite3PendingByte / ((pBt).pageSize)) + 1)))
				{
					pgnoRoot++;
				}

				rc = (int)(allocateBtreePage(pBt, pPageMove, &pgnoMove, (uint)(pgnoRoot), (byte)(1)));
				if (rc != 0)
				{
					return (int)(rc);
				}

				if (pgnoMove != pgnoRoot)
				{
					byte eType = (byte)(0);
					uint iPtrPage = (uint)(0);
					rc = (int)(saveAllCursors(pBt, (uint)(0), null));
					releasePage(pPageMove);
					if (rc != 0)
					{
						return (int)(rc);
					}

					rc = (int)(btreeGetPage(pBt, (uint)(pgnoRoot), pRoot, (int)(0)));
					if (rc != 0)
					{
						return (int)(rc);
					}

					rc = (int)(ptrmapGet(pBt, (uint)(pgnoRoot), &eType, &iPtrPage));
					if (((eType) == (1)) || ((eType) == (2)))
					{
						rc = (int)(sqlite3CorruptError((int)(75695)));
					}

					if (rc != 0)
					{
						releasePage(pRoot);
						return (int)(rc);
					}

					rc = (int)(relocatePage(pBt, pRoot, (byte)(eType), (uint)(iPtrPage), (uint)(pgnoMove), (int)(0)));
					releasePage(pRoot);
					if (rc != 0)
					{
						return (int)(rc);
					}

					rc = (int)(btreeGetPage(pBt, (uint)(pgnoRoot), pRoot, (int)(0)));
					if (rc != 0)
					{
						return (int)(rc);
					}

					rc = (int)(sqlite3PagerWrite(pRoot.pDbPage));
					if (rc != 0)
					{
						releasePage(pRoot);
						return (int)(rc);
					}
				}
				else
				{
					pRoot = pPageMove;
				}

				ptrmapPut(pBt, (uint)(pgnoRoot), (byte)(1), (uint)(0), &rc);
				if ((rc) != 0)
				{
					releasePage(pRoot);
					return (int)(rc);
				}

				rc = (int)(sqlite3BtreeUpdateMeta(p, (int)(4), (uint)(pgnoRoot)));
				if ((rc) != 0)
				{
					releasePage(pRoot);
					return (int)(rc);
				}
			}
			else
			{
				rc = (int)(allocateBtreePage(pBt, pRoot, &pgnoRoot, (uint)(1), (byte)(0)));
				if ((rc) != 0)
					return (int)(rc);
			}

			if ((createTabFlags & 1) != 0)
			{
				ptfFlags = (int)(0x01 | 0x04 | 0x08);
			}
			else
			{
				ptfFlags = (int)(0x02 | 0x08);
			}

			zeroPage(pRoot, (int)(ptfFlags));
			sqlite3PagerUnref(pRoot.pDbPage);
			*piTable = (uint)(pgnoRoot);
			return (int)(0);
		}
		public static int btreeCursor(Btree p, uint iTable, int wrFlag, KeyInfo pKeyInfo, BtCursor pCur)
		{
			BtShared pBt = p.pBt;
			BtCursor pX;
			if ((iTable) <= (1))
			{
				if ((iTable) < (1))
				{
					return (int)(sqlite3CorruptError((int)(70650)));
				}
				else if ((btreePagecount(pBt)) == (0))
				{
					iTable = (uint)(0);
				}
			}

			pCur.pgnoRoot = (uint)(iTable);
			pCur.iPage = (sbyte)(-1);
			pCur.pKeyInfo = pKeyInfo;
			pCur.pBtree = p;
			pCur.pBt = pBt;
			pCur.curFlags = (byte)(0);
			for (pX = pBt.pCursor; pX; pX = pX.pNext)
			{
				if ((pX.pgnoRoot) == (iTable))
				{
					pX.curFlags |= (byte)(0x20);
					pCur.curFlags = (byte)(0x20);
				}
			}

			pCur.eState = (byte)(1);
			pCur.pNext = pBt.pCursor;
			pBt.pCursor = pCur;
			if ((wrFlag) != 0)
			{
				pCur.curFlags |= (byte)(0x01);
				pCur.curPagerFlags = (byte)(0);
				if ((pBt.pTmpSpace) == (null))
					return (int)(allocateTempSpace(pBt));
			}
			else
			{
				pCur.curPagerFlags = (byte)(0x02);
			}

			return (int)(0);
		}
		public static int btreeCursorWithLock(Btree p, uint iTable, int wrFlag, KeyInfo pKeyInfo, BtCursor pCur)
		{
			int rc = 0;
			sqlite3BtreeEnter(p);
			rc = (int)(btreeCursor(p, (uint)(iTable), (int)(wrFlag), pKeyInfo, pCur));
			sqlite3BtreeLeave(p);
			return (int)(rc);
		}
		public static int btreeDropTable(Btree p, uint iTable, int* piMoved)
		{
			int rc = 0;
			MemPage pPage = null;
			BtShared pBt = p.pBt;
			if ((iTable) > (btreePagecount(pBt)))
			{
				return (int)(sqlite3CorruptError((int)(75896)));
			}

			rc = (int)(sqlite3BtreeClearTable(p, (int)(iTable), null));
			if ((rc) != 0)
				return (int)(rc);
			rc = (int)(btreeGetPage(pBt, (uint)(iTable), pPage, (int)(0)));
			if ((rc) != 0)
			{
				releasePage(pPage);
				return (int)(rc);
			}

			*piMoved = (int)(0);
			if ((pBt.autoVacuum) != 0)
			{
				uint maxRootPgno = 0;
				sqlite3BtreeGetMeta(p, (int)(4), &maxRootPgno);
				if ((iTable) == (maxRootPgno))
				{
					freePage(pPage, &rc);
					releasePage(pPage);
					if (rc != 0)
					{
						return (int)(rc);
					}
				}
				else
				{
					MemPage pMove;
					releasePage(pPage);
					rc = (int)(btreeGetPage(pBt, (uint)(maxRootPgno), pMove, (int)(0)));
					if (rc != 0)
					{
						return (int)(rc);
					}

					rc = (int)(relocatePage(pBt, pMove, (byte)(1), (uint)(0), (uint)(iTable), (int)(0)));
					releasePage(pMove);
					if (rc != 0)
					{
						return (int)(rc);
					}

					pMove = null;
					rc = (int)(btreeGetPage(pBt, (uint)(maxRootPgno), pMove, (int)(0)));
					freePage(pMove, &rc);
					releasePage(pMove);
					if (rc != 0)
					{
						return (int)(rc);
					}

					*piMoved = (int)(maxRootPgno);
				}

				maxRootPgno--;
				while (((maxRootPgno) == ((sqlite3PendingByte / ((pBt).pageSize)) + 1)) || ((ptrmapPageno((pBt), (uint)(maxRootPgno))) == (maxRootPgno)))
				{
					maxRootPgno--;
				}

				rc = (int)(sqlite3BtreeUpdateMeta(p, (int)(4), (uint)(maxRootPgno)));
			}
			else
			{
				freePage(pPage, &rc);
				releasePage(pPage);
			}

			return (int)(rc);
		}
		public static void btreeEndTransaction(Btree p)
		{
			BtShared pBt = p.pBt;
			sqlite3 db = p.db;
			pBt.bDoTruncate = (byte)(0);
			if (((p.inTrans) > (0)) && ((db.nVdbeRead) > (1)))
			{
				downgradeAllSharedCacheTableLocks(p);
				p.inTrans = (byte)(1);
			}
			else
			{
				if (p.inTrans != 0)
				{
					clearAllSharedCacheTableLocks(p);
					pBt.nTransaction--;
					if ((0) == (pBt.nTransaction))
					{
						pBt.inTransaction = (byte)(0);
					}
				}

				p.inTrans = (byte)(0);
				unlockBtreeIfUnused(pBt);
			}
		}
		public static void btreeLockCarefully(Btree p)
		{
			Btree pLater;
			if ((sqlite3_mutex_try(p.pBt.mutex)) == (0))
			{
				p.pBt.db = p.db;
				p.locked = (byte)(1);
				return;
			}

			for (pLater = p.pNext; pLater; pLater = pLater.pNext)
			{
				if ((pLater.locked) != 0)
				{
					unlockBtreeMutex(pLater);
				}
			}

			lockBtreeMutex(p);
			for (pLater = p.pNext; pLater; pLater = pLater.pNext)
			{
				if ((pLater.wantToLock) != 0)
				{
					lockBtreeMutex(pLater);
				}
			}
		}
		public static void clearAllSharedCacheTableLocks(Btree p)
		{
			BtShared pBt = p.pBt;
			BtLock ppIter = pBt.pLock;
			while ((ppIter) != null)
			{
				BtLock pLock = ppIter;
				if ((pLock.pBtree) == (p))
				{
					ppIter = pLock.pNext;
					if (pLock.iTable != 1)
					{
						sqlite3_free(pLock);
					}
				}
				else
				{
					ppIter = pLock.pNext;
				}
			}

			if ((pBt.pWriter) == (p))
			{
				pBt.pWriter = null;
				pBt.btsFlags &= (ushort)(~(0x0040 | 0x0080));
			}
			else if ((pBt.nTransaction) == (2))
			{
				pBt.btsFlags &= (ushort)(~0x0080);
			}
		}
		public static void downgradeAllSharedCacheTableLocks(Btree p)
		{
			BtShared pBt = p.pBt;
			if ((pBt.pWriter) == (p))
			{
				BtLock pLock;
				pBt.pWriter = null;
				pBt.btsFlags &= (ushort)(~(0x0040 | 0x0080));
				for (pLock = pBt.pLock; pLock; pLock = pLock.pNext)
				{
					pLock.eLock = (byte)(1);
				}
			}
		}
		public static void invalidateIncrblobCursors(Btree pBtree, uint pgnoRoot, long iRow, int isClearTable)
		{
			BtCursor p;
			pBtree.hasIncrblobCur = (byte)(0);
			for (p = pBtree.pBt.pCursor; p; p = p.pNext)
			{
				if ((p.curFlags & 0x10) != 0)
				{
					pBtree.hasIncrblobCur = (byte)(1);
					if (((p.pgnoRoot) == (pgnoRoot)) && (((isClearTable) != 0) || ((p.info.nKey) == (iRow))))
					{
						p.eState = (byte)(1);
					}
				}
			}
		}
		public static void lockBtreeMutex(Btree p)
		{
			sqlite3_mutex_enter(p.pBt.mutex);
			p.pBt.db = p.db;
			p.locked = (byte)(1);
		}
		public static int querySharedCacheTableLock(Btree p, uint iTab, byte eLock)
		{
			BtShared pBt = p.pBt;
			BtLock pIter;
			if (p.sharable == 0)
			{
				return (int)(0);
			}

			if ((pBt.pWriter != p) && ((pBt.btsFlags & 0x0040) != 0))
			{
				return (int)(6 | (1 << 8));
			}

			for (pIter = pBt.pLock; pIter; pIter = pIter.pNext)
			{
				if (((pIter.pBtree != p) && ((pIter.iTable) == (iTab))) && (pIter.eLock != eLock))
				{
					if ((eLock) == (2))
					{
						pBt.btsFlags |= (ushort)(0x0080);
					}

					return (int)(6 | (1 << 8));
				}
			}

			return (int)(0);
		}
		public static int setSharedCacheTableLock(Btree p, uint iTable, byte eLock)
		{
			BtShared pBt = p.pBt;
			BtLock pLock = null;
			BtLock pIter;
			for (pIter = pBt.pLock; pIter; pIter = pIter.pNext)
			{
				if (((pIter.iTable) == (iTable)) && ((pIter.pBtree) == (p)))
				{
					pLock = pIter;
					break;
				}
			}

			if (pLock == null)
			{
				pLock = (BtLock)(sqlite3MallocZero((ulong)(sizeof(BtLock))));
				if (pLock == null)
				{
					return (int)(7);
				}

				pLock.iTable = (uint)(iTable);
				pLock.pBtree = p;
				pLock.pNext = pBt.pLock;
				pBt.pLock = pLock;
			}

			if ((eLock) > (pLock.eLock))
			{
				pLock.eLock = (byte)(eLock);
			}

			return (int)(0);
		}
		public static int sqlite3BtreeBeginStmt(Btree p, int iStatement)
		{
			int rc = 0;
			BtShared pBt = p.pBt;
			sqlite3BtreeEnter(p);
			rc = (int)(sqlite3PagerOpenSavepoint(pBt.pPager, (int)(iStatement)));
			sqlite3BtreeLeave(p);
			return (int)(rc);
		}
		public static int sqlite3BtreeBeginTrans(Btree p, int wrflag, int* pSchemaVersion)
		{
			BtShared pBt = p.pBt;
			Pager pPager = pBt.pPager;
			int rc = (int)(0);
			sqlite3BtreeEnter(p);
			if (((p.inTrans) == (2)) || (((p.inTrans) == (1)) && (wrflag == 0)))
			{
				goto trans_begun;
			}

			if (((p.db.flags & 0x02000000) != 0) && ((sqlite3PagerIsreadonly(pPager)) == (0)))
			{
				pBt.btsFlags &= (ushort)(~0x0001);
			}

			if (((pBt.btsFlags & 0x0001) != 0) && ((wrflag) != 0))
			{
				rc = (int)(8);
				goto trans_begun;
			}

			{
				sqlite3 pBlock = null;
				if ((((wrflag) != 0) && ((pBt.inTransaction) == (2))) || ((pBt.btsFlags & 0x0080) != 0))
				{
					pBlock = pBt.pWriter.db;
				}
				else if ((wrflag) > (1))
				{
					BtLock pIter;
					for (pIter = pBt.pLock; pIter; pIter = pIter.pNext)
					{
						if (pIter.pBtree != p)
						{
							pBlock = pIter.pBtree.db;
							break;
						}
					}
				}

				if ((pBlock) != null)
				{
					rc = (int)(6 | (1 << 8));
					goto trans_begun;
				}
			}

			rc = (int)(querySharedCacheTableLock(p, (uint)(1), (byte)(1)));
			if (0 != rc)
				goto trans_begun;
			pBt.btsFlags &= (ushort)(~0x0010);
			if ((pBt.nPage) == (0))
				pBt.btsFlags |= (ushort)(0x0010);
			do
			{
				while (((pBt.pPage1) == (null)) && ((0) == (rc = (int)(lockBtree(pBt)))))
				{
				}

				if (((rc) == (0)) && ((wrflag) != 0))
				{
					if ((pBt.btsFlags & 0x0001) != 0)
					{
						rc = (int)(8);
					}
					else
					{
						rc = (int)(sqlite3PagerBegin(pPager, ((wrflag) > (1) ? 1 : 0), (int)(sqlite3TempInMemory(p.db))));
						if ((rc) == (0))
						{
							rc = (int)(newDatabase(pBt));
						}
						else if (((rc) == (5 | (2 << 8))) && ((pBt.inTransaction) == (0)))
						{
							rc = (int)(5);
						}
					}
				}

				if (rc != 0)
				{
					(void)(0);
					unlockBtreeIfUnused(pBt);
				}
			}
			while ((((rc & 0xFF) == (5)) && ((pBt.inTransaction) == (0))) && ((btreeInvokeBusyHandler(pBt)) != 0));
			if ((rc) == (0))
			{
				if ((p.inTrans) == (0))
				{
					pBt.nTransaction++;
					if ((p.sharable) != 0)
					{
						p._lock_.eLock = (byte)(1);
						p._lock_.pNext = pBt.pLock;
						pBt.pLock = p._lock_;
					}
				}

				p.inTrans = (byte)((wrflag) != 0 ? 2 : 1);
				if ((p.inTrans) > (pBt.inTransaction))
				{
					pBt.inTransaction = (byte)(p.inTrans);
				}

				if ((wrflag) != 0)
				{
					MemPage pPage1 = pBt.pPage1;
					pBt.pWriter = p;
					pBt.btsFlags &= (ushort)(~0x0040);
					if ((wrflag) > (1))
						pBt.btsFlags |= (ushort)(0x0040);
					if (pBt.nPage != sqlite3Get4byte(&pPage1.aData[28]))
					{
						rc = (int)(sqlite3PagerWrite(pPage1.pDbPage));
						if ((rc) == (0))
						{
							sqlite3Put4byte(&pPage1.aData[28], (uint)(pBt.nPage));
						}
					}
				}
			}

		trans_begun:
			; if ((rc) == (0)) { if ((pSchemaVersion) != null) { *pSchemaVersion = (int)(sqlite3Get4byte(&pBt.pPage1.aData[40])); } if ((wrflag) != 0) { rc = (int)(sqlite3PagerOpenSavepoint(pPager, (int)(p.db.nSavepoint))); } }
			sqlite3BtreeLeave(p);
			return (int)(rc);
		}
		public static int sqlite3BtreeCheckpoint(Btree p, int eMode, int* pnLog, int* pnCkpt)
		{
			int rc = (int)(0);
			if ((p) != null)
			{
				BtShared pBt = p.pBt;
				sqlite3BtreeEnter(p);
				if (pBt.inTransaction != 0)
				{
					rc = (int)(6);
				}
				else
				{
					rc = (int)(sqlite3PagerCheckpoint(pBt.pPager, p.db, (int)(eMode), pnLog, pnCkpt));
				}

				sqlite3BtreeLeave(p);
			}

			return (int)(rc);
		}
		public static int sqlite3BtreeClearTable(Btree p, int iTable, long* pnChange)
		{
			int rc = 0;
			BtShared pBt = p.pBt;
			sqlite3BtreeEnter(p);
			rc = (int)(saveAllCursors(pBt, (uint)(iTable), null));
			if ((0) == (rc))
			{
				if ((p.hasIncrblobCur) != 0)
				{
					invalidateIncrblobCursors(p, (uint)(iTable), (long)(0), (int)(1));
				}

				rc = (int)(clearDatabasePage(pBt, (uint)(iTable), (int)(0), pnChange));
			}

			sqlite3BtreeLeave(p);
			return (int)(rc);
		}
		public static int sqlite3BtreeClose(Btree p)
		{
			BtShared pBt = p.pBt;
			sqlite3BtreeEnter(p);
			sqlite3BtreeRollback(p, (int)(0), (int)(0));
			sqlite3BtreeLeave(p);
			if ((p.sharable == 0) || ((removeFromSharingList(pBt)) != 0))
			{
				sqlite3PagerClose(pBt.pPager, p.db);
				if (((pBt.xFreeSchema) != null) && ((pBt.pSchema) != null))
				{
					pBt.xFreeSchema(pBt.pSchema);
				}

				sqlite3DbFree(null, pBt.pSchema);
				freeTempSpace(pBt);
				sqlite3_free(pBt);
			}

			if ((p.pPrev) != null)
				p.pPrev.pNext = p.pNext;
			if ((p.pNext) != null)
				p.pNext.pPrev = p.pPrev;
			sqlite3_free(p);
			return (int)(0);
		}
		public static int sqlite3BtreeCommit(Btree p)
		{
			int rc = 0;
			sqlite3BtreeEnter(p);
			rc = (int)(sqlite3BtreeCommitPhaseOne(p, null));
			if ((rc) == (0))
			{
				rc = (int)(sqlite3BtreeCommitPhaseTwo(p, (int)(0)));
			}

			sqlite3BtreeLeave(p);
			return (int)(rc);
		}
		public static int sqlite3BtreeCommitPhaseOne(Btree p, sbyte* zSuperJrnl)
		{
			int rc = (int)(0);
			if ((p.inTrans) == (2))
			{
				BtShared pBt = p.pBt;
				sqlite3BtreeEnter(p);
				if ((pBt.autoVacuum) != 0)
				{
					rc = (int)(autoVacuumCommit(p));
					if (rc != 0)
					{
						sqlite3BtreeLeave(p);
						return (int)(rc);
					}
				}

				if ((pBt.bDoTruncate) != 0)
				{
					sqlite3PagerTruncateImage(pBt.pPager, (uint)(pBt.nPage));
				}

				rc = (int)(sqlite3PagerCommitPhaseOne(pBt.pPager, zSuperJrnl, (int)(0)));
				sqlite3BtreeLeave(p);
			}

			return (int)(rc);
		}
		public static int sqlite3BtreeCommitPhaseTwo(Btree p, int bCleanup)
		{
			if ((p.inTrans) == (0))
				return (int)(0);
			sqlite3BtreeEnter(p);
			if ((p.inTrans) == (2))
			{
				int rc = 0;
				BtShared pBt = p.pBt;
				rc = (int)(sqlite3PagerCommitPhaseTwo(pBt.pPager));
				if ((rc != 0) && ((bCleanup) == (0)))
				{
					sqlite3BtreeLeave(p);
					return (int)(rc);
				}

				p.iBDataVersion--;
				pBt.inTransaction = (byte)(1);
				btreeClearHasContent(pBt);
			}

			btreeEndTransaction(p);
			sqlite3BtreeLeave(p);
			return (int)(0);
		}
		public static int sqlite3BtreeConnectionCount(Btree p)
		{
			return (int)(p.pBt.nRef);
		}
		public static int sqlite3BtreeCopyFile(Btree pTo, Btree pFrom)
		{
			int rc = 0;
			sqlite3_file pFd;
			sqlite3_backup b = new sqlite3_backup();
			sqlite3BtreeEnter(pTo);
			sqlite3BtreeEnter(pFrom);
			pFd = sqlite3PagerFile(sqlite3BtreePager(pTo));
			if ((pFd.pMethods) != null)
			{
				long nByte = (long)(sqlite3BtreeGetPageSize(pFrom) * (long)(sqlite3BtreeLastPage(pFrom)));
				rc = (int)(sqlite3OsFileControl(pFd, (int)(11), &nByte));
				if ((rc) == (12))
					rc = (int)(0);
				if ((rc) != 0)
					goto copy_finished;
			}

			CRuntime.memset(b, (int)(0), (ulong)(sizeof(sqlite3_backup)));
			b.pSrcDb = pFrom.db;
			b.pSrc = pFrom;
			b.pDest = pTo;
			b.iNext = (uint)(1);
			sqlite3_backup_step(b, (int)(0x7FFFFFFF));
			rc = (int)(sqlite3_backup_finish(b));
			if ((rc) == (0))
			{
				pTo.pBt.btsFlags &= (ushort)(~0x0002);
			}
			else
			{
				sqlite3PagerClearCache(sqlite3BtreePager(b.pDest));
			}

		copy_finished:
			; sqlite3BtreeLeave(pFrom);
			sqlite3BtreeLeave(pTo);
			return (int)(rc);
		}
		public static int sqlite3BtreeCreateTable(Btree p, uint* piTable, int flags)
		{
			int rc = 0;
			sqlite3BtreeEnter(p);
			rc = (int)(btreeCreateTable(p, piTable, (int)(flags)));
			sqlite3BtreeLeave(p);
			return (int)(rc);
		}
		public static int sqlite3BtreeCursor(Btree p, uint iTable, int wrFlag, KeyInfo pKeyInfo, BtCursor pCur)
		{
			if ((p.sharable) != 0)
			{
				return (int)(btreeCursorWithLock(p, (uint)(iTable), (int)(wrFlag), pKeyInfo, pCur));
			}
			else
			{
				return (int)(btreeCursor(p, (uint)(iTable), (int)(wrFlag), pKeyInfo, pCur));
			}
		}
		public static int sqlite3BtreeDropTable(Btree p, int iTable, int* piMoved)
		{
			int rc = 0;
			sqlite3BtreeEnter(p);
			rc = (int)(btreeDropTable(p, (uint)(iTable), piMoved));
			sqlite3BtreeLeave(p);
			return (int)(rc);
		}
		public static void sqlite3BtreeEnter(Btree p)
		{
			if (p.sharable == 0)
				return;
			p.wantToLock++;
			if ((p.locked) != 0)
				return;
			btreeLockCarefully(p);
		}
		public static int sqlite3BtreeGetAutoVacuum(Btree p)
		{
			int rc = 0;
			sqlite3BtreeEnter(p);
			rc = (int)((!p.pBt.autoVacuum) ? 0 : (!p.pBt.incrVacuum) ? 1 : 2);
			sqlite3BtreeLeave(p);
			return (int)(rc);
		}
		public static void sqlite3BtreeGetMeta(Btree p, int idx, uint* pMeta)
		{
			BtShared pBt = p.pBt;
			sqlite3BtreeEnter(p);
			if ((idx) == (15))
			{
				*pMeta = (uint)(sqlite3PagerDataVersion(pBt.pPager) + p.iBDataVersion);
			}
			else
			{
				*pMeta = (uint)(sqlite3Get4byte(&pBt.pPage1.aData[36 + idx * 4]));
			}

			sqlite3BtreeLeave(p);
		}
		public static int sqlite3BtreeGetPageSize(Btree p)
		{
			return (int)(p.pBt.pageSize);
		}
		public static int sqlite3BtreeGetRequestedReserve(Btree p)
		{
			int n1 = 0; int n2 = 0;
			sqlite3BtreeEnter(p);
			n1 = ((int)(p.pBt.nReserveWanted));
			n2 = (int)(sqlite3BtreeGetReserveNoMutex(p));
			sqlite3BtreeLeave(p);
			return (int)((n1) > (n2) ? n1 : n2);
		}
		public static int sqlite3BtreeGetReserveNoMutex(Btree p)
		{
			int n = 0;
			n = (int)(p.pBt.pageSize - p.pBt.usableSize);
			return (int)(n);
		}
		public static int sqlite3BtreeIncrVacuum(Btree p)
		{
			int rc = 0;
			BtShared pBt = p.pBt;
			sqlite3BtreeEnter(p);
			if (pBt.autoVacuum == 0)
			{
				rc = (int)(101);
			}
			else
			{
				uint nOrig = (uint)(btreePagecount(pBt));
				uint nFree = (uint)(sqlite3Get4byte(&pBt.pPage1.aData[36]));
				uint nFin = (uint)(finalDbSize(pBt, (uint)(nOrig), (uint)(nFree)));
				if (((nOrig) < (nFin)) || ((nFree) >= (nOrig)))
				{
					rc = (int)(sqlite3CorruptError((int)(70108)));
				}
				else if ((nFree) > (0))
				{
					rc = (int)(saveAllCursors(pBt, (uint)(0), null));
					if ((rc) == (0))
					{
						invalidateAllOverflowCache(pBt);
						rc = (int)(incrVacuumStep(pBt, (uint)(nFin), (uint)(nOrig), (int)(0)));
					}

					if ((rc) == (0))
					{
						rc = (int)(sqlite3PagerWrite(pBt.pPage1.pDbPage));
						sqlite3Put4byte(&pBt.pPage1.aData[28], (uint)(pBt.nPage));
					}
				}
				else
				{
					rc = (int)(101);
				}
			}

			sqlite3BtreeLeave(p);
			return (int)(rc);
		}
		public static int sqlite3BtreeIsInBackup(Btree p)
		{
			return (int)(p.nBackup != 0);
		}
		public static int sqlite3BtreeIsReadonly(Btree p)
		{
			return (int)((p.pBt.btsFlags & 0x0001) != 0);
		}
		public static uint sqlite3BtreeLastPage(Btree p)
		{
			return (uint)(btreePagecount(p.pBt));
		}
		public static void sqlite3BtreeLeave(Btree p)
		{
			if ((p.sharable) != 0)
			{
				p.wantToLock--;
				if ((p.wantToLock) == (0))
				{
					unlockBtreeMutex(p);
				}
			}
		}
		public static int sqlite3BtreeLockTable(Btree p, int iTab, byte isWriteLock)
		{
			int rc = (int)(0);
			if ((p.sharable) != 0)
			{
				byte lockType = (byte)(1 + isWriteLock);
				sqlite3BtreeEnter(p);
				rc = (int)(querySharedCacheTableLock(p, (uint)(iTab), (byte)(lockType)));
				if ((rc) == (0))
				{
					rc = (int)(setSharedCacheTableLock(p, (uint)(iTab), (byte)(lockType)));
				}

				sqlite3BtreeLeave(p);
			}

			return (int)(rc);
		}
		public static uint sqlite3BtreeMaxPageCount(Btree p, uint mxPage)
		{
			uint n = 0;
			sqlite3BtreeEnter(p);
			n = (uint)(sqlite3PagerMaxPageCount(p.pBt.pPager, (uint)(mxPage)));
			sqlite3BtreeLeave(p);
			return (uint)(n);
		}
		public static int sqlite3BtreeNewDb(Btree p)
		{
			int rc = 0;
			sqlite3BtreeEnter(p);
			p.pBt.nPage = (uint)(0);
			rc = (int)(newDatabase(p.pBt));
			sqlite3BtreeLeave(p);
			return (int)(rc);
		}
		public static Pager sqlite3BtreePager(Btree p)
		{
			return p.pBt.pPager;
		}
		public static int sqlite3BtreeRollback(Btree p, int tripCode, int writeOnly)
		{
			int rc = 0;
			BtShared pBt = p.pBt;
			MemPage pPage1;
			sqlite3BtreeEnter(p);
			if ((tripCode) == (0))
			{
				rc = (int)(tripCode = (int)(saveAllCursors(pBt, (uint)(0), null)));
				if ((rc) != 0)
					writeOnly = (int)(0);
			}
			else
			{
				rc = (int)(0);
			}

			if ((tripCode) != 0)
			{
				int rc2 = (int)(sqlite3BtreeTripAllCursors(p, (int)(tripCode), (int)(writeOnly)));
				if (rc2 != 0)
					rc = (int)(rc2);
			}

			if ((p.inTrans) == (2))
			{
				int rc2 = 0;
				rc2 = (int)(sqlite3PagerRollback(pBt.pPager));
				if (rc2 != 0)
				{
					rc = (int)(rc2);
				}

				if ((btreeGetPage(pBt, (uint)(1), pPage1, (int)(0))) == (0))
				{
					btreeSetNPage(pBt, pPage1);
					releasePageOne(pPage1);
				}

				pBt.inTransaction = (byte)(1);
				btreeClearHasContent(pBt);
			}

			btreeEndTransaction(p);
			sqlite3BtreeLeave(p);
			return (int)(rc);
		}
		public static int sqlite3BtreeSavepoint(Btree p, int op, int iSavepoint)
		{
			int rc = (int)(0);
			if (((p) != null) && ((p.inTrans) == (2)))
			{
				BtShared pBt = p.pBt;
				sqlite3BtreeEnter(p);
				if ((op) == (2))
				{
					rc = (int)(saveAllCursors(pBt, (uint)(0), null));
				}

				if ((rc) == (0))
				{
					rc = (int)(sqlite3PagerSavepoint(pBt.pPager, (int)(op), (int)(iSavepoint)));
				}

				if ((rc) == (0))
				{
					if (((iSavepoint) < (0)) && ((pBt.btsFlags & 0x0010) != 0))
					{
						pBt.nPage = (uint)(0);
					}

					rc = (int)(newDatabase(pBt));
					btreeSetNPage(pBt, pBt.pPage1);
				}

				sqlite3BtreeLeave(p);
			}

			return (int)(rc);
		}
		public static int sqlite3BtreeSchemaLocked(Btree p)
		{
			int rc = 0;
			sqlite3BtreeEnter(p);
			rc = (int)(querySharedCacheTableLock(p, (uint)(1), (byte)(1)));
			sqlite3BtreeLeave(p);
			return (int)(rc);
		}
		public static int sqlite3BtreeSecureDelete(Btree p, int newFlag)
		{
			int b = 0;
			if ((p) == (null))
				return (int)(0);
			sqlite3BtreeEnter(p);
			if ((newFlag) >= (0))
			{
				p.pBt.btsFlags &= (ushort)(~0x000c);
				p.pBt.btsFlags |= (ushort)(0x0004 * newFlag);
			}

			b = (int)((p.pBt.btsFlags & 0x000c) / 0x0004);
			sqlite3BtreeLeave(p);
			return (int)(b);
		}
		public static int sqlite3BtreeSetAutoVacuum(Btree p, int autoVacuum)
		{
			BtShared pBt = p.pBt;
			int rc = (int)(0);
			byte av = (byte)(autoVacuum);
			sqlite3BtreeEnter(p);
			if (((pBt.btsFlags & 0x0002) != 0) && (((av) != 0 ? 1 : 0) != pBt.autoVacuum))
			{
				rc = (int)(8);
			}
			else
			{
				pBt.autoVacuum = (byte)((av) != 0 ? 1 : 0);
				pBt.incrVacuum = (byte)((av) == (2) ? 1 : 0);
			}

			sqlite3BtreeLeave(p);
			return (int)(rc);
		}
		public static int sqlite3BtreeSetCacheSize(Btree p, int mxPage)
		{
			BtShared pBt = p.pBt;
			sqlite3BtreeEnter(p);
			sqlite3PagerSetCachesize(pBt.pPager, (int)(mxPage));
			sqlite3BtreeLeave(p);
			return (int)(0);
		}
		public static int sqlite3BtreeSetMmapLimit(Btree p, long szMmap)
		{
			BtShared pBt = p.pBt;
			sqlite3BtreeEnter(p);
			sqlite3PagerSetMmapLimit(pBt.pPager, (long)(szMmap));
			sqlite3BtreeLeave(p);
			return (int)(0);
		}
		public static int sqlite3BtreeSetPagerFlags(Btree p, uint pgFlags)
		{
			BtShared pBt = p.pBt;
			sqlite3BtreeEnter(p);
			sqlite3PagerSetFlags(pBt.pPager, (uint)(pgFlags));
			sqlite3BtreeLeave(p);
			return (int)(0);
		}
		public static int sqlite3BtreeSetPageSize(Btree p, int pageSize, int nReserve, int iFix)
		{
			int rc = (int)(0);
			int x = 0;
			BtShared pBt = p.pBt;
			sqlite3BtreeEnter(p);
			pBt.nReserveWanted = (byte)(nReserve);
			x = (int)(pBt.pageSize - pBt.usableSize);
			if ((nReserve) < (x))
				nReserve = (int)(x);
			if ((pBt.btsFlags & 0x0002) != 0)
			{
				sqlite3BtreeLeave(p);
				return (int)(8);
			}

			if ((((pageSize) >= (512)) && ((pageSize) <= (65536))) && (((pageSize - 1) & pageSize) == (0)))
			{
				if (((nReserve) > (32)) && ((pageSize) == (512)))
					pageSize = (int)(1024);
				pBt.pageSize = ((uint)(pageSize));
				freeTempSpace(pBt);
			}

			rc = (int)(sqlite3PagerSetPagesize(pBt.pPager, &pBt.pageSize, (int)(nReserve)));
			pBt.usableSize = (uint)(pBt.pageSize - (ushort)(nReserve));
			if ((iFix) != 0)
				pBt.btsFlags |= (ushort)(0x0002);
			sqlite3BtreeLeave(p);
			return (int)(rc);
		}
		public static int sqlite3BtreeSetSpillSize(Btree p, int mxPage)
		{
			BtShared pBt = p.pBt;
			int res = 0;
			sqlite3BtreeEnter(p);
			res = (int)(sqlite3PagerSetSpillsize(pBt.pPager, (int)(mxPage)));
			sqlite3BtreeLeave(p);
			return (int)(res);
		}
		public static int sqlite3BtreeSetVersion(Btree pBtree, int iVersion)
		{
			BtShared pBt = pBtree.pBt;
			int rc = 0;
			pBt.btsFlags &= (ushort)(~0x0020);
			if ((iVersion) == (1))
				pBt.btsFlags |= (ushort)(0x0020);
			rc = (int)(sqlite3BtreeBeginTrans(pBtree, (int)(0), null));
			if ((rc) == (0))
			{
				byte* aData = pBt.pPage1.aData;
				if ((aData[18] != (byte)(iVersion)) || (aData[19] != (byte)(iVersion)))
				{
					rc = (int)(sqlite3BtreeBeginTrans(pBtree, (int)(2), null));
					if ((rc) == (0))
					{
						rc = (int)(sqlite3PagerWrite(pBt.pPage1.pDbPage));
						if ((rc) == (0))
						{
							aData[18] = ((byte)(iVersion));
							aData[19] = ((byte)(iVersion));
						}
					}
				}
			}

			pBt.btsFlags &= (ushort)(~0x0020);
			return (int)(rc);
		}
		public static int sqlite3BtreeSharable(Btree p)
		{
			return (int)(p.sharable);
		}
		public static int sqlite3BtreeTripAllCursors(Btree pBtree, int errCode, int writeOnly)
		{
			BtCursor p;
			int rc = (int)(0);
			if ((pBtree) != null)
			{
				sqlite3BtreeEnter(pBtree);
				for (p = pBtree.pBt.pCursor; p; p = p.pNext)
				{
					if (((writeOnly) != 0) && ((p.curFlags & 0x01) == (0)))
					{
						if (((p.eState) == (0)) || ((p.eState) == (2)))
						{
							rc = (int)(saveCursorPosition(p));
							if (rc != 0)
							{
								(void)(sqlite3BtreeTripAllCursors(pBtree, (int)(rc), (int)(0)));
								break;
							}
						}
					}
					else
					{
						sqlite3BtreeClearCursor(p);
						p.eState = (byte)(4);
						p.skipNext = (int)(errCode);
					}

					btreeReleaseAllCursorPages(p);
				}

				sqlite3BtreeLeave(pBtree);
			}

			return (int)(rc);
		}
		public static int sqlite3BtreeTxnState(Btree p)
		{
			return (int)(p ? p.inTrans : 0);
		}
		public static int sqlite3BtreeUpdateMeta(Btree p, int idx, uint iMeta)
		{
			BtShared pBt = p.pBt;
			byte* pP1;
			int rc = 0;
			sqlite3BtreeEnter(p);
			pP1 = pBt.pPage1.aData;
			rc = (int)(sqlite3PagerWrite(pBt.pPage1.pDbPage));
			if ((rc) == (0))
			{
				sqlite3Put4byte(&pP1[36 + idx * 4], (uint)(iMeta));
				if ((idx) == (7))
				{
					pBt.incrVacuum = ((byte)(iMeta));
				}
			}

			sqlite3BtreeLeave(p);
			return (int)(rc);
		}
		public static void unlockBtreeMutex(Btree p)
		{
			BtShared pBt = p.pBt;
			sqlite3_mutex_leave(pBt.mutex);
			p.locked = (byte)(0);
		}
	}
}