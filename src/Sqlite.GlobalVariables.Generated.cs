// Generated by Hebron at 4/3/2022 2:09:38 AM

using System;
using System.Runtime.InteropServices;
using Hebron.Runtime;

namespace SqliteSharp
{
	unsafe partial class Sqlite
	{
		public static sbyte[] aDigits = new sbyte[33];
		public static int[] aHardLimit = new int[] { 1000000000, 1000000000, 2000, 1000, 500, 250000000, 127, 10, 50000, 32766, 1000, 8 };
		public static byte[] aiClass = new byte[] { 29, 28, 28, 28, 28, 28, 28, 28, 28, 7, 7, 28, 7, 7, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 7, 15, 8, 5, 4, 22, 24, 8, 17, 18, 21, 20, 23, 11, 26, 16, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 19, 12, 14, 13, 6, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 2, 2, 9, 28, 28, 28, 2, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 2, 2, 28, 10, 28, 25, 28, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 30, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27 };
		public static byte[] aJournalMagic = new byte[] { 0xd9, 0xd5, 0x05, 0xf9, 0x20, 0xa1, 0x63, 0xd7 };
		public static byte[] aKWCode = new byte[] { 98, 116, 161, 39, 58, 41, 124, 67, 33, 132, 62, 63, 47, 2, 65, 163, 38, 24, 138, 16, 118, 159, 11, 131, 160, 91, 128, 21, 21, 43, 50, 82, 13, 137, 94, 51, 19, 66, 121, 47, 136, 6, 28, 115, 118, 162, 71, 9, 20, 119, 151, 69, 68, 130, 77, 89, 95, 40, 147, 47, 5, 118, 125, 123, 3, 26, 81, 118, 14, 32, 48, 152, 92, 146, 35, 31, 120, 157, 113, 17, 100, 8, 143, 127, 46, 4, 30, 70, 97, 7, 140, 45, 129, 139, 80, 96, 158, 149, 72, 27, 29, 99, 44, 133, 87, 126, 15, 49, 36, 60, 10, 37, 118, 100, 100, 85, 88, 42, 84, 166, 73, 83, 86, 142, 118, 148, 18, 145, 74, 93, 165, 150, 118, 12, 76, 75, 90, 134, 144, 78, 79, 164, 61, 34, 64, 135, 122 };
		public static byte[] aKWHash = new byte[] { 84, 92, 134, 82, 105, 29, 0, 0, 94, 0, 85, 72, 0, 53, 35, 86, 15, 0, 42, 97, 54, 89, 135, 19, 0, 0, 140, 0, 40, 129, 0, 22, 107, 0, 9, 0, 0, 123, 80, 0, 78, 6, 0, 65, 103, 147, 0, 136, 115, 0, 0, 48, 0, 90, 24, 0, 17, 0, 27, 70, 23, 26, 5, 60, 142, 110, 122, 0, 73, 91, 71, 145, 61, 120, 74, 0, 49, 0, 11, 41, 0, 113, 0, 0, 0, 109, 10, 111, 116, 125, 14, 50, 124, 0, 100, 0, 18, 121, 144, 56, 130, 139, 88, 83, 37, 30, 126, 0, 0, 108, 51, 131, 128, 0, 34, 0, 0, 132, 0, 98, 38, 39, 0, 20, 45, 117, 93 };
		public static byte[] aKWLen = new byte[] { 7, 7, 5, 4, 6, 4, 5, 3, 6, 7, 3, 6, 6, 7, 7, 3, 8, 2, 6, 5, 4, 4, 3, 10, 4, 7, 6, 9, 4, 2, 6, 5, 9, 9, 4, 7, 3, 2, 4, 4, 6, 11, 6, 2, 7, 5, 5, 9, 6, 10, 4, 6, 2, 3, 7, 5, 9, 6, 6, 4, 5, 5, 10, 6, 5, 7, 4, 5, 7, 6, 7, 7, 6, 5, 7, 3, 7, 4, 7, 6, 12, 9, 4, 6, 5, 4, 7, 6, 12, 8, 8, 2, 6, 6, 7, 6, 4, 5, 9, 5, 5, 6, 3, 4, 9, 13, 2, 2, 4, 6, 6, 8, 5, 17, 12, 7, 9, 4, 4, 6, 7, 5, 9, 4, 4, 5, 2, 5, 8, 6, 4, 9, 5, 8, 4, 3, 9, 5, 5, 6, 4, 6, 2, 2, 9, 3, 7 };
		public static byte[] aKWNext = new byte[] { 0, 0, 0, 0, 4, 0, 43, 0, 0, 106, 114, 0, 0, 0, 2, 0, 0, 143, 0, 0, 0, 13, 0, 0, 0, 0, 141, 0, 0, 119, 52, 0, 0, 137, 12, 0, 0, 62, 0, 138, 0, 133, 0, 0, 36, 0, 0, 28, 77, 0, 0, 0, 0, 59, 0, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 69, 0, 0, 0, 0, 0, 146, 3, 0, 58, 0, 1, 75, 0, 0, 0, 31, 0, 0, 0, 0, 0, 127, 0, 104, 0, 64, 66, 63, 0, 0, 0, 0, 0, 46, 0, 16, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 81, 101, 0, 112, 21, 7, 67, 0, 79, 96, 118, 0, 0, 68, 0, 0, 99, 44, 0, 55, 0, 76, 0, 95, 32, 33, 57, 25, 0, 102, 0, 0, 87 };
		public static ushort[] aKWOffset = new ushort[] { 0, 2, 2, 8, 9, 14, 16, 20, 23, 25, 25, 29, 33, 36, 41, 46, 48, 53, 54, 59, 62, 65, 67, 69, 78, 81, 86, 90, 90, 94, 99, 101, 105, 111, 119, 123, 123, 123, 126, 129, 132, 137, 142, 146, 147, 152, 156, 160, 168, 174, 181, 184, 184, 187, 189, 195, 198, 206, 211, 216, 219, 222, 226, 236, 239, 244, 244, 248, 252, 259, 265, 271, 277, 277, 283, 284, 288, 295, 299, 306, 312, 324, 333, 335, 341, 346, 348, 355, 359, 370, 377, 378, 385, 391, 397, 402, 408, 412, 415, 424, 429, 433, 439, 441, 444, 453, 455, 457, 466, 470, 476, 482, 490, 495, 495, 495, 511, 520, 523, 527, 532, 539, 544, 553, 557, 560, 565, 567, 571, 579, 585, 588, 597, 602, 610, 610, 614, 623, 628, 633, 639, 642, 645, 648, 650, 655, 659 };
		public static PragmaName[] aPragmaName = new PragmaName[] { { "analysis_limit", 1, 0x10, 0, 0, 0 }, { "application_id", 2, 0x04 | 0x10, 0, 0, 8 }, { "auto_vacuum", 3, 0x01 | 0x10 | 0x80 | 0x04, 0, 0, 0 }, { "automatic_index", 4, 0x10 | 0x04, 0, 0, 0x00008000 }, { "busy_timeout", 5, 0x10, 56, 1, 0 }, { "cache_size", 6, 0x01 | 0x10 | 0x80 | 0x04, 0, 0, 0 }, { "cache_spill", 7, 0x10 | 0x80 | 0x04, 0, 0, 0 }, { "case_sensitive_like", 8, 0x02, 0, 0, 0 }, { "cell_size_check", 4, 0x10 | 0x04, 0, 0, 0x00200000 }, { "checkpoint_fullfsync", 4, 0x10 | 0x04, 0, 0, 0x00000010 }, { "collation_list", 9, 0x10, 38, 2, 0 }, { "compile_options", 10, 0x10, 0, 0, 0 }, { "count_changes", 4, 0x10 | 0x04, 0, 0, ((ulong)(0x00001) << 32) }, { "data_store_directory", 11, 0x04, 0, 0, 0 }, { "data_version", 2, 0x08 | 0x10, 0, 0, 15 }, { "database_list", 12, 0x01 | 0x10, 47, 3, 0 }, { "default_cache_size", 13, 0x01 | 0x10 | 0x80 | 0x04, 55, 1, 0 }, { "defer_foreign_keys", 4, 0x10 | 0x04, 0, 0, 0x00080000 }, { "empty_result_callbacks", 4, 0x10 | 0x04, 0, 0, 0x00000100 }, { "encoding", 14, 0x10 | 0x04, 0, 0, 0 }, { "foreign_key_check", 15, 0x01 | 0x10 | 0x20 | 0x40, 43, 4, 0 }, { "foreign_key_list", 16, 0x01 | 0x20 | 0x40, 0, 8, 0 }, { "foreign_keys", 4, 0x10 | 0x04, 0, 0, 0x00004000 }, { "freelist_count", 2, 0x08 | 0x10, 0, 0, 0 }, { "full_column_names", 4, 0x10 | 0x04, 0, 0, 0x00000004 }, { "fullfsync", 4, 0x10 | 0x04, 0, 0, 0x00000008 }, { "function_list", 17, 0x10, 27, 6, 0 }, { "hard_heap_limit", 18, 0x10, 0, 0, 0 }, { "ignore_check_constraints", 4, 0x10 | 0x04, 0, 0, 0x00000200 }, { "incremental_vacuum", 19, 0x01 | 0x02, 0, 0, 0 }, { "index_info", 20, 0x01 | 0x20 | 0x40, 21, 3, 0 }, { "index_list", 21, 0x01 | 0x20 | 0x40, 38, 5, 0 }, { "index_xinfo", 20, 0x01 | 0x20 | 0x40, 21, 6, 1 }, { "integrity_check", 22, 0x01 | 0x10 | 0x20 | 0x40, 0, 0, 0 }, { "journal_mode", 23, 0x01 | 0x10 | 0x80, 0, 0, 0 }, { "journal_size_limit", 24, 0x10 | 0x80, 0, 0, 0 }, { "legacy_alter_table", 4, 0x10 | 0x04, 0, 0, 0x04000000 }, { "locking_mode", 26, 0x10 | 0x80, 0, 0, 0 }, { "max_page_count", 27, 0x01 | 0x10 | 0x80, 0, 0, 0 }, { "mmap_size", 28, 0, 0, 0, 0 }, { "module_list", 29, 0x10, 9, 1, 0 }, { "optimize", 30, 0x20 | 0x01, 0, 0, 0 }, { "page_count", 27, 0x01 | 0x10 | 0x80, 0, 0, 0 }, { "page_size", 31, 0x10 | 0x80 | 0x04, 0, 0, 0 }, { "pragma_list", 32, 0x10, 9, 1, 0 }, { "query_only", 4, 0x10 | 0x04, 0, 0, 0x00100000 }, { "quick_check", 22, 0x01 | 0x10 | 0x20 | 0x40, 0, 0, 0 }, { "read_uncommitted", 4, 0x10 | 0x04, 0, 0, 0x00000400 }, { "recursive_triggers", 4, 0x10 | 0x04, 0, 0, 0x00002000 }, { "reverse_unordered_selects", 4, 0x10 | 0x04, 0, 0, 0x00001000 }, { "schema_version", 2, 0x04 | 0x10, 0, 0, 1 }, { "secure_delete", 33, 0x10, 0, 0, 0 }, { "short_column_names", 4, 0x10 | 0x04, 0, 0, 0x00000040 }, { "shrink_memory", 34, 0x02, 0, 0, 0 }, { "soft_heap_limit", 35, 0x10, 0, 0, 0 }, { "synchronous", 36, 0x01 | 0x10 | 0x80 | 0x04, 0, 0, 0 }, { "table_info", 37, 0x01 | 0x20 | 0x40, 8, 6, 0 }, { "table_list", 38, 0x01 | 0x20, 15, 6, 0 }, { "table_xinfo", 37, 0x01 | 0x20 | 0x40, 8, 7, 1 }, { "temp_store", 39, 0x10 | 0x04, 0, 0, 0 }, { "temp_store_directory", 40, 0x04, 0, 0, 0 }, { "threads", 41, 0x10, 0, 0, 0 }, { "trusted_schema", 4, 0x10 | 0x04, 0, 0, 0x00000080 }, { "user_version", 2, 0x04 | 0x10, 0, 0, 6 }, { "wal_autocheckpoint", 42, 0, 0, 0, 0 }, { "wal_checkpoint", 43, 0x01, 50, 3, 0 }, { "writable_schema", 4, 0x10 | 0x04, 0, 0, 0x00000001 | 0x08000000 } };
		public static sbyte[] aPrefix = new sbyte[7];
		public static double[] arRound = new double[] { 5.0e-01, 5.0e-02, 5.0e-03, 5.0e-04, 5.0e-05, 5.0e-06, 5.0e-07, 5.0e-08, 5.0e-09, 5.0e-10 };
		public static win_syscall[] aSyscall = new win_syscall[] { { "AreFileApisANSI", (Void())(AreFileApisANSI), null }, { "CharLowerW", 0, null }, { "CharUpperW", 0, null }, { "CloseHandle", (Void())(CloseHandle), null }, { "CreateFileA", (Void())(CreateFileA), null }, { "CreateFileW", (Void())(CreateFileW), null }, { "CreateFileMappingA", 0, null }, { "CreateFileMappingW", (Void())(CreateFileMappingW), null }, { "CreateMutexW", (Void())(CreateMutexW), null }, { "DeleteFileA", (Void())(DeleteFileA), null }, { "DeleteFileW", (Void())(DeleteFileW), null }, { "FileTimeToLocalFileTime", 0, null }, { "FileTimeToSystemTime", 0, null }, { "FlushFileBuffers", (Void())(FlushFileBuffers), null }, { "FormatMessageA", (Void())(FormatMessageA), null }, { "FormatMessageW", (Void())(FormatMessageW), null }, { "FreeLibrary", (Void())(FreeLibrary), null }, { "GetCurrentProcessId", (Void())(GetCurrentProcessId), null }, { "GetDiskFreeSpaceA", (Void())(GetDiskFreeSpaceA), null }, { "GetDiskFreeSpaceW", (Void())(GetDiskFreeSpaceW), null }, { "GetFileAttributesA", (Void())(GetFileAttributesA), null }, { "GetFileAttributesW", (Void())(GetFileAttributesW), null }, { "GetFileAttributesExW", (Void())(GetFileAttributesExW), null }, { "GetFileSize", (Void())(GetFileSize), null }, { "GetFullPathNameA", (Void())(GetFullPathNameA), null }, { "GetFullPathNameW", (Void())(GetFullPathNameW), null }, { "GetLastError", (Void())(GetLastError), null }, { "GetProcAddressA", (Void())(GetProcAddress), null }, { "GetSystemInfo", (Void())(GetSystemInfo), null }, { "GetSystemTime", (Void())(GetSystemTime), null }, { "GetSystemTimeAsFileTime", (Void())(GetSystemTimeAsFileTime), null }, { "GetTempPathA", (Void())(GetTempPathA), null }, { "GetTempPathW", (Void())(GetTempPathW), null }, { "GetTickCount", (Void())(GetTickCount), null }, { "GetVersionExA", 0, null }, { "GetVersionExW", 0, null }, { "HeapAlloc", (Void())(HeapAlloc), null }, { "HeapCreate", (Void())(HeapCreate), null }, { "HeapDestroy", (Void())(HeapDestroy), null }, { "HeapFree", (Void())(HeapFree), null }, { "HeapReAlloc", (Void())(HeapReAlloc), null }, { "HeapSize", (Void())(HeapSize), null }, { "HeapValidate", (Void())(HeapValidate), null }, { "HeapCompact", (Void())(HeapCompact), null }, { "LoadLibraryA", (Void())(LoadLibraryA), null }, { "LoadLibraryW", (Void())(LoadLibraryW), null }, { "LocalFree", (Void())(LocalFree), null }, { "LockFile", (Void())(LockFile), null }, { "LockFileEx", (Void())(LockFileEx), null }, { "MapViewOfFile", (Void())(MapViewOfFile), null }, { "MultiByteToWideChar", (Void())(MultiByteToWideChar), null }, { "QueryPerformanceCounter", (Void())(QueryPerformanceCounter), null }, { "ReadFile", (Void())(ReadFile), null }, { "SetEndOfFile", (Void())(SetEndOfFile), null }, { "SetFilePointer", (Void())(SetFilePointer), null }, { "Sleep", (Void())(Sleep), null }, { "SystemTimeToFileTime", (Void())(SystemTimeToFileTime), null }, { "UnlockFile", (Void())(UnlockFile), null }, { "UnlockFileEx", (Void())(UnlockFileEx), null }, { "UnmapViewOfFile", (Void())(UnmapViewOfFile), null }, { "WideCharToMultiByte", (Void())(WideCharToMultiByte), null }, { "WriteFile", (Void())(WriteFile), null }, { "CreateEventExW", 0, null }, { "WaitForSingleObject", (Void())(WaitForSingleObject), null }, { "WaitForSingleObjectEx", (Void())(WaitForSingleObjectEx), null }, { "SetFilePointerEx", 0, null }, { "GetFileInformationByHandleEx", 0, null }, { "MapViewOfFileFromApp", 0, null }, { "CreateFile2", 0, null }, { "LoadPackagedLibrary", 0, null }, { "GetTickCount64", 0, null }, { "GetNativeSystemInfo", 0, null }, { "OutputDebugStringA", (Void())(OutputDebugStringA), null }, { "OutputDebugStringW", (Void())(OutputDebugStringW), null }, { "GetProcessHeap", (Void())(GetProcessHeap), null }, { "CreateFileMappingFromApp", 0, null }, { "InterlockedCompareExchange", 0, null }, { "UuidCreate", 0, null }, { "UuidCreateSequential", 0, null }, { "FlushViewOfFile", (Void())(FlushViewOfFile), null } };
		public static VdbeOpList[] autoIncrementEnd_autoIncEnd = new VdbeOpList[] { { 51, 0, 2, 0 }, { 126, 0, 0, 0 }, { 96, 0, 2, 0 }, { 127, 0, 0, 0 }, { 121, 0, 0, 0 } };
		public static int autoIncrementEnd_iLn = (int)(0)
public static aXformTypeDef[] aXformType = new aXformTypeDef[] { { 6, "second", 4.6427e+14, 1.0 }, { 6, "minute", 7.7379e+12, 60.0 }, { 4, "hour", 1.2897e+11, 3600.0 }, { 3, "day", 5373485.0, 86400.0 }, { 5, "month", 176546.0, 2592000.0 }, { 4, "year", 14713.0, 31536000.0 } };
		public static sqlite3_value[] columnNullValue_nullMem = (sqlite3_value)(new sqlite3_value[] { { 0 }, (ushort)(0x0001), (byte)(0), (byte)(0), 0, 0, 0, 0, (uint)(0), 0, 0 }; )

public static sbyte[,] corruptSchema_azAlterType = new sbyte[] { "rename", "drop column", "add column" };
		public static sbyte[,] createTableStmt_azType = new sbyte[] { "", " TEXT", " NUM", " INT", " REAL" };
		public static sbyte[] cume_distName = new sbyte[10];
		public static sbyte[] dense_rankName = new sbyte[11];
		public static long doubleToInt64_maxInt = (long)(0xffffffff | (((long)(0x7fffffff)) << 32))
public static long doubleToInt64_minInt = (long)(((long)(-1)) - (0xffffffff | (((long)(0x7fffffff)) << 32)))
public static byte[] exprAnalyze_ops = new byte[] { 57, 55 };
		public static HashElem[] findElementWithHash_nullElement = (HashElem)(new HashElem[] { null, null, null, null }; )

public static sbyte[] first_valueName = new sbyte[12];
		public static et_info[] fmtinfo = new et_info[] { { 100, 10, 1, 16, 0, 0 }, { 115, 0, 4, 5, 0, 0 }, { 103, 0, 1, 3, 30, 0 }, { 122, 0, 4, 6, 0, 0 }, { 113, 0, 4, 9, 0, 0 }, { 81, 0, 4, 10, 0, 0 }, { 119, 0, 4, 14, 0, 0 }, { 99, 0, 0, 8, 0, 0 }, { 111, 8, 0, 0, 0, 2 }, { 117, 10, 0, 16, 0, 0 }, { 120, 16, 0, 0, 16, 1 }, { 88, 16, 0, 0, 0, 4 }, { 102, 0, 1, 1, 0, 0 }, { 101, 0, 1, 2, 30, 0 }, { 69, 0, 1, 2, 14, 0 }, { 71, 0, 1, 3, 14, 0 }, { 105, 10, 1, 16, 0, 0 }, { 110, 0, 0, 4, 0, 0 }, { 37, 0, 0, 7, 0, 0 }, { 112, 16, 0, 13, 0, 1 }, { 84, 0, 0, 11, 0, 0 }, { 83, 0, 0, 12, 0, 0 }, { 114, 10, 1, 15, 0, 0 } };
		public static ushort[] getDigits_aMx = new ushort[] { 12, 14, 24, 31, 59, 9999 };
		public static byte[] getSafetyLevel_iLength = new byte[] { 2, 2, 3, 5, 3, 4, 5, 4 };
		public static byte[] getSafetyLevel_iOffset = new byte[] { 0, 1, 2, 4, 9, 12, 15, 20 };
		public static byte[] getSafetyLevel_iValue = new byte[] { 1, 0, 0, 0, 1, 1, 3, 2 };
		public static sbyte[] getSafetyLevel_zText = new sbyte[25];
		public static compareInfo[] globInfo = (compareInfo)(new compareInfo[] { 42, 63, 91, 0 };
		public static sbyte[] hexdigits = new sbyte[] { 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 70 };
		public static Op2[] isAuxiliaryVtabOperator_aOp = new Op2[] { { "match", 64 }, { "glob", 66 }, { "like", 65 }, { "regexp", 67 } };
		public static sbyte[] jsonAppendString_aSpecial = new sbyte[] { 0, 0, 0, 0, 0, 0, 0, 0, 98, 116, 110, 0, 102, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
		public static sqlite3_module[] jsonEachModule = (sqlite3_module)(new sqlite3_module[] { 0, null, jsonEachConnect, jsonEachBestIndex, jsonEachDisconnect, null, jsonEachOpenEach, jsonEachClose, jsonEachFilter, jsonEachNext, jsonEachEof, jsonEachColumn, jsonEachRowid, null, null, null, null, null, null, null, null, null, null, null };
		public static sbyte[] jsonIsSpace = new sbyte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
		public static sqlite3_module[] jsonTreeModule = (sqlite3_module)(new sqlite3_module[] { 0, null, jsonEachConnect, jsonEachBestIndex, jsonEachDisconnect, null, jsonEachOpenTree, jsonEachClose, jsonEachFilter, jsonEachNext, jsonEachEof, jsonEachColumn, jsonEachRowid, null, null, null, null, null, null, null, null, null, null, null };
		public static sbyte[,] jsonType = new sbyte[] { "null", "true", "false", "integer", "real", "text", "array", "object" };
		public static sbyte[] lagName = new sbyte[4];
		public static sbyte[] last_valueName = new sbyte[11];
		public static sbyte[] leadName = new sbyte[5];
		public static compareInfo[] likeInfoAlt = (compareInfo)(new compareInfo[] { 37, 95, 0, 0 };
		public static compareInfo[] likeInfoNorm = (compareInfo)(new compareInfo[] { 37, 95, 0, 1 };
		public static Mem0Global[] mem0 = (Mem0Global)(new Mem0Global[] { null, 0, 0, 0 };
		public static MemFS memdb_g = new MemFS();
		public static sqlite3_io_methods[] memdb_io_methods = (sqlite3_io_methods)(new sqlite3_io_methods[] { 3, memdbClose, memdbRead, memdbWrite, memdbTruncate, memdbSync, memdbFileSize, memdbLock, memdbLock, null, memdbFileControl, null, memdbDeviceCharacteristics, null, null, null, null, memdbFetch, memdbUnfetch };
		public static sqlite3_vfs[] memdb_vfs = (sqlite3_vfs)(new sqlite3_vfs[] { 2, 0, 1024, null, "memdb", null, memdbOpen, null, memdbAccess, memdbFullPathname, memdbDlOpen, memdbDlError, memdbDlSym, memdbDlClose, memdbRandomness, memdbSleep, null, memdbGetLastError, memdbCurrentTimeInt64, null, null, null };
		public static sqlite3_io_methods[] MemJournalMethods = (sqlite3_io_methods)(new sqlite3_io_methods[] { 1, memjrnlClose, memjrnlRead, memjrnlWrite, memjrnlTruncate, memjrnlSync, memjrnlFileSize, null, null, null, null, null, null, null, null, null, null, null, null };
		public static sbyte[] nth_valueName = new sbyte[10];
		public static sbyte[] ntileName = new sbyte[6];
		public static aTableType[] openStatTable_aTable = new aTableType[] { { "sqlite_stat1", "tbl,idx,stat" }, { "sqlite_stat4", null }, { "sqlite_stat3", null } };
		public static PCacheGlobal pcache1_g = new PCacheGlobal();
		public static sbyte[] percent_rankName = new sbyte[13];
		public static sbyte[,] pragCName = new sbyte[] { "id", "seq", "table", "from", "to", "on_update", "on_delete", "match", "cid", "name", "type", "notnull", "dflt_value", "pk", "hidden", "schema", "name", "type", "ncol", "wr", "strict", "seqno", "cid", "name", "desc", "coll", "key", "name", "builtin", "type", "enc", "narg", "flags", "tbl", "idx", "wdth", "hght", "flgs", "seq", "name", "unique", "origin", "partial", "table", "rowid", "parent", "fkid", "seq", "name", "file", "busy", "log", "checkpointed", "database", "status", "cache_size", "timeout" };
		public static sbyte[,] pragmaFunclistLine_azEnc = new sbyte[] { null, "utf8", "utf16le", "utf16be" };
		public static uint pragmaFunclistLine_mask = (uint)(0x000000800 | 0x000080000 | 0x000100000 | 0x000200000 | 0x00040000)
public static sqlite3_module[] pragmaVtabModule = (sqlite3_module)(new sqlite3_module[] { 0, null, pragmaVtabConnect, pragmaVtabBestIndex, pragmaVtabDisconnect, null, pragmaVtabOpen, pragmaVtabClose, pragmaVtabFilter, pragmaVtabNext, pragmaVtabEof, pragmaVtabColumn, pragmaVtabRowid, null, null, null, null, null, null, null, null, null, null, null };
		public static sbyte[] rankName = new sbyte[5];
		public static sbyte[] row_numberName = new sbyte[11];
		public static int sqlite3_blob_open_iLn = (int)(0)
public static VdbeOpList[] sqlite3_blob_open_openBlob = new VdbeOpList[] { { 168, 0, 0, 0 }, { 101, 0, 0, 0 }, { 33, 0, 5, 1 }, { 93, 0, 0, 1 }, { 83, 1, 0, 0 }, { 70, 0, 0, 0 } };
		public static byte[,] sqlite3_complete_trans = new byte[] { { 1, 0, 2, 3, 4, 2, 2, 2 }, { 1, 1, 2, 3, 4, 2, 2, 2 }, { 1, 2, 2, 2, 2, 2, 2, 2 }, { 1, 3, 3, 2, 4, 2, 2, 2 }, { 1, 4, 2, 2, 2, 4, 5, 2 }, { 6, 5, 5, 5, 5, 5, 5, 5 }, { 6, 6, 5, 5, 5, 5, 5, 7 }, { 1, 7, 5, 5, 5, 5, 5, 5 } };
		public static sbyte* sqlite3_data_directory = null;
		public static aFlagOpType[] sqlite3_db_config_aFlagOp = new aFlagOpType[] { { 1002, 0x00004000 }, { 1003, 0x00040000 }, { 1015, 0x80000000 }, { 1004, 0x00400000 }, { 1005, 0x00010000 }, { 1006, 0x00000800 }, { 1007, 0x00800000 }, { 1008, 0x01000000 }, { 1009, 0x02000000 }, { 1010, 0x10000000 }, { 1011, 0x00000001 | 0x08000000 }, { 1012, 0x04000000 }, { 1014, 0x20000000 }, { 1013, 0x40000000 }, { 1016, 0x00000002 }, { 1017, 0x00000080 } };
		public static ushort[] sqlite3_errmsg16_misuse = new ushort[] { 98, 97, 100, 32, 112, 97, 114, 97, 109, 101, 116, 101, 114, 32, 111, 114, 32, 111, 116, 104, 101, 114, 32, 65, 80, 73, 32, 109, 105, 115, 117, 115, 101, 0 };
		public static ushort[] sqlite3_errmsg16_outOfMem = new ushort[] { 111, 117, 116, 32, 111, 102, 32, 109, 101, 109, 111, 114, 121, 0 };
		public static sqlite3_vfs[] sqlite3_os_init_winLongPathNolockVfs = (sqlite3_vfs)(new sqlite3_vfs[] { 3, sizeof(winFile), (sizeof(ushort) * (32767)), null, "win32-longpath-none", winNolockAppData, winOpen, winDelete, winAccess, winFullPathname, winDlOpen, winDlError, winDlSym, winDlClose, winRandomness, winSleep, winCurrentTime, winGetLastError, winCurrentTimeInt64, winSetSystemCall, winGetSystemCall, winNextSystemCall }; )

public static sqlite3_vfs[] sqlite3_os_init_winLongPathVfs = (sqlite3_vfs)(new sqlite3_vfs[] { 3, sizeof(winFile), (sizeof(ushort) * (32767)), null, "win32-longpath", winAppData, winOpen, winDelete, winAccess, winFullPathname, winDlOpen, winDlError, winDlSym, winDlClose, winRandomness, winSleep, winCurrentTime, winGetLastError, winCurrentTimeInt64, winSetSystemCall, winGetSystemCall, winNextSystemCall }; )

public static sqlite3_vfs[] sqlite3_os_init_winNolockVfs = (sqlite3_vfs)(new sqlite3_vfs[] { 3, sizeof(winFile), ((260) * 4), null, "win32-none", winNolockAppData, winOpen, winDelete, winAccess, winFullPathname, winDlOpen, winDlError, winDlSym, winDlClose, winRandomness, winSleep, winCurrentTime, winGetLastError, winCurrentTimeInt64, winSetSystemCall, winGetSystemCall, winNextSystemCall }; )

public static sqlite3_vfs[] sqlite3_os_init_winVfs = (sqlite3_vfs)(new sqlite3_vfs[] { 3, sizeof(winFile), ((260) * 4), null, "win32", winAppData, winOpen, winDelete, winAccess, winFullPathname, winDlOpen, winDlError, winDlSym, winDlClose, winRandomness, winSleep, winCurrentTime, winGetLastError, winCurrentTimeInt64, winSetSystemCall, winGetSystemCall, winNextSystemCall }; )

public static int sqlite3_os_type = (int)(0);
		public static sbyte[] sqlite3_str_vappendf_zOrd = new sbyte[9];
		public static sbyte* sqlite3_temp_directory = null;
		public static byte[] sqlite3_value_type_aType = new byte[] { 4, 5, 3, 5, 1, 5, 1, 5, 2, 5, 2, 5, 1, 5, 1, 5, 4, 5, 3, 5, 1, 5, 1, 5, 2, 5, 2, 5, 1, 5, 1, 5, 2, 5, 3, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 4, 5, 3, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5 };
		public static sbyte[] sqlite3_version = new sbyte[7];
		public static byte[] sqlite3_vtab_on_conflict_aMap = new byte[] { 1, 4, 3, 2, 5 };
		public static byte* sqlite3aEQb = &sqlite3UpperToLower[256 + 6 - 52];
		public static byte* sqlite3aGTb = &sqlite3UpperToLower[256 + 12 - 52];
		public static byte* sqlite3aLTb = &sqlite3UpperToLower[256 - 52];
		public static FuncDef[] sqlite3AlterFunctions_aAlterTableFuncs = new FuncDef[] { { 9, 0x00800000 | 0x00040000 | 1 | 0x0800, null, null, renameColumnFunc, null, null, null, "sqlite_rename_column", { null } }, { 7, 0x00800000 | 0x00040000 | 1 | 0x0800, null, null, renameTableFunc, null, null, null, "sqlite_rename_table", { null } }, { 7, 0x00800000 | 0x00040000 | 1 | 0x0800, null, null, renameTableTest, null, null, null, "sqlite_rename_test", { null } }, { 3, 0x00800000 | 0x00040000 | 1 | 0x0800, null, null, dropColumnFunc, null, null, null, "sqlite_drop_column", { null } }, { 2, 0x00800000 | 0x00040000 | 1 | 0x0800, null, null, renameQuotefixFunc, null, null, null, "sqlite_rename_quotefix", { null } } };
		public static sqlite3_api_routines[] sqlite3Apis = (sqlite3_api_routines)(new sqlite3_api_routines[] { sqlite3_aggregate_context, sqlite3_aggregate_count, sqlite3_bind_blob, sqlite3_bind_double, sqlite3_bind_int, sqlite3_bind_int64, sqlite3_bind_null, sqlite3_bind_parameter_count, sqlite3_bind_parameter_index, sqlite3_bind_parameter_name, sqlite3_bind_text, sqlite3_bind_text16, sqlite3_bind_value, sqlite3_busy_handler, sqlite3_busy_timeout, sqlite3_changes, sqlite3_close, sqlite3_collation_needed, sqlite3_collation_needed16, sqlite3_column_blob, sqlite3_column_bytes, sqlite3_column_bytes16, sqlite3_column_count, null, null, sqlite3_column_decltype, sqlite3_column_decltype16, sqlite3_column_double, sqlite3_column_int, sqlite3_column_int64, sqlite3_column_name, sqlite3_column_name16, null, null, null, null, sqlite3_column_text, sqlite3_column_text16, sqlite3_column_type, sqlite3_column_value, sqlite3_commit_hook, sqlite3_complete, sqlite3_complete16, sqlite3_create_collation, sqlite3_create_collation16, sqlite3_create_function, sqlite3_create_function16, sqlite3_create_module, sqlite3_data_count, sqlite3_db_handle, sqlite3_declare_vtab, sqlite3_enable_shared_cache, sqlite3_errcode, sqlite3_errmsg, sqlite3_errmsg16, sqlite3_exec, sqlite3_expired, sqlite3_finalize, sqlite3_free, sqlite3_free_table, sqlite3_get_autocommit, sqlite3_get_auxdata, sqlite3_get_table, null, sqlite3_interrupt, sqlite3_last_insert_rowid, sqlite3_libversion, sqlite3_libversion_number, sqlite3_malloc, sqlite3_mprintf, sqlite3_open, sqlite3_open16, sqlite3_prepare, sqlite3_prepare16, sqlite3_profile, sqlite3_progress_handler, sqlite3_realloc, sqlite3_reset, sqlite3_result_blob, sqlite3_result_double, sqlite3_result_error, sqlite3_result_error16, sqlite3_result_int, sqlite3_result_int64, sqlite3_result_null, sqlite3_result_text, sqlite3_result_text16, sqlite3_result_text16be, sqlite3_result_text16le, sqlite3_result_value, sqlite3_rollback_hook, sqlite3_set_authorizer, sqlite3_set_auxdata, sqlite3_snprintf, sqlite3_step, sqlite3_table_column_metadata, sqlite3_thread_cleanup, sqlite3_total_changes, sqlite3_trace, sqlite3_transfer_bindings, sqlite3_update_hook, sqlite3_user_data, sqlite3_value_blob, sqlite3_value_bytes, sqlite3_value_bytes16, sqlite3_value_double, sqlite3_value_int, sqlite3_value_int64, sqlite3_value_numeric_type, sqlite3_value_text, sqlite3_value_text16, sqlite3_value_text16be, sqlite3_value_text16le, sqlite3_value_type, sqlite3_vmprintf, sqlite3_overload_function, sqlite3_prepare_v2, sqlite3_prepare16_v2, sqlite3_clear_bindings, sqlite3_create_module_v2, sqlite3_bind_zeroblob, sqlite3_blob_bytes, sqlite3_blob_close, sqlite3_blob_open, sqlite3_blob_read, sqlite3_blob_write, sqlite3_create_collation_v2, sqlite3_file_control, sqlite3_memory_highwater, sqlite3_memory_used, sqlite3_mutex_alloc, sqlite3_mutex_enter, sqlite3_mutex_free, sqlite3_mutex_leave, sqlite3_mutex_try, sqlite3_open_v2, sqlite3_release_memory, sqlite3_result_error_nomem, sqlite3_result_error_toobig, sqlite3_sleep, sqlite3_soft_heap_limit, sqlite3_vfs_find, sqlite3_vfs_register, sqlite3_vfs_unregister, sqlite3_threadsafe, sqlite3_result_zeroblob, sqlite3_result_error_code, sqlite3_test_control, sqlite3_randomness, sqlite3_context_db_handle, sqlite3_extended_result_codes, sqlite3_limit, sqlite3_next_stmt, sqlite3_sql, sqlite3_status, sqlite3_backup_finish, sqlite3_backup_init, sqlite3_backup_pagecount, sqlite3_backup_remaining, sqlite3_backup_step, sqlite3_compileoption_get, sqlite3_compileoption_used, sqlite3_create_function_v2, sqlite3_db_config, sqlite3_db_mutex, sqlite3_db_status, sqlite3_extended_errcode, sqlite3_log, sqlite3_soft_heap_limit64, sqlite3_sourceid, sqlite3_stmt_status, sqlite3_strnicmp, null, sqlite3_wal_autocheckpoint, sqlite3_wal_checkpoint, sqlite3_wal_hook, sqlite3_blob_reopen, sqlite3_vtab_config, sqlite3_vtab_on_conflict, sqlite3_close_v2, sqlite3_db_filename, sqlite3_db_readonly, sqlite3_db_release_memory, sqlite3_errstr, sqlite3_stmt_busy, sqlite3_stmt_readonly, sqlite3_stricmp, sqlite3_uri_boolean, sqlite3_uri_int64, sqlite3_uri_parameter, sqlite3_vsnprintf, sqlite3_wal_checkpoint_v2, sqlite3_auto_extension, sqlite3_bind_blob64, sqlite3_bind_text64, sqlite3_cancel_auto_extension, sqlite3_load_extension, sqlite3_malloc64, sqlite3_msize, sqlite3_realloc64, sqlite3_reset_auto_extension, sqlite3_result_blob64, sqlite3_result_text64, sqlite3_strglob, sqlite3_value_dup, sqlite3_value_free, sqlite3_result_zeroblob64, sqlite3_bind_zeroblob64, sqlite3_value_subtype, sqlite3_result_subtype, sqlite3_status64, sqlite3_strlike, sqlite3_db_cacheflush, sqlite3_system_errno, sqlite3_trace_v2, sqlite3_expanded_sql, sqlite3_set_last_insert_rowid, sqlite3_prepare_v3, sqlite3_prepare16_v3, sqlite3_bind_pointer, sqlite3_result_pointer, sqlite3_value_pointer, sqlite3_vtab_nochange, sqlite3_value_nochange, sqlite3_vtab_collation, sqlite3_keyword_count, sqlite3_keyword_name, sqlite3_keyword_check, sqlite3_str_new, sqlite3_str_finish, sqlite3_str_appendf, sqlite3_str_vappendf, sqlite3_str_append, sqlite3_str_appendall, sqlite3_str_appendchar, sqlite3_str_reset, sqlite3_str_errcode, sqlite3_str_length, sqlite3_str_value, sqlite3_create_window_function, null, sqlite3_stmt_isexplain, sqlite3_value_frombind, sqlite3_drop_modules, sqlite3_hard_heap_limit64, sqlite3_uri_key, sqlite3_filename_database, sqlite3_filename_journal, sqlite3_filename_wal, sqlite3_create_filename, sqlite3_free_filename, sqlite3_database_file_object, sqlite3_txn_state, sqlite3_changes64, sqlite3_total_changes64, sqlite3_autovacuum_pages, sqlite3_error_offset, sqlite3_vtab_rhs_value, sqlite3_vtab_distinct, sqlite3_vtab_in, sqlite3_vtab_in_first, sqlite3_vtab_in_next };
		public static FuncDef[] sqlite3Attach_attach_func = (FuncDef)(new FuncDef[] { 3, 1, null, null, attachFunc, null, null, null, "sqlite_attach", { null } }; )

public static sqlite3AutoExtList[] sqlite3Autoext = (sqlite3AutoExtList)(new sqlite3AutoExtList[] { 0, null };
		public static VdbeOpList[] sqlite3AutoincrementBegin_autoInc = new VdbeOpList[] { { 74, 0, 0, 0 }, { 38, 0, 10, 0 }, { 93, 0, 0, 0 }, { 52, 0, 9, 0 }, { 134, 0, 0, 0 }, { 93, 0, 1, 0 }, { 85, 0, 0, 0 }, { 79, 0, 0, 0 }, { 11, 0, 11, 0 }, { 5, 0, 2, 0 }, { 71, 0, 0, 0 }, { 121, 0, 0, 0 } };
		public static int sqlite3AutoincrementBegin_iLn = (int)(0)
public static sbyte[,] sqlite3azCompileOpt = new sbyte[] { "ATOMIC_INTRINSICS=1", "COMPILER=clang-13.0.0", "DEFAULT_AUTOVACUUM", "DEFAULT_CACHE_SIZE=-2000", "DEFAULT_FILE_FORMAT=4", "DEFAULT_JOURNAL_SIZE_LIMIT=-1", "DEFAULT_MMAP_SIZE=0", "DEFAULT_PAGE_SIZE=4096", "DEFAULT_PCACHE_INITSZ=20", "DEFAULT_RECURSIVE_TRIGGERS", "DEFAULT_SECTOR_SIZE=4096", "DEFAULT_SYNCHRONOUS=2", "DEFAULT_WAL_AUTOCHECKPOINT=1000", "DEFAULT_WAL_SYNCHRONOUS=2", "DEFAULT_WORKER_THREADS=0", "MALLOC_SOFT_LIMIT=1024", "MAX_ATTACHED=10", "MAX_COLUMN=2000", "MAX_COMPOUND_SELECT=500", "MAX_DEFAULT_PAGE_SIZE=8192", "MAX_EXPR_DEPTH=1000", "MAX_FUNCTION_ARG=127", "MAX_LENGTH=1000000000", "MAX_LIKE_PATTERN_LENGTH=50000", "MAX_MMAP_SIZE=0x7fff0000", "MAX_PAGE_COUNT=1073741823", "MAX_PAGE_SIZE=65536", "MAX_SQL_LENGTH=1000000000", "MAX_TRIGGER_DEPTH=1000", "MAX_VARIABLE_NUMBER=32766", "MAX_VDBE_OP=250000000", "MAX_WORKER_THREADS=8", "MUTEX_W32", "SYSTEM_MALLOC", "TEMP_STORE=1", "THREADSAFE=1" };
		public static byte sqlite3BtreeFakeValidCursor_fakeCursor = (byte)(0);
;
	public static FuncDefHash sqlite3BuiltinFunctions = new FuncDefHash();
		public static Sqlite3Config[] sqlite3Config = (Sqlite3Config)(new Sqlite3Config[] { 1, 1, (1) == (1), 0, 1, 0, 1, 0x7ffffffe, 0, 1200, 40, (64 * 1024), { null, null, null, null, null, null, null, null }, { null, null, null, null, null, null, null, null, null }, { 0, null, null, null, null, null, null, null, null, null, null, null, null }, 0, 0, 0, 0, 0, 0x7fff0000, 0, 0, 20, 0, 0, 250, 0, 0, 0, 0, 0, 0, null, null, null, 1073741824, null, 0, null, 0x7ffffffe, 0x7fffffff, 0 };
		public static byte[] sqlite3CtypeMap = new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x80, 0x00, 0x40, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x80, 0x00, 0x00, 0x00, 0x40, 0x80, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40 };
		public static sqlite3_mutex_methods[] sqlite3DefaultMutex_sMutex = (sqlite3_mutex_methods)(new sqlite3_mutex_methods[] { winMutexInit, winMutexEnd, winMutexAlloc, winMutexFree, winMutexEnter, winMutexTry, winMutexLeave, null, null }; )

public static short[] sqlite3DefaultRowEst_aVal = new short[] { 33, 32, 30, 28, 26 };
		public static FuncDef[] sqlite3Detach_detach_func = (FuncDef)(new FuncDef[] { 1, 1, null, null, detachFunc, null, null, null, "sqlite_detach", { null } }; )

public static sbyte[,] sqlite3ErrStr_aMsg = new sbyte[] { "not an error", "SQL logic error", null, "access permission denied", "query aborted", "database is locked", "database table is locked", "out of memory", "attempt to write a readonly database", "interrupted", "disk I/O error", "database disk image is malformed", "unknown operation", "database or disk is full", "unable to open database file", "locking protocol", null, "database schema has changed", "string or blob too big", "constraint failed", "datatype mismatch", "bad parameter or other API misuse", null, "authorization denied", null, "column index out of range", "file is not a database", "notification message", "warning message" };
		public static sbyte[] sqlite3ExprCodeTarget_zAff = new sbyte[8];
		public static BenignMallocHooks[] sqlite3Hooks = (BenignMallocHooks)(new BenignMallocHooks[] { null, null };
		public static aKeywordType[] sqlite3JoinType_aKeyword = new aKeywordType[] { { 0, 7, 0x0004 }, { 6, 4, 0x0008 | 0x0020 }, { 10, 5, 0x0020 }, { 14, 5, 0x0010 | 0x0020 }, { 19, 4, 0x0008 | 0x0010 | 0x0020 }, { 23, 5, 0x0001 }, { 28, 5, 0x0001 | 0x0002 } };
		public static sbyte[] sqlite3JoinType_zKeyText = new sbyte[34];
		public static sbyte[,] sqlite3JournalModename_azModeName = new sbyte[] { "delete", "persist", "off", "truncate", "memory", "wal" };
		public static aModType[] sqlite3JsonTableFunctions_aMod = new aModType[] { { "json_each", jsonEachModule }, { "json_tree", jsonTreeModule } };
		public static sbyte[,] sqlite3LoadExtension_azEndings = new sbyte[] { "dll" };
		public static short[] sqlite3LogEst_a = new short[] { 0, 2, 3, 5, 6, 7, 8, 9 };
		public static byte[] sqlite3LogEstAdd_x = new byte[] { 10, 10, 9, 9, 8, 8, 7, 7, 7, 6, 6, 6, 5, 5, 5, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2 };
		public static sqlite3_mem_methods[] sqlite3MemSetDefault_defaultMethods = (sqlite3_mem_methods)(new sqlite3_mem_methods[] { sqlite3MemMalloc, sqlite3MemFree, sqlite3MemRealloc, sqlite3MemSize, sqlite3MemRoundup, sqlite3MemInit, sqlite3MemShutdown, null }; )

public static sqlite3_mutex_methods[] sqlite3NoopMutex_sMutex = (sqlite3_mutex_methods)(new sqlite3_mutex_methods[] { noopMutexInit, noopMutexEnd, noopMutexAlloc, noopMutexFree, noopMutexEnter, noopMutexTry, noopMutexLeave, null, null }; )

public static sqlite3_str[] sqlite3OomStr = (sqlite3_str)(new sqlite3_str[] { null, null, 0, 0, 0, 7, 0 };
		public static sbyte[,] sqlite3OpcodeName_azName = new sbyte[] { "Savepoint", "AutoCommit", "Transaction", "SorterNext", "Prev", "Next", "Checkpoint", "JournalMode", "Vacuum", "VFilter", "VUpdate", "Goto", "Gosub", "InitCoroutine", "Yield", "MustBeInt", "Jump", "Once", "If", "Not", "IfNot", "IsNullOrType", "IfNullRow", "SeekLT", "SeekLE", "SeekGE", "SeekGT", "IfNotOpen", "IfNoHope", "NoConflict", "NotFound", "Found", "SeekRowid", "NotExists", "Last", "IfSmaller", "SorterSort", "Sort", "Rewind", "IdxLE", "IdxGT", "IdxLT", "IdxGE", "Or", "And", "RowSetRead", "RowSetTest", "Program", "FkIfZero", "IfPos", "IsNull", "NotNull", "Ne", "Eq", "Gt", "Le", "Lt", "Ge", "ElseEq", "IfNotZero", "DecrJumpZero", "IncrVacuum", "VNext", "Filter", "Init", "PureFunc", "Function", "Return", "EndCoroutine", "HaltIfNull", "Halt", "Integer", "Int64", "String", "Null", "SoftNull", "Blob", "Variable", "Move", "Copy", "SCopy", "IntCopy", "FkCheck", "ResultRow", "CollSeq", "AddImm", "RealAffinity", "Cast", "Permutation", "Compare", "IsTrue", "ZeroOrNull", "Offset", "Column", "TypeCheck", "Affinity", "MakeRecord", "Count", "ReadCookie", "SetCookie", "ReopenIdx", "OpenRead", "BitAnd", "BitOr", "ShiftLeft", "ShiftRight", "Add", "Subtract", "Multiply", "Divide", "Remainder", "Concat", "OpenWrite", "OpenDup", "BitNot", "OpenAutoindex", "OpenEphemeral", "String8", "SorterOpen", "SequenceTest", "OpenPseudo", "Close", "ColumnsUsed", "SeekScan", "SeekHit", "Sequence", "NewRowid", "Insert", "RowCell", "Delete", "ResetCount", "SorterCompare", "SorterData", "RowData", "Rowid", "NullRow", "SeekEnd", "IdxInsert", "SorterInsert", "IdxDelete", "DeferredSeek", "IdxRowid", "FinishSeek", "Destroy", "Clear", "ResetSorter", "CreateBtree", "SqlExec", "ParseSchema", "LoadAnalysis", "DropTable", "DropIndex", "DropTrigger", "Real", "IntegrityCk", "RowSetAdd", "Param", "FkCounter", "MemMax", "OffsetLimit", "AggInverse", "AggStep", "AggStep1", "AggValue", "AggFinal", "Expire", "CursorLock", "CursorUnlock", "TableLock", "VBegin", "VCreate", "VDestroy", "VOpen", "VInitIn", "VColumn", "VRename", "Pagecount", "MaxPgcnt", "FilterAdd", "Trace", "CursorHint", "ReleaseReg", "Noop", "Explain", "Abortable" };
		public static byte[] sqlite3OpcodeProperty = new byte[] { 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x00, 0x10, 0x00, 0x01, 0x00, 0x01, 0x01, 0x01, 0x03, 0x03, 0x01, 0x01, 0x03, 0x12, 0x03, 0x03, 0x01, 0x09, 0x09, 0x09, 0x09, 0x01, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x26, 0x26, 0x23, 0x0b, 0x01, 0x01, 0x03, 0x03, 0x03, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x01, 0x03, 0x03, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x02, 0x02, 0x08, 0x00, 0x10, 0x10, 0x10, 0x10, 0x00, 0x10, 0x10, 0x00, 0x00, 0x10, 0x10, 0x00, 0x00, 0x00, 0x02, 0x02, 0x02, 0x00, 0x00, 0x12, 0x1e, 0x20, 0x00, 0x00, 0x00, 0x00, 0x10, 0x10, 0x00, 0x00, 0x00, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x26, 0x00, 0x00, 0x12, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x04, 0x04, 0x00, 0x00, 0x10, 0x00, 0x10, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x06, 0x10, 0x00, 0x04, 0x1a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
		public static int sqlite3OpenTempDatabase_flags = (int)(0x00000002 | 0x00000004 | 0x00000010 | 0x00000008 | 0x00000200)
public static sbyte[] sqlite3PagerFilename_zFake = new sbyte[] { 0, 0, 0, 0, 0, 0, 0, 0 };
		public static OpenMode[] sqlite3ParseUri_aCacheMode = new OpenMode[] { { "shared", 0x00020000 }, { "private", 0x00040000 }, { null, 0 } };
		public static OpenMode[] sqlite3ParseUri_aOpenMode = new OpenMode[] { { "ro", 0x00000001 }, { "rw", 0x00000002 }, { "rwc", 0x00000002 | 0x00000004 }, { "memory", 0x00000080 }, { null, 0 } };
		public static sqlite3_pcache_methods2[] sqlite3PCacheSetDefault_defaultMethods = (sqlite3_pcache_methods2)(new sqlite3_pcache_methods2[] { 1, null, pcache1Init, pcache1Shutdown, pcache1Create, pcache1Cachesize, pcache1Pagecount, pcache1Fetch, pcache1Unpin, pcache1Rekey, pcache1Truncate, pcache1Destroy, pcache1Shrink }; )

public static int sqlite3PendingByte = (int)(0x40000000);
		public static double[] sqlite3Pow10_x = new double[] { 1.0e+001, 1.0e+002, 1.0e+004, 1.0e+008, 1.0e+016, 1.0e+032, 1.0e+064, 1.0e+128, 1.0e+256 };
		public static EncName[] sqlite3Pragma_encnames = new EncName[] { { "UTF8", 1 }, { "UTF-8", 1 }, { "UTF-16le", 2 }, { "UTF-16be", 3 }, { "UTF16le", 2 }, { "UTF16be", 3 }, { "UTF-16", 0 }, { "UTF16", 0 }, { null, 0 } };
		public static VdbeOpList[] sqlite3Pragma_endCode = new VdbeOpList[] { { 85, 1, 0, 0 }, { 59, 1, 4, 0 }, { 117, 0, 3, 0 }, { 83, 3, 1, 0 }, { 70, 0, 0, 0 }, { 117, 0, 3, 0 }, { 11, 0, 3, 0 } };
		public static VdbeOpList[] sqlite3Pragma_getCacheSize = new VdbeOpList[] { { 2, 0, 0, 0 }, { 98, 0, 1, 3 }, { 49, 1, 8, 0 }, { 71, 0, 2, 0 }, { 107, 1, 2, 1 }, { 49, 1, 8, 0 }, { 71, 0, 1, 0 }, { 182, 0, 0, 0 }, { 83, 1, 1, 0 } };
		public static int sqlite3Pragma_iLn = (int)(0)
public static VdbeOpList[] sqlite3Pragma_readCookie = new VdbeOpList[] { { 2, 0, 0, 0 }, { 98, 0, 1, 0 }, { 83, 1, 1, 0 } };
		public static VdbeOpList[] sqlite3Pragma_setCookie = new VdbeOpList[] { { 2, 0, 1, 0 }, { 99, 0, 0, 0 } };
		public static VdbeOpList[] sqlite3Pragma_setMeta6 = new VdbeOpList[] { { 2, 0, 1, 0 }, { 98, 0, 1, 4 }, { 18, 1, 0, 0 }, { 70, 0, 2, 0 }, { 99, 0, 7, 0 } };
		public static sqlite3PrngType sqlite3Prng = (sqlite3PrngType)(256);
		public static FuncDef[] sqlite3RegisterBuiltinFunctions_aBuiltinFunc = new FuncDef[] { { 2, 0x00800000 | 1 | 0x00040000 | 0x4000 | 0x00400000 | 0x0800 | (0), ((void*)((long)(1))), null, versionFunc, null, null, null, "implies_nonnull_row", { null } }, { 2, 0x00800000 | 1 | 0x00040000 | 0x4000 | 0x00400000 | 0x0800 | (0), ((void*)((long)(3))), null, versionFunc, null, null, null, "expr_compare", { null } }, { 2, 0x00800000 | 1 | 0x00040000 | 0x4000 | 0x00400000 | 0x0800 | (0), ((void*)((long)(2))), null, versionFunc, null, null, null, "expr_implies_expr", { null } }, { 1, 0x00800000 | 1 | 0x00040000 | 0x4000 | 0x00400000 | 0x0800 | (0), ((void*)((long)(4))), null, versionFunc, null, null, null, "affinity", { null } }, { 1, 0x00800000 | 1 | 0x000080000 | 0x00200000, ((void*)((long)(0))), null, loadExt, null, null, null, "load_extension", { null } }, { 2, 0x00800000 | 1 | 0x000080000 | 0x00200000, ((void*)((long)(0))), null, loadExt, null, null, null, "load_extension", { null } }, { 1, 0x00800000 | 0x2000 | 1, null, null, compileoptionusedFunc, null, null, null, "sqlite_compileoption_used", { null } }, { 1, 0x00800000 | 0x2000 | 1, null, null, compileoptiongetFunc, null, null, null, "sqlite_compileoption_get", { null } }, { 1, 0x00800000 | 1 | 0x00400000 | 0x0800 | (0x0400), ((void*)((long)(99))), null, versionFunc, null, null, null, "unlikely", { null } }, { 2, 0x00800000 | 1 | 0x00400000 | 0x0800 | (0x0400), ((void*)((long)(99))), null, versionFunc, null, null, null, "likelihood", { null } }, { 1, 0x00800000 | 1 | 0x00400000 | 0x0800 | (0x0400), ((void*)((long)(99))), null, versionFunc, null, null, null, "likely", { null } }, { 1, 0x00800000 | 0x0800 | 1 | (0 * 0x0020), ((void*)((long)(1))), null, trimFunc, null, null, null, "ltrim", { null } }, { 2, 0x00800000 | 0x0800 | 1 | (0 * 0x0020), ((void*)((long)(1))), null, trimFunc, null, null, null, "ltrim", { null } }, { 1, 0x00800000 | 0x0800 | 1 | (0 * 0x0020), ((void*)((long)(2))), null, trimFunc, null, null, null, "rtrim", { null } }, { 2, 0x00800000 | 0x0800 | 1 | (0 * 0x0020), ((void*)((long)(2))), null, trimFunc, null, null, null, "rtrim", { null } }, { 1, 0x00800000 | 0x0800 | 1 | (0 * 0x0020), ((void*)((long)(3))), null, trimFunc, null, null, null, "trim", { null } }, { 2, 0x00800000 | 0x0800 | 1 | (0 * 0x0020), ((void*)((long)(3))), null, trimFunc, null, null, null, "trim", { null } }, { -1, 0x00800000 | 0x0800 | 1 | (1 * 0x0020), ((void*)((long)(0))), null, minmaxFunc, null, null, null, "min", { null } }, { 0, 0x00800000 | 0x0800 | 1 | (1 * 0x0020), ((void*)((long)(0))), null, null, null, null, null, "min", { null } }, { 1, 0x00800000 | 1 | (1 * 0x0020) | 0x1000 | 0x08000000, ((void*)((long)(0))), null, minmaxStep, minMaxFinalize, minMaxValue, null, "min", { null } }, { -1, 0x00800000 | 0x0800 | 1 | (1 * 0x0020), ((void*)((long)(1))), null, minmaxFunc, null, null, null, "max", { null } }, { 0, 0x00800000 | 0x0800 | 1 | (1 * 0x0020), ((void*)((long)(1))), null, null, null, null, null, "max", { null } }, { 1, 0x00800000 | 1 | (1 * 0x0020) | 0x1000 | 0x08000000, ((void*)((long)(1))), null, minmaxStep, minMaxFinalize, minMaxValue, null, "max", { null } }, { 1, 0x00800000 | 0x0800 | 1 | (0 * 0x0020) | 0x0080, ((void*)((long)(0))), null, typeofFunc, null, null, null, "typeof", { null } }, { 1, 0x00800000 | 0x0800 | 1 | (0 * 0x0020) | 0x0080, ((void*)((long)(0))), null, subtypeFunc, null, null, null, "subtype", { null } }, { 1, 0x00800000 | 0x0800 | 1 | (0 * 0x0020) | 0x0040, ((void*)((long)(0))), null, lengthFunc, null, null, null, "length", { null } }, { 2, 0x00800000 | 0x0800 | 1 | (0 * 0x0020), ((void*)((long)(0))), null, instrFunc, null, null, null, "instr", { null } }, { -1, 0x00800000 | 0x0800 | 1 | (0 * 0x0020), ((void*)((long)(0))), null, printfFunc, null, null, null, "printf", { null } }, { -1, 0x00800000 | 0x0800 | 1 | (0 * 0x0020), ((void*)((long)(0))), null, printfFunc, null, null, null, "format", { null } }, { 1, 0x00800000 | 0x0800 | 1 | (0 * 0x0020), ((void*)((long)(0))), null, unicodeFunc, null, null, null, "unicode", { null } }, { -1, 0x00800000 | 0x0800 | 1 | (0 * 0x0020), ((void*)((long)(0))), null, charFunc, null, null, null, "char", { null } }, { 1, 0x00800000 | 0x0800 | 1 | (0 * 0x0020), ((void*)((long)(0))), null, absFunc, null, null, null, "abs", { null } }, { 1, 0x00800000 | 0x0800 | 1 | (0 * 0x0020), ((void*)((long)(0))), null, roundFunc, null, null, null, "round", { null } }, { 2, 0x00800000 | 0x0800 | 1 | (0 * 0x0020), ((void*)((long)(0))), null, roundFunc, null, null, null, "round", { null } }, { 1, 0x00800000 | 0x0800 | 1 | (0 * 0x0020), ((void*)((long)(0))), null, upperFunc, null, null, null, "upper", { null } }, { 1, 0x00800000 | 0x0800 | 1 | (0 * 0x0020), ((void*)((long)(0))), null, lowerFunc, null, null, null, "lower", { null } }, { 1, 0x00800000 | 0x0800 | 1 | (0 * 0x0020), ((void*)((long)(0))), null, hexFunc, null, null, null, "hex", { null } }, { 2, 0x00800000 | 1 | 0x00400000 | 0x0800 | (0), ((void*)((long)(0))), null, versionFunc, null, null, null, "ifnull", { null } }, { 0, 0x00800000 | 1 | (0 * 0x0020), ((void*)((long)(0))), null, randomFunc, null, null, null, "random", { null } }, { 1, 0x00800000 | 1 | (0 * 0x0020), ((void*)((long)(0))), null, randomBlob, null, null, null, "randomblob", { null } }, { 2, 0x00800000 | 0x0800 | 1 | (1 * 0x0020), ((void*)((long)(0))), null, nullifFunc, null, null, null, "nullif", { null } }, { 0, 0x00800000 | 0x2000 | 1, null, null, versionFunc, null, null, null, "sqlite_version", { null } }, { 0, 0x00800000 | 0x2000 | 1, null, null, sourceidFunc, null, null, null, "sqlite_source_id", { null } }, { 2, 0x00800000 | 0x0800 | 1 | (0 * 0x0020), ((void*)((long)(0))), null, errlogFunc, null, null, null, "sqlite_log", { null } }, { 1, 0x00800000 | 0x0800 | 1 | (0 * 0x0020), ((void*)((long)(0))), null, quoteFunc, null, null, null, "quote", { null } }, { 0, 0x00800000 | 1 | (0 * 0x0020), ((void*)((long)(0))), null, last_insert_rowid, null, null, null, "last_insert_rowid", { null } }, { 0, 0x00800000 | 1 | (0 * 0x0020), ((void*)((long)(0))), null, changes, null, null, null, "changes", { null } }, { 0, 0x00800000 | 1 | (0 * 0x0020), ((void*)((long)(0))), null, total_changes, null, null, null, "total_changes", { null } }, { 3, 0x00800000 | 0x0800 | 1 | (0 * 0x0020), ((void*)((long)(0))), null, replaceFunc, null, null, null, "replace", { null } }, { 1, 0x00800000 | 0x0800 | 1 | (0 * 0x0020), ((void*)((long)(0))), null, zeroblobFunc, null, null, null, "zeroblob", { null } }, { 2, 0x00800000 | 0x0800 | 1 | (0 * 0x0020), ((void*)((long)(0))), null, substrFunc, null, null, null, "substr", { null } }, { 3, 0x00800000 | 0x0800 | 1 | (0 * 0x0020), ((void*)((long)(0))), null, substrFunc, null, null, null, "substr", { null } }, { 2, 0x00800000 | 0x0800 | 1 | (0 * 0x0020), ((void*)((long)(0))), null, substrFunc, null, null, null, "substring", { null } }, { 3, 0x00800000 | 0x0800 | 1 | (0 * 0x0020), ((void*)((long)(0))), null, substrFunc, null, null, null, "substring", { null } }, { 1, 0x00800000 | 1 | (0 * 0x0020) | 0, ((void*)((long)(0))), null, sumStep, sumFinalize, sumFinalize, sumInverse, "sum", { null } }, { 1, 0x00800000 | 1 | (0 * 0x0020) | 0, ((void*)((long)(0))), null, sumStep, totalFinalize, totalFinalize, sumInverse, "total", { null } }, { 1, 0x00800000 | 1 | (0 * 0x0020) | 0, ((void*)((long)(0))), null, sumStep, avgFinalize, avgFinalize, sumInverse, "avg", { null } }, { 0, 0x00800000 | 1 | (0 * 0x0020) | 0x0100 | 0x08000000, ((void*)((long)(0))), null, countStep, countFinalize, countFinalize, countInverse, "count", { null } }, { 1, 0x00800000 | 1 | (0 * 0x0020) | 0x08000000, ((void*)((long)(0))), null, countStep, countFinalize, countFinalize, countInverse, "count", { null } }, { 1, 0x00800000 | 1 | (0 * 0x0020) | 0, ((void*)((long)(0))), null, groupConcatStep, groupConcatFinalize, groupConcatValue, groupConcatInverse, "group_concat", { null } }, { 2, 0x00800000 | 1 | (0 * 0x0020) | 0, ((void*)((long)(0))), null, groupConcatStep, groupConcatFinalize, groupConcatValue, groupConcatInverse, "group_concat", { null } }, { 2, 0x00800000 | 0x0800 | 1 | 0x0004 | 0x0008, (void*)(&globInfo), null, likeFunc, null, null, null, "glob", { null } }, { 2, 0x00800000 | 0x0800 | 1 | 0x0004, (void*)(&likeInfoNorm), null, likeFunc, null, null, null, "like", { null } }, { 3, 0x00800000 | 0x0800 | 1 | 0x0004, (void*)(&likeInfoNorm), null, likeFunc, null, null, null, "like", { null } }, { 1, 0x00800000 | 0x0800 | 1 | (0 * 0x0020), ((void*)((long)(0))), null, null, null, null, null, "coalesce", { null } }, { 0, 0x00800000 | 0x0800 | 1 | (0 * 0x0020), ((void*)((long)(0))), null, null, null, null, null, "coalesce", { null } }, { 1, 0x00800000 | 0x0800 | 1 | (0 * 0x0020), ((void*)((long)(0))), null, signFunc, null, null, null, "sign", { null } }, { -1, 0x00800000 | 1 | 0x00400000 | 0x0800 | (0), ((void*)((long)(0))), null, versionFunc, null, null, null, "coalesce", { null } }, { 3, 0x00800000 | 1 | 0x00400000 | 0x0800 | (0), ((void*)((long)(5))), null, versionFunc, null, null, null, "iif", { null } } };
		public static FuncDef[] sqlite3RegisterDateTimeFunctions_aDateTimeFuncs = new FuncDef[] { { -1, 0x00800000 | 0x2000 | 1 | 0x0800, (void*)(sqlite3Config), null, juliandayFunc, null, null, null, "julianday", { null } }, { -1, 0x00800000 | 0x2000 | 1 | 0x0800, (void*)(sqlite3Config), null, unixepochFunc, null, null, null, "unixepoch", { null } }, { -1, 0x00800000 | 0x2000 | 1 | 0x0800, (void*)(sqlite3Config), null, dateFunc, null, null, null, "date", { null } }, { -1, 0x00800000 | 0x2000 | 1 | 0x0800, (void*)(sqlite3Config), null, timeFunc, null, null, null, "time", { null } }, { -1, 0x00800000 | 0x2000 | 1 | 0x0800, (void*)(sqlite3Config), null, datetimeFunc, null, null, null, "datetime", { null } }, { -1, 0x00800000 | 0x2000 | 1 | 0x0800, (void*)(sqlite3Config), null, strftimeFunc, null, null, null, "strftime", { null } }, { 0, 0x00800000 | 0x2000 | 1, null, null, ctimeFunc, null, null, null, "current_time", { null } }, { 0, 0x00800000 | 0x2000 | 1, null, null, ctimestampFunc, null, null, null, "current_timestamp", { null } }, { 0, 0x00800000 | 0x2000 | 1, null, null, cdateFunc, null, null, null, "current_date", { null } } };
		public static FuncDef[] sqlite3RegisterJsonFunctions_aJsonFunc = new FuncDef[] { { 1, 0x00800000 | 0x000000800 | 0x000200000 | 0x0800 | 1, ((void*)((long)(0))), null, jsonRemoveFunc, null, null, null, "json", { null } }, { -1, 0x00800000 | 0x000000800 | 0x000200000 | 0x0800 | 1, ((void*)((long)(0))), null, jsonArrayFunc, null, null, null, "json_array", { null } }, { 1, 0x00800000 | 0x000000800 | 0x000200000 | 0x0800 | 1, ((void*)((long)(0))), null, jsonArrayLengthFunc, null, null, null, "json_array_length", { null } }, { 2, 0x00800000 | 0x000000800 | 0x000200000 | 0x0800 | 1, ((void*)((long)(0))), null, jsonArrayLengthFunc, null, null, null, "json_array_length", { null } }, { -1, 0x00800000 | 0x000000800 | 0x000200000 | 0x0800 | 1, ((void*)((long)(0))), null, jsonExtractFunc, null, null, null, "json_extract", { null } }, { 2, 0x00800000 | 0x000000800 | 0x000200000 | 0x0800 | 1, ((void*)((long)(0x01))), null, jsonExtractFunc, null, null, null, "->", { null } }, { 2, 0x00800000 | 0x000000800 | 0x000200000 | 0x0800 | 1, ((void*)((long)(0x02))), null, jsonExtractFunc, null, null, null, "->>", { null } }, { -1, 0x00800000 | 0x000000800 | 0x000200000 | 0x0800 | 1, ((void*)((long)(0))), null, jsonSetFunc, null, null, null, "json_insert", { null } }, { -1, 0x00800000 | 0x000000800 | 0x000200000 | 0x0800 | 1, ((void*)((long)(0))), null, jsonObjectFunc, null, null, null, "json_object", { null } }, { 2, 0x00800000 | 0x000000800 | 0x000200000 | 0x0800 | 1, ((void*)((long)(0))), null, jsonPatchFunc, null, null, null, "json_patch", { null } }, { 1, 0x00800000 | 0x000000800 | 0x000200000 | 0x0800 | 1, ((void*)((long)(0))), null, jsonQuoteFunc, null, null, null, "json_quote", { null } }, { -1, 0x00800000 | 0x000000800 | 0x000200000 | 0x0800 | 1, ((void*)((long)(0))), null, jsonRemoveFunc, null, null, null, "json_remove", { null } }, { -1, 0x00800000 | 0x000000800 | 0x000200000 | 0x0800 | 1, ((void*)((long)(0))), null, jsonReplaceFunc, null, null, null, "json_replace", { null } }, { -1, 0x00800000 | 0x000000800 | 0x000200000 | 0x0800 | 1, ((void*)((long)(0x04))), null, jsonSetFunc, null, null, null, "json_set", { null } }, { 1, 0x00800000 | 0x000000800 | 0x000200000 | 0x0800 | 1, ((void*)((long)(0))), null, jsonTypeFunc, null, null, null, "json_type", { null } }, { 2, 0x00800000 | 0x000000800 | 0x000200000 | 0x0800 | 1, ((void*)((long)(0))), null, jsonTypeFunc, null, null, null, "json_type", { null } }, { 1, 0x00800000 | 0x000000800 | 0x000200000 | 0x0800 | 1, ((void*)((long)(0))), null, jsonValidFunc, null, null, null, "json_valid", { null } }, { 1, 0x00800000 | 1 | (0 * 0x0020) | 0x000100000 | 1 | 0x000000800 | 0x000200000, ((void*)((long)(0))), null, jsonArrayStep, jsonArrayFinal, jsonArrayValue, jsonGroupInverse, "json_group_array", { null } }, { 2, 0x00800000 | 1 | (0 * 0x0020) | 0x000100000 | 1 | 0x000000800 | 0x000200000, ((void*)((long)(0))), null, jsonObjectStep, jsonObjectFinal, jsonObjectValue, jsonGroupInverse, "json_group_object", { null } } };
		public static byte[] sqlite3RunVacuum_aCopy = new byte[] { 1, 1, 3, 0, 5, 0, 6, 0, 8, 0 };
		public static sqlite3PrngType sqlite3SavedPrng = new sqlite3PrngType();
		public static sbyte[,] sqlite3Savepoint_az = new sbyte[] { "BEGIN", "RELEASE", "ROLLBACK" };
		public static uint sqlite3SelectTrace = (uint)(0);
		public static BtShared sqlite3SharedCacheList = null;
		public static byte[] sqlite3SmallTypeSizes = new byte[] { 0, 1, 2, 3, 4, 6, 8, 8, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 30, 30, 31, 31, 32, 32, 33, 33, 34, 34, 35, 35, 36, 36, 37, 37, 38, 38, 39, 39, 40, 40, 41, 41, 42, 42, 43, 43, 44, 44, 45, 45, 46, 46, 47, 47, 48, 48, 49, 49, 50, 50, 51, 51, 52, 52, 53, 53, 54, 54, 55, 55, 56, 56, 57, 57 };
		public static byte[] sqlite3StartTable_aCode = new byte[] { 2, 4, 8, 6 };
		public static sbyte[] sqlite3StartTable_nullRow = new sbyte[] { 6, 0, 0, 0, 0, 0 };
		public static sqlite3StatType[] sqlite3Stat = (sqlite3StatType)(new sqlite3StatType[] { { 0 }, { 0 } };
		public static sbyte[,] sqlite3StdType = new sbyte[] { "ANY", "BLOB", "INT", "INTEGER", "REAL", "TEXT" };
		public static sbyte[] sqlite3StdTypeAffinity = new sbyte[] { 0x43, 0x41, 0x44, 0x44, 0x45, 0x42 };
		public static byte[] sqlite3StdTypeLen = new byte[] { 3, 4, 3, 7, 4, 4 };
		public static sbyte[] sqlite3StdTypeMap = new sbyte[] { 0, 4, 1, 1, 2, 3 };
		public static sbyte[] sqlite3StrBINARY = new sbyte[7];
		public static byte[] sqlite3UpperToLower = new byte[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1 };
		public static byte[] sqlite3Utf8Trans1 = new byte[] { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x00, 0x01, 0x02, 0x03, 0x00, 0x01, 0x00, 0x00 };
		public static sbyte[,] sqlite3VdbeDisplayP4_encnames = new sbyte[] { "?", "8", "16LE", "16BE" };
		public static ushort[] sqlite3VdbeExec_aFlag = new ushort[] { 0x0010, 0x0002 | 0x0200 };
		public static byte[] sqlite3VdbeExec_and_logic = new byte[] { 0, 0, 0, 0, 1, 2, 0, 2, 2 };
		public static sbyte[,] sqlite3VdbeExec_azType = new sbyte[] { "NOT NULL", "UNIQUE", "CHECK", "FOREIGN KEY" };
		public static byte[] sqlite3VdbeExec_or_logic = new byte[] { 0, 1, 2, 1, 1, 1, 2, 1, 2 };
		public static int sqlite3VdbeExec_vfsFlags = (int)(0x00000002 | 0x00000004 | 0x00000010 | 0x00000008 | 0x00000400)
public static VdbeOp sqlite3VdbeGetOp_dummy = new VdbeOp()
public static sbyte[,] sqlite3VdbeMakeReady_azColName = new sbyte[] { "addr", "opcode", "p1", "p2", "p3", "p4", "p5", "comment", "id", "parent", "notused", "detail" };
		public static ushort[] sqlite3VdbeSerialGet_aFlag = new ushort[] { 0x0010 | 0x1000, 0x0002 | 0x1000 };
		public static byte[] sqlite3WhereCodeOneLoopStart_aEndOp = new byte[] { 42, 40, 39, 41 };
		public static byte[] sqlite3WhereCodeOneLoopStart_aStart = new byte[] { 38, 34 };
		public static byte[] sqlite3WhereCodeOneLoopStart_aStartOp = new byte[] { 0, 0, 38, 34, 26, 23, 25, 24 };
		public static byte[] sqlite3WhereCodeOneLoopStart_aStep = new byte[] { 5, 4 };
		public static uint sqlite3WhereTrace = (uint)(0);
		public static FuncDef[] sqlite3WindowFunctions_aWindowFuncs = new FuncDef[] { { 0, (0x00800000 | 1 | 0x00010000 | 0), null, null, row_numberStepFunc, row_numberValueFunc, row_numberValueFunc, noopStepFunc, row_numberName, { null } }, { 0, (0x00800000 | 1 | 0x00010000 | 0), null, null, dense_rankStepFunc, dense_rankValueFunc, dense_rankValueFunc, noopStepFunc, dense_rankName, { null } }, { 0, (0x00800000 | 1 | 0x00010000 | 0), null, null, rankStepFunc, rankValueFunc, rankValueFunc, noopStepFunc, rankName, { null } }, { 0, (0x00800000 | 1 | 0x00010000 | 0), null, null, percent_rankStepFunc, percent_rankValueFunc, percent_rankValueFunc, percent_rankInvFunc, percent_rankName, { null } }, { 0, (0x00800000 | 1 | 0x00010000 | 0), null, null, cume_distStepFunc, cume_distValueFunc, cume_distValueFunc, cume_distInvFunc, cume_distName, { null } }, { 1, (0x00800000 | 1 | 0x00010000 | 0), null, null, ntileStepFunc, ntileValueFunc, ntileValueFunc, ntileInvFunc, ntileName, { null } }, { 1, (0x00800000 | 1 | 0x00010000 | 0), null, null, last_valueStepFunc, last_valueFinalizeFunc, last_valueValueFunc, last_valueInvFunc, last_valueName, { null } }, { 2, (0x00800000 | 1 | 0x00010000 | 0), null, null, nth_valueStepFunc, nth_valueFinalizeFunc, noopValueFunc, noopStepFunc, nth_valueName, { null } }, { 1, (0x00800000 | 1 | 0x00010000 | 0), null, null, first_valueStepFunc, first_valueFinalizeFunc, noopValueFunc, noopStepFunc, first_valueName, { null } }, { 1, (0x00800000 | 1 | 0x00010000 | 0), null, null, noopStepFunc, noopValueFunc, noopValueFunc, noopStepFunc, leadName, { null } }, { 2, (0x00800000 | 1 | 0x00010000 | 0), null, null, noopStepFunc, noopValueFunc, noopValueFunc, noopStepFunc, leadName, { null } }, { 3, (0x00800000 | 1 | 0x00010000 | 0), null, null, noopStepFunc, noopValueFunc, noopValueFunc, noopStepFunc, leadName, { null } }, { 1, (0x00800000 | 1 | 0x00010000 | 0), null, null, noopStepFunc, noopValueFunc, noopValueFunc, noopStepFunc, lagName, { null } }, { 2, (0x00800000 | 1 | 0x00010000 | 0), null, null, noopStepFunc, noopValueFunc, noopValueFunc, noopStepFunc, lagName, { null } }, { 3, (0x00800000 | 1 | 0x00010000 | 0), null, null, noopStepFunc, noopValueFunc, noopValueFunc, noopStepFunc, lagName, { null } } };
		public static byte[] sqliteDefaultBusyCallback_delays = new byte[] { 1, 2, 5, 10, 15, 20, 25, 25, 25, 50, 50, 100 };
		public static byte[] sqliteDefaultBusyCallback_totals = new byte[] { 0, 1, 3, 8, 18, 33, 53, 78, 103, 128, 178, 228 };
		public static FuncDef[] statGetFuncdef = (FuncDef)(new FuncDef[] { 1 + 0, 1, null, null, statGet, null, null, null, "stat_get", { null } };
		public static FuncDef[] statInitFuncdef = (FuncDef)(new FuncDef[] { 4, 1, null, null, statInit, null, null, null, "stat_init", { null } };
		public static sbyte[] statMutex = new sbyte[] { 0, 1, 1, 0, 0, 0, 0, 1, 0, 0 };
		public static FuncDef[] statPushFuncdef = (FuncDef)(new FuncDef[] { 2 + 0, 1, null, null, statPush, null, null, null, "stat_push", { null } };
		public static byte syncJournal_zerobyte = (byte)(0)
public static byte[] synthCollSeq_aEnc = new byte[] { 3, 2, 1 };
		public static byte[,] trimFunc_azOne = new byte[] { (byte*)(" ") };
		public static uint[] trimFunc_lenOne = new uint[] { 1 };
		public static sbyte[,] typeofFunc_azType = new sbyte[] { "integer", "real", "text", "blob", "null" };
		public static byte[] vdbeCommit_aMJNeeded = new byte[] { 1, 1, 0, 1, 0, 0 };
		public static sbyte[,] vdbeMemTypeName_azTypes = new sbyte[] { "INT", "REAL", "TEXT", "BLOB", "NULL" };
		public static byte[] vdbeSorterCompareInt_aLen = new byte[] { 0, 1, 2, 3, 4, 6, 8, 0, 0, 0 };
		public static sqlite3_vfs vfsList = null;
		public static winVfsAppData[] winAppData = (winVfsAppData)(new winVfsAppData[] { winIoMethod, null, 0 };
		public static sqlite3_mutex* winBigLock = null;
		public static long winCurrentTimeInt64_max32BitValue = (long)((long)(2000000000) + (long)(2000000000) + (long)(294967296))
public static long winCurrentTimeInt64_winFiletimeEpoch = (long)(23058135 * (long)(8640000))
public static int[] windowCheckValue_aOp = new int[] { 57, 57, 54, 57, 57 };
		public static sbyte[,] windowCheckValue_azErr = new sbyte[] { "frame starting offset must be a non-negative integer", "frame ending offset must be a non-negative integer", "second argument to nth_value must be a positive integer", "frame starting offset must be a non-negative number", "frame ending offset must be a non-negative number" };
		public static sbyte[] winGetTempname_zChars = new sbyte[63];
		public static int winIoerrRetry = (int)(10);
		public static int winIoerrRetryDelay = (int)(25);
		public static sqlite3_io_methods[] winIoMethod = (sqlite3_io_methods)(new sqlite3_io_methods[] { 3, winClose, winRead, winWrite, winTruncate, winSync, winFileSize, winLock, winUnlock, winCheckReservedLock, winFileControl, winSectorSize, winDeviceCharacteristics, winShmMap, winShmLock, winShmBarrier, winShmUnmap, winFetch, winUnfetch };
		public static sqlite3_io_methods[] winIoNolockMethod = (sqlite3_io_methods)(new sqlite3_io_methods[] { 3, winClose, winRead, winWrite, winTruncate, winSync, winFileSize, winNolockLock, winNolockUnlock, winNolockCheckReservedLock, winFileControl, winSectorSize, winDeviceCharacteristics, winShmMap, winShmLock, winShmBarrier, winShmUnmap, winFetch, winUnfetch };
		public static int winMutex_isInit = (int)(0);
		public static int winMutex_isNt = (int)(-1);
		public static int winMutex_lock = (int)(0);
		public static sqlite3_mutex[] winMutex_staticMutexes = new sqlite3_mutex[] { { { null }, 2 }, { { null }, 3 }, { { null }, 4 }, { { null }, 5 }, { { null }, 6 }, { { null }, 7 }, { { null }, 8 }, { { null }, 9 }, { { null }, 10 }, { { null }, 11 }, { { null }, 12 }, { { null }, 13 } };
		public static winVfsAppData[] winNolockAppData = (winVfsAppData)(new winVfsAppData[] { winIoNolockMethod, null, 1 };
		public static winShmNode winShmNodeList = null;
		public static _SYSTEM_INFO winSysInfo = new _SYSTEM_INFO();
		public static ushort[] yy_action = new ushort[] { 566, 1307, 566, 1286, 201, 201, 566, 116, 112, 222, 566, 1307, 377, 566, 116, 112, 222, 397, 408, 409, 1260, 378, 1269, 41, 41, 41, 41, 1412, 1517, 71, 71, 967, 1258, 41, 41, 491, 71, 71, 272, 968, 298, 476, 298, 123, 124, 114, 1210, 1210, 1044, 1047, 1036, 1036, 121, 121, 122, 122, 122, 122, 543, 409, 1234, 1, 1, 573, 2, 1238, 548, 116, 112, 222, 309, 480, 142, 548, 1272, 524, 116, 112, 222, 1320, 417, 523, 547, 123, 124, 114, 1210, 1210, 1044, 1047, 1036, 1036, 121, 121, 122, 122, 122, 122, 424, 116, 112, 222, 120, 120, 120, 120, 119, 119, 118, 118, 118, 117, 113, 444, 277, 277, 277, 277, 560, 560, 560, 1558, 376, 1560, 1186, 375, 1157, 563, 1157, 563, 409, 1558, 537, 252, 219, 1553, 99, 141, 449, 6, 365, 233, 120, 120, 120, 120, 119, 119, 118, 118, 118, 117, 113, 444, 123, 124, 114, 1210, 1210, 1044, 1047, 1036, 1036, 121, 121, 122, 122, 122, 122, 138, 289, 1186, 1546, 448, 118, 118, 118, 117, 113, 444, 125, 1186, 1187, 1188, 144, 465, 334, 566, 150, 127, 444, 122, 122, 122, 122, 115, 120, 120, 120, 120, 119, 119, 118, 118, 118, 117, 113, 444, 454, 419, 13, 13, 215, 120, 120, 120, 120, 119, 119, 118, 118, 118, 117, 113, 444, 422, 308, 557, 1186, 1187, 1188, 441, 440, 409, 1271, 122, 122, 122, 122, 120, 120, 120, 120, 119, 119, 118, 118, 118, 117, 113, 444, 1543, 98, 1033, 1033, 1045, 1048, 123, 124, 114, 1210, 1210, 1044, 1047, 1036, 1036, 121, 121, 122, 122, 122, 122, 566, 406, 405, 1186, 566, 409, 1217, 319, 1217, 80, 81, 120, 120, 120, 120, 119, 119, 118, 118, 118, 117, 113, 444, 70, 70, 1186, 1604, 71, 71, 123, 124, 114, 1210, 1210, 1044, 1047, 1036, 1036, 121, 121, 122, 122, 122, 122, 120, 120, 120, 120, 119, 119, 118, 118, 118, 117, 113, 444, 1037, 210, 1186, 365, 1186, 1187, 1188, 245, 548, 399, 504, 501, 500, 108, 558, 138, 4, 516, 933, 433, 499, 217, 514, 522, 352, 879, 1186, 1187, 1188, 383, 561, 566, 120, 120, 120, 120, 119, 119, 118, 118, 118, 117, 113, 444, 277, 277, 16, 16, 1598, 441, 440, 153, 409, 445, 13, 13, 1279, 563, 1214, 1186, 1187, 1188, 1003, 1216, 264, 555, 1574, 186, 566, 427, 138, 1215, 308, 557, 472, 138, 123, 124, 114, 1210, 1210, 1044, 1047, 1036, 1036, 121, 121, 122, 122, 122, 122, 55, 55, 413, 1023, 507, 1217, 1186, 1217, 474, 106, 106, 1312, 1312, 1186, 171, 566, 384, 107, 380, 445, 568, 567, 430, 1543, 1013, 332, 549, 565, 263, 280, 360, 510, 355, 509, 250, 491, 308, 557, 71, 71, 351, 308, 557, 374, 120, 120, 120, 120, 119, 119, 118, 118, 118, 117, 113, 444, 1013, 1013, 1015, 1016, 27, 277, 277, 1186, 1187, 1188, 1152, 566, 528, 409, 1186, 1187, 1188, 348, 563, 548, 1260, 533, 517, 1152, 1516, 317, 1152, 285, 550, 485, 569, 566, 569, 482, 51, 51, 207, 123, 124, 114, 1210, 1210, 1044, 1047, 1036, 1036, 121, 121, 122, 122, 122, 122, 171, 1412, 13, 13, 409, 277, 277, 1186, 505, 119, 119, 118, 118, 118, 117, 113, 444, 429, 563, 518, 220, 515, 1552, 365, 546, 1186, 6, 532, 123, 124, 114, 1210, 1210, 1044, 1047, 1036, 1036, 121, 121, 122, 122, 122, 122, 145, 120, 120, 120, 120, 119, 119, 118, 118, 118, 117, 113, 444, 245, 566, 474, 504, 501, 500, 566, 1481, 1186, 1187, 1188, 1310, 1310, 499, 1186, 149, 425, 1186, 480, 409, 274, 365, 952, 872, 56, 56, 1186, 1187, 1188, 71, 71, 120, 120, 120, 120, 119, 119, 118, 118, 118, 117, 113, 444, 123, 124, 114, 1210, 1210, 1044, 1047, 1036, 1036, 121, 121, 122, 122, 122, 122, 409, 541, 1552, 83, 865, 98, 6, 928, 529, 848, 543, 151, 927, 1186, 1187, 1188, 1186, 1187, 1188, 290, 1543, 187, 1633, 395, 123, 124, 114, 1210, 1210, 1044, 1047, 1036, 1036, 121, 121, 122, 122, 122, 122, 566, 954, 566, 453, 953, 120, 120, 120, 120, 119, 119, 118, 118, 118, 117, 113, 444, 1152, 221, 1186, 331, 453, 452, 13, 13, 13, 13, 1003, 365, 463, 1152, 193, 409, 1152, 382, 1543, 1170, 32, 297, 474, 195, 1527, 5, 952, 120, 120, 120, 120, 119, 119, 118, 118, 118, 117, 113, 444, 123, 124, 114, 1210, 1210, 1044, 1047, 1036, 1036, 121, 121, 122, 122, 122, 122, 409, 1067, 419, 1186, 1024, 1186, 1187, 1188, 1186, 419, 332, 460, 320, 544, 1545, 442, 442, 442, 566, 3, 117, 113, 444, 453, 123, 124, 114, 1210, 1210, 1044, 1047, 1036, 1036, 121, 121, 122, 122, 122, 122, 1473, 566, 15, 15, 293, 120, 120, 120, 120, 119, 119, 118, 118, 118, 117, 113, 444, 1186, 566, 1486, 1412, 1186, 1187, 1188, 13, 13, 1186, 1187, 1188, 1544, 271, 271, 409, 286, 308, 557, 1008, 1486, 1488, 196, 288, 71, 71, 563, 120, 120, 120, 120, 119, 119, 118, 118, 118, 117, 113, 444, 123, 124, 114, 1210, 1210, 1044, 1047, 1036, 1036, 121, 121, 122, 122, 122, 122, 409, 201, 1087, 1186, 1187, 1188, 1324, 304, 1529, 388, 278, 278, 450, 564, 402, 922, 922, 566, 563, 566, 426, 491, 480, 563, 123, 124, 114, 1210, 1210, 1044, 1047, 1036, 1036, 121, 121, 122, 122, 122, 122, 1486, 71, 71, 13, 13, 120, 120, 120, 120, 119, 119, 118, 118, 118, 117, 113, 444, 566, 545, 566, 1577, 573, 2, 1238, 1092, 1092, 488, 1480, 309, 1525, 142, 324, 409, 836, 837, 838, 312, 1320, 305, 363, 43, 43, 57, 57, 120, 120, 120, 120, 119, 119, 118, 118, 118, 117, 113, 444, 123, 124, 114, 1210, 1210, 1044, 1047, 1036, 1036, 121, 121, 122, 122, 122, 122, 12, 277, 277, 566, 1152, 409, 572, 428, 1238, 465, 334, 296, 474, 309, 563, 142, 249, 1152, 308, 557, 1152, 321, 1320, 323, 491, 455, 71, 71, 233, 283, 101, 114, 1210, 1210, 1044, 1047, 1036, 1036, 121, 121, 122, 122, 122, 122, 120, 120, 120, 120, 119, 119, 118, 118, 118, 117, 113, 444, 1108, 277, 277, 1412, 448, 394, 1230, 439, 277, 277, 248, 247, 246, 1319, 563, 1109, 313, 198, 294, 491, 1318, 563, 464, 566, 1427, 394, 1130, 1023, 233, 414, 1110, 295, 120, 120, 120, 120, 119, 119, 118, 118, 118, 117, 113, 444, 1014, 104, 71, 71, 1013, 322, 496, 908, 566, 277, 277, 277, 277, 1108, 1261, 415, 448, 909, 361, 1571, 1315, 409, 563, 952, 563, 9, 202, 255, 1109, 316, 487, 44, 44, 249, 559, 415, 1013, 1013, 1015, 443, 1231, 409, 1603, 1110, 897, 123, 124, 114, 1210, 1210, 1044, 1047, 1036, 1036, 121, 121, 122, 122, 122, 122, 1231, 409, 1207, 215, 554, 123, 124, 114, 1210, 1210, 1044, 1047, 1036, 1036, 121, 121, 122, 122, 122, 122, 1131, 1631, 470, 1631, 255, 123, 111, 114, 1210, 1210, 1044, 1047, 1036, 1036, 121, 121, 122, 122, 122, 122, 1131, 1632, 414, 1632, 120, 120, 120, 120, 119, 119, 118, 118, 118, 117, 113, 444, 221, 209, 351, 1207, 1207, 147, 1426, 491, 120, 120, 120, 120, 119, 119, 118, 118, 118, 117, 113, 444, 1256, 539, 519, 888, 551, 952, 12, 566, 120, 120, 120, 120, 119, 119, 118, 118, 118, 117, 113, 444, 538, 566, 860, 1129, 361, 1571, 346, 1356, 409, 1163, 58, 58, 339, 1355, 508, 277, 277, 277, 277, 277, 277, 1207, 889, 1129, 59, 59, 459, 363, 563, 566, 563, 96, 563, 124, 114, 1210, 1210, 1044, 1047, 1036, 1036, 121, 121, 122, 122, 122, 122, 566, 1412, 566, 281, 1186, 60, 60, 110, 392, 392, 391, 266, 389, 860, 1163, 845, 566, 481, 566, 436, 341, 1152, 344, 61, 61, 62, 62, 967, 227, 1550, 315, 431, 540, 6, 1152, 968, 566, 1152, 314, 45, 45, 46, 46, 512, 120, 120, 120, 120, 119, 119, 118, 118, 118, 117, 113, 444, 416, 173, 1532, 47, 47, 1186, 1187, 1188, 108, 558, 325, 4, 229, 1551, 928, 566, 437, 6, 566, 927, 164, 566, 1290, 137, 1190, 561, 566, 1549, 566, 1089, 566, 6, 566, 1089, 531, 566, 868, 8, 49, 49, 228, 50, 50, 566, 63, 63, 566, 457, 445, 64, 64, 65, 65, 14, 14, 66, 66, 407, 129, 129, 555, 566, 458, 566, 1505, 486, 67, 67, 566, 52, 52, 546, 407, 467, 535, 410, 226, 1023, 566, 534, 308, 557, 1190, 407, 68, 68, 69, 69, 566, 1023, 566, 53, 53, 868, 1014, 106, 106, 525, 1013, 566, 1504, 159, 159, 107, 451, 445, 568, 567, 471, 307, 1013, 160, 160, 76, 76, 566, 1548, 466, 407, 407, 6, 1225, 54, 54, 478, 276, 219, 566, 887, 886, 1013, 1013, 1015, 84, 206, 1206, 230, 282, 72, 72, 329, 483, 1013, 1013, 1015, 1016, 27, 1576, 1174, 447, 130, 130, 281, 148, 105, 38, 103, 392, 392, 391, 266, 389, 566, 1126, 845, 396, 566, 108, 558, 566, 4, 311, 566, 30, 17, 566, 279, 227, 566, 315, 108, 558, 468, 4, 561, 73, 73, 314, 566, 157, 157, 566, 131, 131, 526, 132, 132, 561, 128, 128, 566, 158, 158, 566, 31, 291, 566, 445, 330, 521, 98, 152, 152, 420, 136, 136, 1005, 229, 254, 555, 445, 479, 336, 135, 135, 164, 133, 133, 137, 134, 134, 875, 555, 535, 566, 473, 566, 254, 536, 475, 335, 254, 98, 894, 895, 228, 535, 566, 1023, 566, 1074, 534, 210, 232, 106, 106, 1352, 75, 75, 77, 77, 1023, 107, 340, 445, 568, 567, 106, 106, 1013, 74, 74, 42, 42, 566, 107, 343, 445, 568, 567, 410, 497, 1013, 251, 359, 308, 557, 1135, 349, 875, 98, 1070, 345, 251, 358, 1591, 347, 48, 48, 1017, 1303, 1013, 1013, 1015, 1016, 27, 1289, 1287, 1074, 451, 961, 925, 254, 110, 1013, 1013, 1015, 1016, 27, 1174, 447, 970, 971, 281, 108, 558, 1288, 4, 392, 392, 391, 266, 389, 1343, 1086, 845, 1086, 1085, 858, 1085, 146, 561, 926, 354, 110, 303, 364, 553, 227, 1364, 315, 108, 558, 1411, 4, 1339, 492, 1017, 314, 1350, 1565, 552, 1417, 1268, 445, 204, 1259, 1247, 561, 1246, 1248, 1584, 269, 1336, 367, 369, 555, 371, 11, 212, 393, 225, 1393, 284, 1398, 456, 287, 327, 229, 328, 292, 445, 1386, 216, 333, 1403, 164, 477, 373, 137, 1402, 400, 502, 555, 1286, 1023, 357, 1477, 199, 1587, 211, 106, 106, 932, 1476, 1225, 228, 556, 175, 107, 200, 445, 568, 567, 258, 387, 1013, 1524, 1522, 223, 1222, 418, 1023, 83, 208, 79, 82, 184, 106, 106, 1482, 169, 177, 461, 179, 462, 107, 1399, 445, 568, 567, 410, 180, 1013, 495, 181, 308, 557, 1013, 1013, 1015, 1016, 27, 182, 35, 235, 100, 558, 398, 4, 96, 1405, 1404, 36, 484, 469, 1407, 188, 401, 1471, 451, 89, 1493, 561, 239, 1013, 1013, 1015, 1016, 27, 490, 338, 270, 241, 192, 342, 493, 242, 403, 1249, 243, 511, 432, 1297, 1306, 91, 445, 1305, 1304, 879, 217, 434, 435, 1570, 1276, 1602, 520, 1601, 555, 301, 527, 404, 1275, 302, 356, 1274, 1600, 95, 1347, 366, 1296, 362, 1348, 368, 256, 257, 1556, 1555, 438, 1346, 370, 126, 1345, 10, 1371, 546, 381, 1023, 102, 1457, 97, 530, 34, 106, 106, 570, 1180, 372, 265, 1329, 379, 107, 203, 445, 568, 567, 1328, 385, 1013, 1370, 386, 267, 268, 571, 1244, 161, 1239, 162, 1509, 1510, 1508, 143, 1507, 299, 832, 213, 214, 78, 446, 205, 310, 306, 163, 224, 1084, 140, 1082, 318, 165, 176, 1013, 1013, 1015, 1016, 27, 178, 1206, 231, 911, 234, 326, 1098, 183, 421, 166, 167, 411, 185, 85, 423, 412, 86, 174, 87, 168, 88, 1101, 236, 1097, 237, 154, 18, 238, 254, 337, 1219, 489, 1090, 240, 190, 37, 847, 189, 494, 358, 244, 350, 506, 191, 877, 90, 498, 19, 20, 503, 92, 353, 890, 300, 170, 155, 93, 513, 94, 1168, 156, 1050, 1137, 39, 218, 273, 275, 1136, 960, 194, 955, 110, 1154, 1158, 253, 7, 1162, 1156, 21, 22, 1161, 1142, 23, 24, 25, 33, 542, 26, 260, 197, 98, 1065, 1051, 1049, 1053, 1107, 1054, 1106, 259, 28, 40, 562, 1018, 859, 109, 29, 921, 390, 1176, 172, 139, 1175, 1235, 261, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 262, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1593, 1592 };
		public static ushort[] yy_default = new ushort[] { 1637, 1637, 1637, 1466, 1233, 1344, 1233, 1233, 1233, 1466, 1466, 1466, 1233, 1374, 1374, 1519, 1266, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1465, 1233, 1233, 1233, 1233, 1554, 1554, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1383, 1233, 1390, 1233, 1233, 1233, 1233, 1233, 1467, 1468, 1233, 1233, 1233, 1518, 1520, 1483, 1397, 1396, 1395, 1394, 1501, 1361, 1388, 1381, 1385, 1461, 1462, 1460, 1464, 1468, 1467, 1233, 1384, 1431, 1445, 1430, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1439, 1444, 1451, 1443, 1440, 1433, 1432, 1434, 1435, 1233, 1233, 1257, 1233, 1233, 1254, 1308, 1233, 1233, 1233, 1233, 1233, 1538, 1537, 1233, 1436, 1233, 1266, 1425, 1424, 1448, 1437, 1447, 1446, 1526, 1590, 1589, 1484, 1233, 1233, 1233, 1233, 1233, 1233, 1554, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1554, 1554, 1233, 1266, 1554, 1554, 1262, 1262, 1368, 1233, 1533, 1335, 1335, 1335, 1335, 1344, 1335, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1523, 1521, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1340, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1583, 1233, 1496, 1322, 1340, 1340, 1340, 1340, 1342, 1323, 1321, 1334, 1267, 1240, 1629, 1400, 1389, 1341, 1363, 1389, 1363, 1626, 1387, 1400, 1400, 1387, 1400, 1341, 1626, 1283, 1606, 1278, 1374, 1374, 1374, 1363, 1368, 1368, 1463, 1341, 1334, 1233, 1629, 1629, 1349, 1349, 1628, 1628, 1349, 1484, 1613, 1409, 1311, 1317, 1317, 1317, 1317, 1349, 1251, 1387, 1613, 1613, 1387, 1409, 1311, 1387, 1311, 1387, 1349, 1251, 1500, 1623, 1349, 1251, 1474, 1349, 1251, 1349, 1251, 1474, 1309, 1309, 1309, 1298, 1233, 1233, 1474, 1309, 1283, 1309, 1298, 1309, 1309, 1572, 1233, 1478, 1478, 1474, 1367, 1362, 1367, 1362, 1367, 1362, 1367, 1362, 1349, 1564, 1564, 1377, 1377, 1382, 1368, 1469, 1349, 1233, 1382, 1380, 1378, 1387, 1301, 1586, 1586, 1582, 1582, 1582, 1634, 1634, 1533, 1599, 1266, 1266, 1266, 1266, 1599, 1285, 1285, 1267, 1267, 1266, 1599, 1233, 1233, 1233, 1233, 1233, 1233, 1594, 1233, 1528, 1485, 1353, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1539, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1414, 1233, 1236, 1530, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1391, 1392, 1354, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1406, 1233, 1233, 1233, 1401, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1625, 1233, 1233, 1233, 1233, 1233, 1233, 1499, 1498, 1233, 1233, 1351, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1281, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1379, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1569, 1369, 1233, 1233, 1616, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1610, 1325, 1416, 1233, 1415, 1419, 1255, 1233, 1245, 1233, 1233 };
		public static ushort[] yy_lookahead = new ushort[] { 193, 223, 193, 225, 193, 193, 193, 274, 275, 276, 193, 233, 219, 193, 274, 275, 276, 206, 206, 19, 193, 219, 216, 216, 217, 216, 217, 193, 295, 216, 217, 31, 205, 216, 217, 193, 216, 217, 213, 39, 228, 193, 230, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 193, 19, 185, 186, 187, 188, 189, 190, 253, 274, 275, 276, 195, 193, 197, 253, 216, 262, 274, 275, 276, 204, 238, 204, 262, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 264, 274, 275, 276, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 239, 240, 239, 240, 210, 211, 212, 314, 315, 314, 59, 316, 86, 252, 88, 252, 19, 314, 315, 256, 257, 309, 25, 72, 296, 313, 193, 266, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 81, 292, 59, 307, 298, 108, 109, 110, 111, 112, 113, 69, 116, 117, 118, 72, 128, 129, 193, 241, 22, 113, 54, 55, 56, 57, 58, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 120, 193, 216, 217, 25, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 231, 138, 139, 116, 117, 118, 106, 107, 19, 216, 54, 55, 56, 57, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 304, 25, 46, 47, 48, 49, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 193, 106, 107, 59, 193, 19, 153, 263, 155, 67, 24, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 216, 217, 59, 230, 216, 217, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 121, 142, 59, 193, 116, 117, 118, 119, 253, 204, 122, 123, 124, 19, 20, 81, 22, 262, 108, 19, 132, 165, 166, 193, 24, 126, 116, 117, 118, 278, 36, 193, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 239, 240, 216, 217, 215, 106, 107, 241, 19, 59, 216, 217, 223, 252, 115, 116, 117, 118, 73, 120, 26, 71, 193, 22, 193, 231, 81, 128, 138, 139, 269, 81, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 216, 217, 198, 100, 95, 153, 59, 155, 193, 106, 107, 235, 236, 59, 193, 193, 249, 114, 251, 116, 117, 118, 113, 304, 121, 127, 204, 193, 119, 120, 121, 122, 123, 124, 125, 193, 138, 139, 216, 217, 131, 138, 139, 193, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 153, 154, 155, 156, 157, 239, 240, 116, 117, 118, 76, 193, 193, 19, 116, 117, 118, 23, 252, 253, 193, 87, 204, 89, 238, 193, 92, 268, 262, 281, 203, 193, 205, 285, 216, 217, 150, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 193, 193, 216, 217, 19, 239, 240, 59, 23, 106, 107, 108, 109, 110, 111, 112, 113, 231, 252, 253, 193, 308, 309, 193, 145, 59, 313, 145, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 164, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 119, 193, 193, 122, 123, 124, 193, 283, 116, 117, 118, 235, 236, 132, 59, 241, 264, 59, 193, 19, 23, 193, 25, 23, 216, 217, 116, 117, 118, 216, 217, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 19, 308, 309, 151, 23, 25, 313, 135, 253, 21, 193, 241, 140, 116, 117, 118, 116, 117, 118, 268, 304, 22, 301, 302, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 193, 143, 193, 193, 143, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 76, 118, 59, 292, 211, 212, 216, 217, 216, 217, 73, 193, 80, 89, 25, 19, 92, 193, 304, 23, 22, 231, 193, 231, 193, 22, 143, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 19, 123, 193, 59, 23, 116, 117, 118, 59, 193, 127, 128, 129, 306, 307, 210, 211, 212, 193, 22, 111, 112, 113, 284, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 161, 193, 216, 217, 268, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 59, 193, 193, 193, 116, 117, 118, 216, 217, 116, 117, 118, 304, 239, 240, 19, 263, 138, 139, 23, 211, 212, 231, 263, 216, 217, 252, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 19, 193, 11, 116, 117, 118, 240, 253, 193, 201, 239, 240, 193, 134, 206, 136, 137, 193, 252, 193, 264, 193, 193, 252, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 284, 216, 217, 216, 217, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 193, 231, 193, 187, 188, 189, 190, 127, 128, 129, 238, 195, 193, 197, 16, 19, 7, 8, 9, 193, 204, 253, 193, 216, 217, 216, 217, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 213, 239, 240, 193, 76, 19, 188, 232, 190, 128, 129, 292, 193, 195, 252, 197, 46, 89, 138, 139, 92, 77, 204, 79, 193, 269, 216, 217, 266, 204, 159, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 12, 239, 240, 193, 298, 22, 23, 253, 239, 240, 127, 128, 129, 238, 252, 27, 193, 286, 204, 193, 204, 252, 291, 193, 273, 22, 23, 100, 266, 115, 42, 268, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 117, 159, 216, 217, 121, 161, 19, 63, 193, 239, 240, 239, 240, 12, 208, 209, 298, 73, 311, 312, 238, 19, 252, 25, 252, 22, 24, 24, 27, 193, 264, 216, 217, 46, 208, 209, 153, 154, 155, 253, 101, 19, 23, 42, 25, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 101, 19, 59, 25, 63, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 22, 23, 115, 25, 24, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 22, 23, 115, 25, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 118, 150, 131, 59, 117, 22, 273, 193, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 204, 66, 204, 35, 204, 143, 213, 193, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 85, 193, 59, 101, 311, 312, 16, 193, 19, 94, 216, 217, 238, 193, 66, 239, 240, 239, 240, 239, 240, 117, 74, 101, 216, 217, 193, 193, 252, 193, 252, 149, 252, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 193, 193, 193, 5, 59, 216, 217, 25, 10, 11, 12, 13, 14, 117, 146, 17, 193, 291, 193, 232, 77, 76, 79, 216, 217, 216, 217, 31, 30, 309, 32, 130, 87, 313, 89, 39, 193, 92, 40, 216, 217, 216, 217, 108, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 299, 300, 193, 216, 217, 116, 117, 118, 19, 20, 193, 22, 70, 309, 135, 193, 264, 313, 193, 140, 78, 193, 226, 81, 59, 36, 193, 309, 193, 29, 193, 313, 193, 33, 145, 193, 59, 48, 216, 217, 98, 216, 217, 193, 216, 217, 193, 244, 59, 216, 217, 216, 217, 216, 217, 216, 217, 254, 216, 217, 71, 193, 244, 193, 193, 65, 216, 217, 193, 216, 217, 145, 254, 244, 85, 133, 15, 100, 193, 90, 138, 139, 117, 254, 216, 217, 216, 217, 193, 100, 193, 216, 217, 116, 117, 106, 107, 19, 121, 193, 193, 216, 217, 114, 162, 116, 117, 118, 244, 244, 121, 216, 217, 216, 217, 193, 309, 129, 254, 254, 313, 60, 216, 217, 19, 256, 257, 193, 120, 121, 153, 154, 155, 149, 150, 25, 24, 99, 216, 217, 152, 193, 153, 154, 155, 156, 157, 0, 1, 2, 216, 217, 5, 22, 158, 24, 160, 10, 11, 12, 13, 14, 193, 23, 17, 25, 193, 19, 20, 193, 22, 133, 193, 22, 22, 193, 22, 30, 193, 32, 19, 20, 129, 22, 36, 216, 217, 40, 193, 216, 217, 193, 216, 217, 116, 216, 217, 36, 216, 217, 193, 216, 217, 193, 53, 152, 193, 59, 23, 19, 25, 216, 217, 61, 216, 217, 23, 70, 25, 71, 59, 116, 193, 216, 217, 78, 216, 217, 81, 216, 217, 59, 71, 85, 193, 23, 193, 25, 90, 23, 23, 25, 25, 7, 8, 98, 85, 193, 100, 193, 59, 90, 142, 141, 106, 107, 193, 216, 217, 216, 217, 100, 114, 193, 116, 117, 118, 106, 107, 121, 216, 217, 216, 217, 193, 114, 193, 116, 117, 118, 133, 23, 121, 25, 121, 138, 139, 97, 23, 117, 25, 23, 193, 25, 131, 141, 193, 216, 217, 59, 193, 153, 154, 155, 156, 157, 226, 193, 117, 162, 23, 23, 25, 25, 153, 154, 155, 156, 157, 1, 2, 83, 84, 5, 19, 20, 226, 22, 10, 11, 12, 13, 14, 258, 153, 17, 155, 153, 23, 155, 25, 36, 23, 193, 25, 255, 193, 236, 30, 193, 32, 19, 20, 193, 22, 193, 288, 117, 40, 193, 318, 193, 193, 193, 59, 242, 193, 193, 36, 193, 193, 193, 287, 255, 255, 255, 71, 255, 243, 214, 191, 297, 267, 245, 271, 259, 259, 293, 70, 246, 246, 59, 267, 229, 245, 271, 78, 293, 259, 81, 271, 271, 220, 71, 225, 100, 219, 219, 249, 196, 243, 106, 107, 108, 219, 60, 98, 280, 297, 114, 249, 116, 117, 118, 141, 245, 121, 200, 200, 297, 38, 200, 100, 151, 150, 294, 294, 22, 106, 107, 283, 43, 234, 18, 237, 200, 114, 272, 116, 117, 118, 133, 237, 121, 18, 237, 138, 139, 153, 154, 155, 156, 157, 237, 270, 199, 19, 20, 246, 22, 149, 272, 272, 270, 200, 246, 234, 234, 246, 246, 162, 158, 290, 36, 199, 153, 154, 155, 156, 157, 62, 289, 200, 199, 22, 200, 221, 199, 221, 200, 199, 115, 64, 227, 218, 22, 59, 218, 218, 126, 165, 24, 113, 312, 218, 224, 305, 224, 71, 282, 144, 221, 220, 282, 218, 218, 218, 115, 261, 260, 227, 221, 261, 260, 200, 91, 317, 317, 82, 261, 260, 148, 261, 22, 265, 145, 200, 100, 158, 277, 147, 146, 25, 106, 107, 202, 13, 260, 194, 250, 249, 114, 248, 116, 117, 118, 250, 247, 121, 265, 246, 194, 6, 192, 192, 207, 192, 207, 213, 213, 213, 222, 213, 222, 4, 214, 214, 213, 3, 22, 163, 279, 207, 15, 23, 16, 23, 139, 130, 151, 153, 154, 155, 156, 157, 142, 25, 24, 20, 144, 16, 1, 142, 61, 130, 130, 303, 151, 53, 37, 303, 53, 300, 53, 130, 53, 116, 34, 1, 141, 5, 22, 115, 25, 161, 75, 41, 68, 141, 115, 24, 20, 68, 19, 131, 125, 23, 96, 22, 59, 22, 67, 22, 22, 67, 22, 24, 28, 67, 37, 23, 149, 22, 25, 23, 23, 23, 23, 22, 141, 23, 23, 97, 116, 22, 143, 25, 88, 75, 34, 44, 75, 86, 34, 34, 93, 23, 34, 34, 34, 22, 24, 34, 22, 25, 25, 23, 23, 23, 23, 23, 11, 23, 25, 22, 22, 25, 23, 23, 22, 22, 135, 15, 1, 25, 23, 1, 319, 141, 319, 319, 319, 319, 319, 319, 319, 319, 141, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 141, 141, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319, 319 };
		public static short[] yy_reduce_ofst = new short[] { -125, 733, 789, 241, 293, -123, -193, -191, -183, -187, -180, 83, 133, -207, -198, -267, -175, -6, 166, 313, 487, 396, 489, 598, 615, 685, 687, 79, 781, 857, 490, 616, 240, 334, -188, 796, 841, 843, 1003, 1005, 1007, -260, -260, -260, -260, -260, -260, -260, -260, -260, -260, -260, -260, -260, -260, -260, -260, -260, -260, -260, -260, -260, -260, -260, -260, -260, -260, -260, -260, -260, -260, -260, -260, -260, -260, -260, -260, -260, 158, 203, 391, 576, 724, 726, 886, 1021, 1035, 1063, 1081, 1083, 1097, 1099, 1117, 1152, 1155, 1158, 1163, 1165, 1167, 1169, 1172, 1180, 1183, 1198, 1200, 1205, 1215, 1225, 1227, 1236, 1252, 1264, 1299, 1303, 1306, 1309, 1312, 1315, 1325, 1328, 1337, 1340, 1343, 1371, 1373, 1384, 1386, 1411, -260, -260, -260, -260, -260, -260, -260, -260, -260, -53, 138, 302, -158, 357, 223, -222, 411, 458, -92, 556, 669, 581, 632, 581, -260, 632, 758, 778, 920, -260, -260, -260, -260, 161, 161, 161, 307, 234, 392, 526, 790, 195, 359, -174, -173, 362, 362, -189, 16, 560, 567, 261, 689, 802, 853, -122, -166, 408, 335, 617, 690, 837, 1001, 746, 1061, 515, 1082, 994, 1034, -135, 1000, 1048, 1137, 877, 897, 186, 627, 1031, 1133, 1148, 1159, 1194, 1199, 1195, -194, -142, 18, -152, 68, 201, 253, 269, 294, 354, 521, 528, 676, 680, 736, 743, 850, 907, 1041, 1047, 1060, 727, 1139, 1147, 1201, 1237, 1278, 1359, 1393, 1400, 1413, 1429, 1433, 1437, 1126, 1410, 1430, 1444, 1480, 1483, 1405, 1486, 1490, 1492, 1420, 1372, 1496, 1498, 1441, 1499, 253, 1500, 1503, 1504, 1506, 1507, 1508, 1398, 1415, 1453, 1448, 1449, 1450, 1452, 1405, 1453, 1453, 1465, 1495, 1519, 1414, 1443, 1445, 1468, 1456, 1455, 1457, 1424, 1473, 1454, 1459, 1474, 1460, 1479, 1434, 1512, 1494, 1509, 1517, 1518, 1525, 1469, 1489, 1501, 1467, 1510, 1497, 1543, 1451, 1462, 1557, 1558, 1471, 1472, 1561, 1487, 1505, 1524, 1538, 1537, 1545, 1548, 1556, 1575, 1596, 1552, 1529, 1530, 1559, 1533, 1572, 1562, 1573, 1563, 1604, 1615, 1522, 1532, 1622, 1624, 1605, 1625, 1628, 1629, 1631, 1607, 1616, 1619, 1620, 1606, 1621, 1623, 1630, 1626, 1632, 1636, 1633, 1637, 1638, 1531, 1541, 1567, 1571, 1640, 1597, 1599, 1601, 1603, 1608, 1610, 1611, 1627, 1664, 1549, 1550, 1609, 1634, 1639, 1641, 1602, 1676, 1642, 1646, 1644, 1650, 1654, 1683, 1694, 1707, 1711, 1712, 1714, 1643, 1647, 1652, 1698, 1695, 1696, 1697, 1699, 1700, 1689, 1691, 1701, 1702, 1704, 1715 };
		public static ushort[] yy_shift_ofst = new ushort[] { 1648, 1477, 1272, 322, 322, 262, 1319, 1478, 1491, 1662, 1662, 1662, 317, 0, 0, 214, 1093, 1662, 1662, 1662, 1662, 1662, 1662, 1662, 1662, 1662, 1662, 1662, 1662, 1662, 271, 271, 1219, 1219, 216, 88, 262, 262, 262, 262, 262, 40, 111, 258, 361, 469, 512, 583, 622, 693, 732, 803, 842, 913, 1073, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1113, 1093, 1216, 957, 957, 1635, 1662, 1662, 1662, 1662, 1662, 1662, 1662, 1662, 1662, 1662, 1662, 1662, 1662, 1662, 1662, 1662, 1662, 1662, 1662, 1662, 1662, 1662, 1662, 1662, 1662, 1662, 1662, 1662, 1662, 1662, 1662, 1662, 1662, 1662, 1662, 1777, 1662, 1662, 1662, 1662, 1662, 1662, 1662, 1662, 1662, 1662, 1662, 1662, 1662, 137, 181, 181, 181, 181, 181, 94, 430, 66, 65, 112, 366, 475, 475, 629, 1058, 475, 475, 125, 125, 475, 686, 686, 686, 660, 686, 57, 184, 184, 77, 77, 2070, 2070, 328, 328, 328, 493, 373, 373, 373, 373, 1015, 1015, 409, 366, 1129, 1149, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 621, 621, 475, 852, 899, 899, 1295, 1295, 406, 851, 2070, 2070, 2070, 2070, 2070, 2070, 2070, 1307, 954, 954, 640, 464, 695, 238, 700, 538, 541, 748, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 634, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 1175, 1175, 1175, 475, 475, 475, 580, 475, 475, 475, 1074, 1142, 475, 475, 1072, 475, 475, 475, 475, 475, 475, 475, 475, 797, 1330, 740, 1131, 1131, 1131, 1131, 1069, 740, 740, 1209, 167, 926, 1391, 1038, 1314, 187, 1408, 1314, 1408, 1435, 1109, 1038, 1038, 1109, 1038, 187, 1435, 227, 1090, 941, 1270, 1270, 1270, 1408, 1256, 1256, 1326, 1440, 513, 1461, 1685, 1685, 1613, 1613, 1722, 1722, 1613, 1612, 1614, 1745, 1728, 1755, 1755, 1755, 1755, 1613, 1766, 1651, 1614, 1614, 1651, 1745, 1728, 1651, 1728, 1651, 1613, 1766, 1653, 1758, 1613, 1766, 1802, 1613, 1766, 1613, 1766, 1802, 1716, 1716, 1716, 1768, 1813, 1813, 1802, 1716, 1713, 1716, 1768, 1716, 1716, 1675, 1817, 1729, 1729, 1802, 1706, 1742, 1706, 1742, 1706, 1742, 1706, 1742, 1613, 1774, 1774, 1786, 1786, 1723, 1730, 1851, 1613, 1720, 1723, 1733, 1735, 1651, 1857, 1873, 1873, 1896, 1896, 1896, 2070, 2070, 2070, 2070, 2070, 2070, 2070, 2070, 2070, 2070, 2070, 2070, 2070, 2070, 2070, 207, 915, 1010, 1030, 1217, 910, 1170, 1470, 1368, 1481, 1442, 1318, 1383, 1515, 1482, 1523, 1542, 1546, 1547, 1588, 1595, 1502, 1338, 1566, 1493, 1520, 1521, 1598, 1617, 1568, 1618, 1511, 1514, 1645, 1649, 1570, 1484, 1910, 1915, 1897, 1757, 1908, 1909, 1901, 1903, 1788, 1778, 1798, 1911, 1911, 1913, 1793, 1918, 1795, 1924, 1940, 1800, 1814, 1911, 1815, 1882, 1912, 1911, 1796, 1895, 1898, 1900, 1902, 1824, 1840, 1923, 1818, 1957, 1955, 1939, 1847, 1803, 1899, 1938, 1904, 1890, 1925, 1827, 1854, 1946, 1951, 1954, 1843, 1850, 1956, 1914, 1958, 1960, 1953, 1961, 1917, 1920, 1962, 1881, 1959, 1963, 1921, 1952, 1967, 1842, 1970, 1971, 1972, 1973, 1968, 1974, 1976, 1905, 1858, 1977, 1978, 1887, 1975, 1982, 1862, 1981, 1979, 1980, 1983, 1984, 1919, 1933, 1926, 1966, 1936, 1922, 1985, 1993, 1998, 1997, 1999, 2000, 1988, 2003, 1981, 2004, 2005, 2006, 2007, 2008, 2009, 2001, 2020, 2012, 2013, 2014, 2015, 2017, 2018, 2011, 1906, 1907, 1916, 1927, 1928, 2019, 2022, 2027, 2042, 2045 };
		public static ushort[] yyFallback = new ushort[] {};
		public static ushort[] yyRuleInfoLhs = new ushort[] { 189, 189, 188, 190, 191, 191, 191, 191, 190, 190, 190, 190, 190, 195, 197, 199, 199, 198, 198, 196, 196, 203, 203, 205, 205, 206, 208, 208, 208, 209, 213, 214, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 224, 224, 220, 220, 222, 222, 225, 225, 225, 225, 226, 226, 226, 226, 226, 223, 223, 227, 227, 227, 202, 229, 230, 230, 230, 230, 230, 233, 218, 218, 234, 234, 235, 235, 190, 237, 237, 190, 190, 190, 204, 204, 204, 239, 242, 242, 242, 240, 240, 252, 252, 243, 243, 243, 254, 244, 244, 244, 255, 255, 245, 245, 257, 257, 256, 256, 256, 256, 200, 200, 238, 238, 263, 263, 263, 263, 258, 258, 258, 258, 260, 260, 259, 259, 259, 261, 261, 249, 249, 231, 231, 219, 219, 219, 265, 265, 265, 247, 247, 248, 248, 250, 250, 250, 250, 190, 246, 246, 267, 267, 267, 267, 190, 268, 268, 268, 268, 190, 190, 271, 271, 271, 271, 271, 271, 272, 269, 269, 270, 270, 264, 264, 217, 217, 217, 217, 217, 216, 216, 216, 217, 217, 217, 217, 217, 217, 217, 216, 217, 217, 217, 217, 217, 217, 217, 217, 217, 274, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 275, 275, 217, 276, 276, 217, 217, 217, 217, 217, 217, 279, 279, 280, 280, 278, 278, 262, 253, 253, 277, 277, 190, 281, 281, 221, 221, 232, 232, 282, 282, 190, 190, 190, 283, 283, 190, 190, 190, 190, 190, 211, 212, 190, 285, 287, 287, 287, 288, 288, 288, 290, 290, 286, 286, 292, 293, 293, 291, 291, 291, 291, 217, 217, 236, 236, 236, 190, 190, 190, 295, 295, 190, 190, 190, 190, 190, 190, 190, 296, 190, 190, 190, 298, 300, 301, 301, 302, 266, 266, 305, 305, 305, 304, 241, 241, 306, 306, 307, 308, 308, 308, 308, 308, 308, 309, 309, 309, 313, 315, 315, 316, 316, 314, 314, 317, 317, 318, 318, 318, 251, 273, 273, 273, 312, 312, 311, 185, 186, 186, 187, 187, 187, 192, 192, 192, 194, 194, 190, 203, 201, 201, 193, 193, 193, 208, 209, 210, 210, 207, 207, 215, 215, 215, 202, 228, 228, 229, 233, 235, 239, 240, 254, 255, 272, 217, 274, 262, 284, 284, 284, 284, 284, 211, 289, 289, 292, 293, 294, 294, 297, 297, 299, 299, 300, 303, 303, 303, 266 };
		public static sbyte[] yyRuleInfoNRhs = new sbyte[] { -1, -3, -1, -3, 0, -1, -1, -1, -2, -2, -2, -3, -5, -6, -1, 0, -3, -1, 0, -5, -2, 0, -3, -2, -1, -2, 0, -4, -6, -2, 0, 0, -2, -3, -4, -4, -4, -3, -3, -5, -2, -4, -4, -1, -2, -3, -4, 0, -1, 0, -2, -2, -3, -3, -3, -2, -2, -1, -1, -2, -3, -2, 0, -2, -2, 0, -1, -2, -7, -5, -5, -10, 0, 0, -3, 0, -2, -1, -1, -4, -2, 0, -9, -4, -1, -3, -4, -1, -3, -1, -2, -1, -9, -10, -4, -5, -1, -1, 0, 0, -5, -3, -5, -2, 0, 0, -2, -2, 0, -7, -9, -7, -7, 0, -2, -1, -3, -1, -3, -5, -3, -1, -2, -3, -4, -2, 0, 0, -3, -2, -4, 0, 0, -3, -5, -3, -1, -1, 0, -2, -2, 0, 0, -3, 0, -2, 0, -2, -4, -4, -6, 0, -2, 0, -2, -2, -4, -9, -5, -7, -3, -5, -7, -8, 0, -2, -12, -9, -5, -8, -2, -2, -1, 0, -3, -3, -1, -3, -1, -1, -3, -5, -1, -1, -1, -1, -3, -6, -5, -4, -6, -5, -1, -5, -3, -3, -3, -3, -3, -3, -3, -3, -2, -3, -5, -2, -3, -3, -4, -2, -2, -2, -3, -1, -2, -5, -1, -2, -5, -3, -5, -5, -4, -5, -5, -4, -2, 0, -1, 0, 0, -3, -1, 0, -3, -12, -1, 0, 0, -3, -5, -3, 0, -2, -4, -2, -3, -2, 0, -3, -5, -6, -5, -6, -2, -2, -5, -11, -1, -2, 0, -1, -1, -3, 0, -2, -3, -2, -3, -3, -2, -9, -8, -6, -3, -4, -6, -1, -1, -1, -4, -6, -3, 0, -2, -1, -3, -1, -3, -6, -7, -6, -1, -8, -1, -4, -8, 0, -1, -3, -1, -2, -3, -1, -2, -3, -6, -1, -3, -1, -3, -5, -5, -6, -4, -5, -1, -2, 0, -3, -6, -1, -1, -2, -1, -2, -2, -2, 0, -2, -2, -2, -1, -2, -2, -1, -1, -4, -2, -5, -1, -2, -1, -1, -2, -3, 0, -1, -2, -1, 0, -2, -1, -4, -2, -1, -1, -1, -1, -1, -1, -1, -2, 0, -2, -4, -2, -2, -3, -1, 0, -1, -1, -1, -1, -2, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -3, -1, 0, -1, 0, 0, -1, -1, -3, -2, 0, -4, -2, 0 };
		public static ExprList_item[] zeroItem = (ExprList_item)(new ExprList_item[] { null };
		public static sbyte[] zeroJournalHdr_zeroHdr = new sbyte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
		public static sbyte[] zKWText = new sbyte[] { 82, 69, 73, 78, 68, 69, 88, 69, 68, 69, 83, 67, 65, 80, 69, 65, 67, 72, 69, 67, 75, 69, 89, 66, 69, 70, 79, 82, 69, 73, 71, 78, 79, 82, 69, 71, 69, 88, 80, 76, 65, 73, 78, 83, 84, 69, 65, 68, 68, 65, 84, 65, 66, 65, 83, 69, 76, 69, 67, 84, 65, 66, 76, 69, 70, 84, 72, 69, 78, 68, 69, 70, 69, 82, 82, 65, 66, 76, 69, 76, 83, 69, 88, 67, 76, 85, 68, 69, 76, 69, 84, 69, 77, 80, 79, 82, 65, 82, 89, 73, 83, 78, 85, 76, 76, 83, 65, 86, 69, 80, 79, 73, 78, 84, 69, 82, 83, 69, 67, 84, 73, 69, 83, 78, 79, 84, 78, 85, 76, 76, 73, 75, 69, 88, 67, 69, 80, 84, 82, 65, 78, 83, 65, 67, 84, 73, 79, 78, 65, 84, 85, 82, 65, 76, 84, 69, 82, 65, 73, 83, 69, 88, 67, 76, 85, 83, 73, 86, 69, 88, 73, 83, 84, 83, 67, 79, 78, 83, 84, 82, 65, 73, 78, 84, 79, 70, 70, 83, 69, 84, 82, 73, 71, 71, 69, 82, 65, 78, 71, 69, 78, 69, 82, 65, 84, 69, 68, 69, 84, 65, 67, 72, 65, 86, 73, 78, 71, 76, 79, 66, 69, 71, 73, 78, 78, 69, 82, 69, 70, 69, 82, 69, 78, 67, 69, 83, 85, 78, 73, 81, 85, 69, 82, 89, 87, 73, 84, 72, 79, 85, 84, 69, 82, 69, 76, 69, 65, 83, 69, 65, 84, 84, 65, 67, 72, 66, 69, 84, 87, 69, 69, 78, 79, 84, 72, 73, 78, 71, 82, 79, 85, 80, 83, 67, 65, 83, 67, 65, 68, 69, 70, 65, 85, 76, 84, 67, 65, 83, 69, 67, 79, 76, 76, 65, 84, 69, 67, 82, 69, 65, 84, 69, 67, 85, 82, 82, 69, 78, 84, 95, 68, 65, 84, 69, 73, 77, 77, 69, 68, 73, 65, 84, 69, 74, 79, 73, 78, 83, 69, 82, 84, 77, 65, 84, 67, 72, 80, 76, 65, 78, 65, 76, 89, 90, 69, 80, 82, 65, 71, 77, 65, 84, 69, 82, 73, 65, 76, 73, 90, 69, 68, 69, 70, 69, 82, 82, 69, 68, 73, 83, 84, 73, 78, 67, 84, 85, 80, 68, 65, 84, 69, 86, 65, 76, 85, 69, 83, 86, 73, 82, 84, 85, 65, 76, 87, 65, 89, 83, 87, 72, 69, 78, 87, 72, 69, 82, 69, 67, 85, 82, 83, 73, 86, 69, 65, 66, 79, 82, 84, 65, 70, 84, 69, 82, 69, 78, 65, 77, 69, 65, 78, 68, 82, 79, 80, 65, 82, 84, 73, 84, 73, 79, 78, 65, 85, 84, 79, 73, 78, 67, 82, 69, 77, 69, 78, 84, 67, 65, 83, 84, 67, 79, 76, 85, 77, 78, 67, 79, 77, 77, 73, 84, 67, 79, 78, 70, 76, 73, 67, 84, 67, 82, 79, 83, 83, 67, 85, 82, 82, 69, 78, 84, 95, 84, 73, 77, 69, 83, 84, 65, 77, 80, 82, 69, 67, 69, 68, 73, 78, 71, 70, 65, 73, 76, 65, 83, 84, 70, 73, 76, 84, 69, 82, 69, 80, 76, 65, 67, 69, 70, 73, 82, 83, 84, 70, 79, 76, 76, 79, 87, 73, 78, 71, 70, 82, 79, 77, 70, 85, 76, 76, 73, 77, 73, 84, 73, 70, 79, 82, 68, 69, 82, 69, 83, 84, 82, 73, 67, 84, 79, 84, 72, 69, 82, 83, 79, 86, 69, 82, 69, 84, 85, 82, 78, 73, 78, 71, 82, 73, 71, 72, 84, 82, 79, 76, 76, 66, 65, 67, 75, 82, 79, 87, 83, 85, 78, 66, 79, 85, 78, 68, 69, 68, 85, 78, 73, 79, 78, 85, 83, 73, 78, 71, 86, 65, 67, 85, 85, 77, 86, 73, 69, 87, 73, 78, 68, 79, 87, 66, 89, 73, 78, 73, 84, 73, 65, 76, 76, 89, 80, 82, 73, 77, 65, 82, 89 };
		public static sbyte[] zMagicHeader = new sbyte[16];
	}
}