// Generated by Sichem at 4/2/2022 11:35:01 PM

using System;
using System.Runtime.InteropServices;
using Hebron.Runtime;

namespace SqliteSharp
{
	unsafe partial class Sqlite
	{
		public static int sqlite3_auto_extension(delegate73 xInit)
		{
			int rc = (int)(0);
			rc = (int)(sqlite3_initialize());
			if ((rc) != 0)
			{
				return (int)(rc);
			}
			else
			{
				uint i = 0;
				sqlite3_mutex* mutex = sqlite3MutexAlloc((int)(2));
				sqlite3_mutex_enter(mutex);
				for (i = (uint)(0); (i) < (sqlite3Autoext.nExt); i++)
				{
					if ((sqlite3Autoext.aExt[i]) == (xInit))
						break;
				}

				if ((i) == (sqlite3Autoext.nExt))
				{
					ulong nByte = (ulong)((sqlite3Autoext.nExt + 1) * sizeof(Void()) )
            ;
					delegate170 aNew;
					aNew = sqlite3_realloc64(sqlite3Autoext.aExt, (ulong)(nByte));
					if ((aNew) == (null))
					{
						rc = (int)(7);
					}
					else
					{
						sqlite3Autoext.aExt = aNew;
						sqlite3Autoext.aExt[sqlite3Autoext.nExt] = xInit;
						sqlite3Autoext.nExt++;
					}
				}

				sqlite3_mutex_leave(mutex);
				return (int)(rc);
			}
		}
		public static int sqlite3_cancel_auto_extension(delegate73 xInit)
		{
			sqlite3_mutex* mutex = sqlite3MutexAlloc((int)(2));
			int i = 0;
			int n = (int)(0);
			sqlite3_mutex_enter(mutex);
			for (i = (int)((int)(sqlite3Autoext.nExt) - 1); (i) >= (0); i--)
			{
				if ((sqlite3Autoext.aExt[i]) == (xInit))
				{
					sqlite3Autoext.nExt--;
					sqlite3Autoext.aExt[i] = sqlite3Autoext.aExt[sqlite3Autoext.nExt];
					n++;
					break;
				}
			}

			sqlite3_mutex_leave(mutex);
			return (int)(n);
		}
		public static void sqlite3BenignMallocHooks(delegate73 xBenignBegin, delegate73 xBenignEnd)
		{
			sqlite3Hooks.xBenignBegin = xBenignBegin;
			sqlite3Hooks.xBenignEnd = xBenignEnd;
		}
	}
}