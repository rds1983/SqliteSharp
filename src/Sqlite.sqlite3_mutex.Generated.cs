// Generated by Hebron at 4/3/2022 2:10:11 AM

using System;
using System.Runtime.InteropServices;
using Hebron.Runtime;

namespace SqliteSharp
{
	unsafe partial class Sqlite
	{
		public static void noopMutexEnter(sqlite3_mutex* p)
		{
			return;
		}
		public static void noopMutexFree(sqlite3_mutex* p)
		{
			return;
		}
		public static void noopMutexLeave(sqlite3_mutex* p)
		{
			return;
		}
		public static int noopMutexTry(sqlite3_mutex* p)
		{
			return (int)(0);
		}
		public static void sqlite3_mutex_enter(sqlite3_mutex* p)
		{
			if ((p) != null)
			{
				sqlite3Config.mutex.xMutexEnter(p);
			}
		}
		public static void sqlite3_mutex_free(sqlite3_mutex* p)
		{
			if ((p) != null)
			{
				sqlite3Config.mutex.xMutexFree(p);
			}
		}
		public static void sqlite3_mutex_leave(sqlite3_mutex* p)
		{
			if ((p) != null)
			{
				sqlite3Config.mutex.xMutexLeave(p);
			}
		}
		public static int sqlite3_mutex_try(sqlite3_mutex* p)
		{
			int rc = (int)(0);
			if ((p) != null)
			{
				return (int)(sqlite3Config.mutex.xMutexTry(p));
			}

			return (int)(rc);
		}
		public static void winMutexEnter(sqlite3_mutex* p)
		{
			EnterCriticalSection(&p->mutex);
		}
		public static void winMutexFree(sqlite3_mutex* p)
		{
			if (((p->id) == (0)) || ((p->id) == (1)))
			{
				DeleteCriticalSection(&p->mutex);
				sqlite3_free(p);
			}
			else
			{
			}
		}
		public static void winMutexLeave(sqlite3_mutex* p)
		{
			LeaveCriticalSection(&p->mutex);
		}
		public static int winMutexTry(sqlite3_mutex* p)
		{
			int rc = (int)(5);
			if ((winMutex_isNt) < (0))
			{
				winMutex_isNt = (int)(sqlite3_win32_is_nt());
			}

			if (((winMutex_isNt) != 0) && ((TryEnterCriticalSection(&p->mutex)) != 0))
			{
				rc = (int)(0);
			}

			return (int)(rc);
		}
	}
}