// Generated by Hebron at 4/3/2022 2:10:11 AM

using System;
using System.Runtime.InteropServices;
using Hebron.Runtime;

namespace SqliteSharp
{
	unsafe partial class Sqlite
	{
		public static int memdbAccess(sqlite3_vfs pVfs, sbyte* zPath, int flags, int* pResOut)
		{
			*pResOut = (int)(0);
			return (int)(0);
		}
		public static int memdbCurrentTimeInt64(sqlite3_vfs pVfs, long* p)
		{
			return (int)(((sqlite3_vfs)((pVfs).pAppData)).xCurrentTimeInt64(((sqlite3_vfs)((pVfs).pAppData)), p));
		}
		public static void memdbDlClose(sqlite3_vfs pVfs, void* pHandle)
		{
			((sqlite3_vfs)((pVfs).pAppData)).xDlClose(((sqlite3_vfs)((pVfs).pAppData)), pHandle);
		}
		public static void memdbDlError(sqlite3_vfs pVfs, int nByte, sbyte* zErrMsg)
		{
			((sqlite3_vfs)((pVfs).pAppData)).xDlError(((sqlite3_vfs)((pVfs).pAppData)), (int)(nByte), zErrMsg);
		}
		public static int memdbFullPathname(sqlite3_vfs pVfs, sbyte* zPath, int nOut, sbyte* zOut)
		{
			sqlite3_snprintf((int)(nOut), zOut, "%s", zPath);
			return (int)(0);
		}
		public static int memdbGetLastError(sqlite3_vfs pVfs, int a, sbyte* b)
		{
			return (int)(((sqlite3_vfs)((pVfs).pAppData)).xGetLastError(((sqlite3_vfs)((pVfs).pAppData)), (int)(a), b));
		}
		public static int memdbOpen(sqlite3_vfs pVfs, sbyte* zName, sqlite3_file pFd, int flags, int* pOutFlags)
		{
			MemFile pFile = (MemFile)(pFd);
			MemStore* p = null;
			int szName = 0;
			CRuntime.memset(pFile, (int)(0), (ulong)(sizeof(MemFile)));
			szName = (int)(sqlite3Strlen30(zName));
			if (((szName) > (1)) && ((zName[0]) == (47)))
			{
				int i = 0;
				sqlite3_mutex* pVfsMutex = sqlite3MutexAlloc((int)(11));
				sqlite3_mutex_enter(pVfsMutex);
				for (i = (int)(0); (i) < (memdb_g.nMemStore); i++)
				{
					if ((CRuntime.strcmp(memdb_g.apMemStore[i]->zFName, zName)) == (0))
					{
						p = memdb_g.apMemStore[i];
						break;
					}
				}

				if ((p) == (null))
				{
					MemStore** apNew;
					p = sqlite3Malloc((ulong)(sizeof(MemStore) + szName + 3));
					if ((p) == (null))
					{
						sqlite3_mutex_leave(pVfsMutex);
						return (int)(7);
					}

					apNew = sqlite3Realloc(memdb_g.apMemStore, (ulong)(sizeof(MemStore*) * (memdb_g.nMemStore + 1)));
					if ((apNew) == (null))
					{
						sqlite3_free(p);
						sqlite3_mutex_leave(pVfsMutex);
						return (int)(7);
					}

					apNew[memdb_g.nMemStore++] = p;
					memdb_g.apMemStore = apNew;
					CRuntime.memset(p, (int)(0), (ulong)(sizeof(MemStore)));
					p->mFlags = (uint)(2 | 1);
					p->szMax = (long)(sqlite3Config.mxMemdbSize);
					p->zFName = (sbyte*)(&p[1]);
					CRuntime.memcpy(p->zFName, zName, (ulong)(szName + 1));
					p->pMutex = sqlite3_mutex_alloc((int)(0));
					if ((p->pMutex) == (null))
					{
						memdb_g.nMemStore--;
						sqlite3_free(p);
						sqlite3_mutex_leave(pVfsMutex);
						return (int)(7);
					}

					p->nRef = (int)(1);
					memdbEnter(p);
				}
				else
				{
					memdbEnter(p);
					p->nRef++;
				}

				sqlite3_mutex_leave(pVfsMutex);
			}
			else
			{
				p = sqlite3Malloc((ulong)(sizeof(MemStore)));
				if ((p) == (null))
				{
					return (int)(7);
				}

				CRuntime.memset(p, (int)(0), (ulong)(sizeof(MemStore)));
				p->mFlags = (uint)(2 | 1);
				p->szMax = (long)(sqlite3Config.mxMemdbSize);
			}

			pFile.pStore = p;
			if (pOutFlags != null)
			{
				*pOutFlags = (int)(flags | 0x00000080);
			}

			pFd.pMethods = memdb_io_methods;
			memdbLeave(p);
			return (int)(0);
		}
		public static int memdbRandomness(sqlite3_vfs pVfs, int nByte, sbyte* zBufOut)
		{
			return (int)(((sqlite3_vfs)((pVfs).pAppData)).xRandomness(((sqlite3_vfs)((pVfs).pAppData)), (int)(nByte), zBufOut));
		}
		public static int memdbSleep(sqlite3_vfs pVfs, int nMicro)
		{
			return (int)(((sqlite3_vfs)((pVfs).pAppData)).xSleep(((sqlite3_vfs)((pVfs).pAppData)), (int)(nMicro)));
		}
		public static int sqlite3_vfs_register(sqlite3_vfs pVfs, int makeDflt)
		{
			sqlite3_mutex* mutex;
			int rc = (int)(sqlite3_initialize());
			if ((rc) != 0)
				return (int)(rc);
			mutex = sqlite3MutexAlloc((int)(2));
			sqlite3_mutex_enter(mutex);
			vfsUnlink(pVfs);
			if (((makeDflt) != 0) || ((vfsList) == (null)))
			{
				pVfs.pNext = vfsList;
				vfsList = pVfs;
			}
			else
			{
				pVfs.pNext = vfsList.pNext;
				vfsList.pNext = pVfs;
			}

			sqlite3_mutex_leave(mutex);
			return (int)(0);
		}
		public static int sqlite3_vfs_unregister(sqlite3_vfs pVfs)
		{
			sqlite3_mutex* mutex;
			int rc = (int)(sqlite3_initialize());
			if ((rc) != 0)
				return (int)(rc);
			mutex = sqlite3MutexAlloc((int)(2));
			sqlite3_mutex_enter(mutex);
			vfsUnlink(pVfs);
			sqlite3_mutex_leave(mutex);
			return (int)(0);
		}
		public static int sqlite3BtreeOpen(sqlite3_vfs pVfs, sbyte* zFilename, sqlite3 db, Btree ppBtree, int flags, int vfsFlags)
		{
			BtShared pBt = null;
			Btree p;
			sqlite3_mutex* mutexOpen = null;
			int rc = (int)(0);
			byte nReserve = 0;
			byte* zDbHeader = stackalloc byte[100];
			int isTempDb = (int)(((zFilename) == (null)) || ((zFilename[0]) == (0)) ? 1 : 0);
			int isMemdb = (int)(((((zFilename) != null) && ((CRuntime.strcmp(zFilename, ":memory:")) == (0))) || (((isTempDb) != 0) && ((sqlite3TempInMemory(db)) != 0))) || ((vfsFlags & 0x00000080) != 0) ? 1 : 0);
			if ((isMemdb) != 0)
			{
				flags |= (int)(2);
			}

			if (((vfsFlags & 0x00000100) != 0) && (((isMemdb) != 0) || ((isTempDb) != 0)))
			{
				vfsFlags = (int)((vfsFlags & ~0x00000100) | 0x00000200);
			}

			p = sqlite3MallocZero((ulong)(sizeof(Btree)));
			if (p == null)
			{
				return (int)(7);
			}

			p.inTrans = (byte)(0);
			p.db = db;
			p._lock_.pBtree = p;
			p._lock_.iTable = (uint)(1);
			if (((isTempDb) == (0)) && (((isMemdb) == (0)) || ((vfsFlags & 0x00000040) != 0)))
			{
				if ((vfsFlags & 0x00020000) != 0)
				{
					int nFilename = (int)(sqlite3Strlen30(zFilename) + 1);
					int nFullPathname = (int)(pVfs.mxPathname + 1);
					sbyte* zFullPathname = sqlite3Malloc((ulong)((nFullPathname) > (nFilename) ? (nFullPathname) : (nFilename)));
					sqlite3_mutex* mutexShared;
					p.sharable = (byte)(1);
					if (zFullPathname == null)
					{
						sqlite3_free(p);
						return (int)(7);
					}

					if ((isMemdb) != 0)
					{
						CRuntime.memcpy(zFullPathname, zFilename, (ulong)(nFilename));
					}
					else
					{
						rc = (int)(sqlite3OsFullPathname(pVfs, zFilename, (int)(nFullPathname), zFullPathname));
						if ((rc) != 0)
						{
							if ((rc) == (0 | (2 << 8)))
							{
								rc = (int)(0);
							}
							else
							{
								sqlite3_free(zFullPathname);
								sqlite3_free(p);
								return (int)(rc);
							}
						}
					}

					mutexOpen = sqlite3MutexAlloc((int)(4));
					sqlite3_mutex_enter(mutexOpen);
					mutexShared = sqlite3MutexAlloc((int)(2));
					sqlite3_mutex_enter(mutexShared);
					for (pBt = sqlite3SharedCacheList; pBt; pBt = pBt.pNext)
					{
						if (((0) == (CRuntime.strcmp(zFullPathname, sqlite3PagerFilename(pBt.pPager, (int)(0))))) && ((sqlite3PagerVfs(pBt.pPager)) == (pVfs)))
						{
							int iDb = 0;
							for (iDb = (int)(db.nDb - 1); (iDb) >= (0); iDb--)
							{
								Btree pExisting = db.aDb[iDb].pBt;
								if (((pExisting) != null) && ((pExisting.pBt) == (pBt)))
								{
									sqlite3_mutex_leave(mutexShared);
									sqlite3_mutex_leave(mutexOpen);
									sqlite3_free(zFullPathname);
									sqlite3_free(p);
									return (int)(19);
								}
							}

							p.pBt = pBt;
							pBt.nRef++;
							break;
						}
					}

					sqlite3_mutex_leave(mutexShared);
					sqlite3_free(zFullPathname);
				}
			}

			if ((pBt) == (null))
			{
				pBt = sqlite3MallocZero((ulong)(sizeof(BtShared)));
				if ((pBt) == (null))
				{
					rc = (int)(7);
					goto btree_open_out;
				}

				rc = (int)(sqlite3PagerOpen(pVfs, pBt.pPager, zFilename, (int)(sizeof(MemPage)), (int)(flags), (int)(vfsFlags), pageReinit));
				if ((rc) == (0))
				{
					sqlite3PagerSetMmapLimit(pBt.pPager, (long)(db.szMmap));
					rc = (int)(sqlite3PagerReadFileheader(pBt.pPager, (int)(100 * sizeof(byte)), zDbHeader));
				}

				if (rc != 0)
				{
					goto btree_open_out;
				}

				pBt.openFlags = ((byte)(flags));
				pBt.db = db;
				sqlite3PagerSetBusyHandler(pBt.pPager, btreeInvokeBusyHandler, pBt);
				p.pBt = pBt;
				pBt.pCursor = null;
				pBt.pPage1 = null;
				if ((sqlite3PagerIsreadonly(pBt.pPager)) != 0)
					pBt.btsFlags |= (ushort)(0x0001);
				pBt.pageSize = (uint)((zDbHeader[16] << 8) | (zDbHeader[17] << 16));
				if ((((pBt.pageSize) < (512)) || ((pBt.pageSize) > (65536))) || (((pBt.pageSize - 1) & pBt.pageSize) != 0))
				{
					pBt.pageSize = (uint)(0);
					if (((zFilename) != null) && (isMemdb == 0))
					{
						pBt.autoVacuum = (byte)((0) != 0 ? 1 : 0);
						pBt.incrVacuum = (byte)((0) == (2) ? 1 : 0);
					}

					nReserve = (byte)(0);
				}
				else
				{
					nReserve = (byte)(zDbHeader[20]);
					pBt.btsFlags |= (ushort)(0x0002);
					pBt.autoVacuum = (byte)((sqlite3Get4byte(&zDbHeader[36 + 4 * 4])) != 0 ? 1 : 0);
					pBt.incrVacuum = (byte)((sqlite3Get4byte(&zDbHeader[36 + 7 * 4])) != 0 ? 1 : 0);
				}

				rc = (int)(sqlite3PagerSetPagesize(pBt.pPager, &pBt.pageSize, (int)(nReserve)));
				if ((rc) != 0)
					goto btree_open_out;
				pBt.usableSize = (uint)(pBt.pageSize - nReserve);
				pBt.nRef = (int)(1);
				if ((p.sharable) != 0)
				{
					sqlite3_mutex* mutexShared;
					mutexShared = sqlite3MutexAlloc((int)(2));
					if (((1) != 0) && ((sqlite3Config.bCoreMutex) != 0))
					{
						pBt.mutex = sqlite3MutexAlloc((int)(0));
						if ((pBt.mutex) == (null))
						{
							rc = (int)(7);
							goto btree_open_out;
						}
					}

					sqlite3_mutex_enter(mutexShared);
					pBt.pNext = sqlite3SharedCacheList;
					sqlite3SharedCacheList = pBt;
					sqlite3_mutex_leave(mutexShared);
				}
			}

			if ((p.sharable) != 0)
			{
				int i = 0;
				Btree pSib;
				for (i = (int)(0); (i) < (db.nDb); i++)
				{
					if (((pSib = db.aDb[i].pBt) != null) && ((pSib.sharable) != 0))
					{
						while ((pSib.pPrev) != null)
						{
							pSib = pSib.pPrev;
						}

						if (((ulong)(p.pBt)) < ((ulong)(pSib.pBt)))
						{
							p.pNext = pSib;
							p.pPrev = null;
							pSib.pPrev = p;
						}
						else
						{
							while (((pSib.pNext) != null) && (((ulong)(pSib.pNext.pBt)) < ((ulong)(p.pBt))))
							{
								pSib = pSib.pNext;
							}

							p.pNext = pSib.pNext;
							p.pPrev = pSib;
							if ((p.pNext) != null)
							{
								p.pNext.pPrev = p;
							}

							pSib.pNext = p;
						}

						break;
					}
				}
			}

			ppBtree = p;
		btree_open_out:
			; if (rc != 0) { if (((pBt) != null) && ((pBt.pPager) != null)) { sqlite3PagerClose(pBt.pPager, null); } sqlite3_free(pBt); sqlite3_free(p); ppBtree = null; } else { sqlite3_file pFile; if ((sqlite3BtreeSchema(p, (int)(0), null)) == (null)) { sqlite3BtreeSetCacheSize(p, (int)(-2000)); } pFile = sqlite3PagerFile(pBt.pPager); if ((pFile.pMethods) != null) { sqlite3OsFileControlHint(pFile, (int)(30), (void*)(pBt.db)); } }
			if ((mutexOpen) != null)
			{
				sqlite3_mutex_leave(mutexOpen);
			}

			return (int)(rc);
		}
		public static int sqlite3JournalOpen(sqlite3_vfs pVfs, sbyte* zName, sqlite3_file pJfd, int flags, int nSpill)
		{
			MemJournal p = (MemJournal)(pJfd);
			CRuntime.memset(p, (int)(0), (ulong)(sizeof(MemJournal)));
			if ((nSpill) == (0))
			{
				return (int)(sqlite3OsOpen(pVfs, zName, pJfd, (int)(flags), null));
			}

			if ((nSpill) > (0))
			{
				p.nChunkSize = (int)(nSpill);
			}
			else
			{
				p.nChunkSize = (int)(8 + 1024 - sizeof(FileChunk));
			}

			pJfd.pMethods = MemJournalMethods;
			p.nSpill = (int)(nSpill);
			p.flags = (int)(flags);
			p.zJournal = zName;
			p.pVfs = pVfs;
			return (int)(0);
		}
		public static int sqlite3JournalSize(sqlite3_vfs pVfs)
		{
			return (int)((pVfs.szOsFile) > ((int)(sizeof(MemJournal))) ? (pVfs.szOsFile) : ((int)(sizeof(MemJournal))));
		}
		public static int sqlite3OsAccess(sqlite3_vfs pVfs, sbyte* zPath, int flags, int* pResOut)
		{
			return (int)(pVfs.xAccess(pVfs, zPath, (int)(flags), pResOut));
		}
		public static int sqlite3OsCurrentTimeInt64(sqlite3_vfs pVfs, long* pTimeOut)
		{
			int rc = 0;
			if (((pVfs.iVersion) >= (2)) && ((pVfs.xCurrentTimeInt64) != null))
			{
				rc = (int)(pVfs.xCurrentTimeInt64(pVfs, pTimeOut));
			}
			else
			{
				double r = 0;
				rc = (int)(pVfs.xCurrentTime(pVfs, &r));
				*pTimeOut = ((long)(r * 86400000.0));
			}

			return (int)(rc);
		}
		public static int sqlite3OsDelete(sqlite3_vfs pVfs, sbyte* zPath, int dirSync)
		{
			return (int)(pVfs.xDelete != null ? pVfs.xDelete(pVfs, zPath, (int)(dirSync)) : 0);
		}
		public static void sqlite3OsDlClose(sqlite3_vfs pVfs, void* pHandle)
		{
			pVfs.xDlClose(pVfs, pHandle);
		}
		public static void sqlite3OsDlError(sqlite3_vfs pVfs, int nByte, sbyte* zBufOut)
		{
			pVfs.xDlError(pVfs, (int)(nByte), zBufOut);
		}
		public static int sqlite3OsFullPathname(sqlite3_vfs pVfs, sbyte* zPath, int nPathOut, sbyte* zPathOut)
		{
			zPathOut[0] = (sbyte)(0);
			return (int)(pVfs.xFullPathname(pVfs, zPath, (int)(nPathOut), zPathOut));
		}
		public static int sqlite3OsGetLastError(sqlite3_vfs pVfs)
		{
			return (int)(pVfs.xGetLastError ? pVfs.xGetLastError(pVfs, (int)(0), null) : 0);
		}
		public static int sqlite3OsOpen(sqlite3_vfs pVfs, sbyte* zPath, sqlite3_file pFile, int flags, int* pFlagsOut)
		{
			int rc = 0;
			rc = (int)(pVfs.xOpen(pVfs, zPath, pFile, (int)(flags & 0x1087f7f), pFlagsOut));
			return (int)(rc);
		}
		public static int sqlite3OsOpenMalloc(sqlite3_vfs pVfs, sbyte* zFile, sqlite3_file ppFile, int flags, int* pOutFlags)
		{
			int rc = 0;
			sqlite3_file pFile;
			pFile = (sqlite3_file)(sqlite3MallocZero((ulong)(pVfs.szOsFile)));
			if ((pFile) != null)
			{
				rc = (int)(sqlite3OsOpen(pVfs, zFile, pFile, (int)(flags), pOutFlags));
				if (rc != 0)
				{
					sqlite3_free(pFile);
					ppFile = null;
				}
				else
				{
					ppFile = pFile;
				}
			}
			else
			{
				ppFile = null;
				rc = (int)(7);
			}

			return (int)(rc);
		}
		public static int sqlite3OsRandomness(sqlite3_vfs pVfs, int nByte, sbyte* zBufOut)
		{
			if ((sqlite3Config.iPrngSeed) != 0)
			{
				CRuntime.memset(zBufOut, (int)(0), (ulong)(nByte));
				if (((nByte) > ((int)(sizeof(unsigned)))))
					nByte = (int)(sizeof(unsignedint));
				CRuntime.memcpy(zBufOut, &sqlite3Config.iPrngSeed, (ulong)(nByte));
				return (int)(0);
			}
			else
			{
				return (int)(pVfs.xRandomness(pVfs, (int)(nByte), zBufOut));
			}
		}
		public static int sqlite3OsSleep(sqlite3_vfs pVfs, int nMicro)
		{
			return (int)(pVfs.xSleep(pVfs, (int)(nMicro)));
		}
		public static int sqlite3PagerOpen(sqlite3_vfs pVfs, Pager ppPager, sbyte* zFilename, int nExtra, int flags, int vfsFlags, delegate76 xReinit)
		{
			byte* pPtr;
			Pager pPager = null;
			int rc = (int)(0);
			int tempFile = (int)(0);
			int memDb = (int)(0);
			int memJM = (int)(0);
			int readOnly = (int)(0);
			int journalFileSize = 0;
			sbyte* zPathname = null;
			int nPathname = (int)(0);
			int useJournal = (int)((flags & 0x0001) == (0) ? 1 : 0);
			int pcacheSize = (int)(sqlite3PcacheSize());
			uint szPageDflt = (uint)(4096);
			sbyte* zUri = null;
			int nUriByte = (int)(1);
			int nUri = (int)(0);
			journalFileSize = (int)(((sqlite3JournalSize(pVfs)) + 7) & ~7);
			ppPager = null;
			if ((flags & 0x0002) != 0)
			{
				memDb = (int)(1);
				if (((zFilename) != null) && ((zFilename[0]) != 0))
				{
					zPathname = sqlite3DbStrDup(null, zFilename);
					if ((zPathname) == (null))
						return (int)(7);
					nPathname = (int)(sqlite3Strlen30(zPathname));
					zFilename = null;
				}
			}

			if (((zFilename) != null) && ((zFilename[0]) != 0))
			{
				sbyte* z;
				nPathname = (int)(pVfs.mxPathname + 1);
				zPathname = sqlite3DbMallocRaw(null, (ulong)(nPathname * 2));
				if ((zPathname) == (null))
				{
					return (int)(7);
				}

				zPathname[0] = (sbyte)(0);
				rc = (int)(sqlite3OsFullPathname(pVfs, zFilename, (int)(nPathname), zPathname));
				if (rc != 0)
				{
					if ((rc) == (0 | (2 << 8)))
					{
						if ((vfsFlags & 0x01000000) != 0)
						{
							rc = (int)(14 | (6 << 8));
						}
						else
						{
							rc = (int)(0);
						}
					}
				}

				nPathname = (int)(sqlite3Strlen30(zPathname));
				z = zUri = &zFilename[sqlite3Strlen30(zFilename) + 1];
				while ((*z) != 0)
				{
					z += CRuntime.strlen(z) + 1;
					z += CRuntime.strlen(z) + 1;
					nUri++;
				}

				nUriByte = ((int)(&z[1] - zUri));
				if (((rc) == (0)) && ((nPathname + 8) > (pVfs.mxPathname)))
				{
					rc = (int)(sqlite3CantopenError((int)(57974)));
				}

				if (rc != 0)
				{
					sqlite3DbFree(null, zPathname);
					return (int)(rc);
				}
			}

			pPtr = (byte*)(sqlite3MallocZero((ulong)((((sizeof(Pager)) + 7) & ~7) + (((pcacheSize) + 7) & ~7) + (((pVfs.szOsFile) + 7) & ~7) + journalFileSize * 2 + sizeof(Pager) + 4 + nPathname + 1 + nUriByte + nPathname + 8 + 1 + nPathname + 4 + 1 + 3)));
			if (pPtr == null)
			{
				sqlite3DbFree(null, zPathname);
				return (int)(7);
			}

			pPager = (Pager)(pPtr);
			pPtr += (((sizeof(Pager)) + 7) & ~7);
			pPager.pPCache = (PCache)(pPtr);
			pPtr += (((pcacheSize) + 7) & ~7);
			pPager.fd = (sqlite3_file)(pPtr);
			pPtr += (((pVfs.szOsFile) + 7) & ~7);
			pPager.sjfd = (sqlite3_file)(pPtr);
			pPtr += journalFileSize;
			pPager.jfd = (sqlite3_file)(pPtr);
			pPtr += journalFileSize;
			CRuntime.memcpy(pPtr, pPager, (ulong)(sizeof(Pager)));
			pPtr += sizeof(Pager);
			pPtr += 4;
			pPager.zFilename = (sbyte*)(pPtr);
			if ((nPathname) > (0))
			{
				CRuntime.memcpy(pPtr, zPathname, (ulong)(nPathname));
				pPtr += nPathname + 1;
				if ((zUri) != null)
				{
					CRuntime.memcpy(pPtr, zUri, (ulong)(nUriByte));
					pPtr += nUriByte;
				}
				else
				{
					pPtr++;
				}
			}

			if ((nPathname) > (0))
			{
				pPager.zJournal = (sbyte*)(pPtr);
				CRuntime.memcpy(pPtr, zPathname, (ulong)(nPathname));
				pPtr += nPathname;
				CRuntime.memcpy(pPtr, "-journal", (ulong)(8));
				pPtr += 8 + 1;
			}
			else
			{
				pPager.zJournal = null;
			}

			if ((nPathname) > (0))
			{
				pPager.zWal = (sbyte*)(pPtr);
				CRuntime.memcpy(pPtr, zPathname, (ulong)(nPathname));
				pPtr += nPathname;
				CRuntime.memcpy(pPtr, "-wal", (ulong)(4));
				pPtr += 4 + 1;
			}
			else
			{
				pPager.zWal = null;
			}

			(void)(pPtr);
			if ((nPathname) != 0)
				sqlite3DbFree(null, zPathname);
			pPager.pVfs = pVfs;
			pPager.vfsFlags = (uint)(vfsFlags);
			if (((zFilename) != null) && ((zFilename[0]) != 0))
			{
				int fout = (int)(0);
				rc = (int)(sqlite3OsOpen(pVfs, pPager.zFilename, pPager.fd, (int)(vfsFlags), &fout));
				pPager.memVfs = (byte)(memJM = (int)((fout & 0x00000080) != 0));
				readOnly = (int)((fout & 0x00000001) != 0);
				if ((rc) == (0))
				{
					int iDc = (int)(sqlite3OsDeviceCharacteristics(pPager.fd));
					if (readOnly == 0)
					{
						setSectorSize(pPager);
						if ((szPageDflt) < (pPager.sectorSize))
						{
							if ((pPager.sectorSize) > (8192))
							{
								szPageDflt = (uint)(8192);
							}
							else
							{
								szPageDflt = (uint)(pPager.sectorSize);
							}
						}
					}

					pPager.noLock = (byte)(sqlite3_uri_boolean(pPager.zFilename, "nolock", (int)(0)));
					if (((iDc & 0x00002000) != 0) || ((sqlite3_uri_boolean(pPager.zFilename, "immutable", (int)(0))) != 0))
					{
						vfsFlags |= (int)(0x00000001);
						goto act_like_temp_file;
					}
				}
			}
			else
			{
			act_like_temp_file:
				;
				tempFile = (int)(1);
				pPager.eState = (byte)(1);
				pPager.eLock = (byte)(4);
				pPager.noLock = (byte)(1);
				readOnly = (int)(vfsFlags & 0x00000001);
			}

			if ((rc) == (0))
			{
				rc = (int)(sqlite3PagerSetPagesize(pPager, &szPageDflt, (int)(-1)));
			}

			if ((rc) == (0))
			{
				nExtra = (int)(((nExtra) + 7) & ~7);
				rc = (int)(sqlite3PcacheOpen((int)(szPageDflt), (int)(nExtra), (int)(!memDb), (!memDb) != 0 ? pagerStress : null, (void*)(pPager), pPager.pPCache));
			}

			if (rc != 0)
			{
				sqlite3OsClose(pPager.fd);
				sqlite3PageFree(pPager.pTmpSpace);
				sqlite3_free(pPager);
				return (int)(rc);
			}

			pPager.useJournal = ((byte)(useJournal));
			pPager.mxPgno = (uint)(1073741823);
			pPager.tempFile = ((byte)(tempFile));
			pPager.exclusiveMode = ((byte)(tempFile));
			pPager.changeCountDone = (byte)(pPager.tempFile);
			pPager.memDb = ((byte)(memDb));
			pPager.readOnly = ((byte)(readOnly));
			pPager.noSync = (byte)(pPager.tempFile);
			if ((pPager.noSync) != 0)
			{
			}
			else
			{
				pPager.fullSync = (byte)(1);
				pPager.extraSync = (byte)(0);
				pPager.syncFlags = (byte)(0x00002);
				pPager.walSyncFlags = (byte)(0x00002 | (0x00002 << 2));
			}

			pPager.nExtra = ((ushort)(nExtra));
			pPager.journalSizeLimit = (long)(-1);
			setSectorSize(pPager);
			if (useJournal == 0)
			{
				pPager.journalMode = (byte)(2);
			}
			else if (((memDb) != 0) || ((memJM) != 0))
			{
				pPager.journalMode = (byte)(4);
			}

			pPager.xReiniter = xReinit;
			setGetterMethod(pPager);
			ppPager = pPager;
			return (int)(0);
		}
		public static int sqlite3WalOpen(sqlite3_vfs pVfs, sqlite3_file pDbFd, sbyte* zWalName, int bNoShm, long mxWalSize, Wal ppWal)
		{
			int rc = 0;
			Wal pRet;
			int flags = 0;
			ppWal = null;
			pRet = (Wal)(sqlite3MallocZero((ulong)(sizeof(Wal) + pVfs.szOsFile)));
			if (pRet == null)
			{
				return (int)(7);
			}

			pRet.pVfs = pVfs;
			pRet.pWalFd = (sqlite3_file)(pRet[1]);
			pRet.pDbFd = pDbFd;
			pRet.readLock = (short)(-1);
			pRet.mxWalSize = (long)(mxWalSize);
			pRet.zWalName = zWalName;
			pRet.syncHeader = (byte)(1);
			pRet.padToSectorBoundary = (byte)(1);
			pRet.exclusiveMode = (byte)((bNoShm) != 0 ? 2 : 0);
			flags = (int)(0x00000002 | 0x00000004 | 0x00080000);
			rc = (int)(sqlite3OsOpen(pVfs, zWalName, pRet.pWalFd, (int)(flags), &flags));
			if (((rc) == (0)) && ((flags & 0x00000001) != 0))
			{
				pRet.readOnly = (byte)(1);
			}

			if (rc != 0)
			{
				walIndexClose(pRet, (int)(0));
				sqlite3OsClose(pRet.pWalFd);
				sqlite3_free(pRet);
			}
			else
			{
				int iDC = (int)(sqlite3OsDeviceCharacteristics(pDbFd));
				if ((iDC & 0x00000400) != 0)
				{
					pRet.syncHeader = (byte)(0);
				}

				if ((iDC & 0x00001000) != 0)
				{
					pRet.padToSectorBoundary = (byte)(0);
				}

				ppWal = pRet;
			}

			return (int)(rc);
		}
		public static void vfsUnlink(sqlite3_vfs pVfs)
		{
			if ((pVfs) == (null))
			{
			}
			else if ((vfsList) == (pVfs))
			{
				vfsList = pVfs.pNext;
			}
			else if ((vfsList) != null)
			{
				sqlite3_vfs p = vfsList;
				while (((p.pNext) != null) && (p.pNext != pVfs))
				{
					p = p.pNext;
				}

				if ((p.pNext) == (pVfs))
				{
					p.pNext = pVfs.pNext;
				}
			}
		}
		public static int winAccess(sqlite3_vfs pVfs, sbyte* zFilename, int flags, int* pResOut)
		{
			uint attr = 0;
			int rc = (int)(0);
			uint lastErrno = (uint)(0);
			void* zConverted;
			zConverted = winConvertFromUtf8Filename(zFilename);
			if ((zConverted) == (null))
			{
				return (int)(10 | (12 << 8));
			}

			if ((1) != 0)
			{
				int cnt = (int)(0);
				_WIN32_FILE_ATTRIBUTE_DATA sAttrData = new _WIN32_FILE_ATTRIBUTE_DATA();
				CRuntime.memset(&sAttrData, (int)(0), (ulong)(sizeof(_WIN32_FILE_ATTRIBUTE_DATA)));
				while ((!(rc = (int)((aSyscall[22].pCurrent)((ushort*)(zConverted), (GetFileExInfoStandard), &sAttrData))))
			&& ((winRetryIoerr(&cnt, &lastErrno)) != 0))
				{
				}

				if ((rc) != 0)
				{
					if ((((flags) == (0)) && ((sAttrData.nFileSizeHigh) == (0))) && ((sAttrData.nFileSizeLow) == (0)))
					{
						attr = ((uint)(-1));
					}
					else
					{
						attr = (uint)(sAttrData.dwFileAttributes);
					}
				}

				else
				{
					winLogIoerr((int)(cnt), (int)(48387));
					if ((lastErrno != 2L) && (lastErrno != 3L))
					{
						sqlite3_free(zConverted);
						return (int)(winLogErrorAtLine((int)(10 | (13 << 8)), (uint)(lastErrno), "winAccess", zFilename, (int)(48391)));
					}
					else
					{
						attr = ((uint)(-1));
					}
				}
			}

			else
			{
				attr = (uint)((Uint(Sbyte * ))(aSyscall[20].pCurrent)((sbyte*)(zConverted)));
			}

			sqlite3_free(zConverted);
			switch (flags)
			{
				case 2:
				case 0:
					rc = (int)(attr != ((uint)(-1)));
					break;
				case 1:
					rc = (int)((attr != ((uint)(-1))) && ((attr & 0x00000001) == (0)) ? 1 : 0);
					break;
				default:
					;
			}

			*pResOut = (int)(rc);
			return (int)(0);
		}
		public static int winCurrentTime(sqlite3_vfs pVfs, double* prNow)
		{
			int rc = 0;
			long i = 0;
			rc = (int)(winCurrentTimeInt64(pVfs, &i));
			if (rc == 0)
			{
				*prNow = (double)(i / 86400000.0);
			}

			return (int)(rc);
		}
		public static int winCurrentTimeInt64(sqlite3_vfs pVfs, long* piNow)
		{
			_FILETIME ft = new _FILETIME();
			(Void(_FILETIME * ))(aSyscall[30].pCurrent)(&ft);
			*piNow = (long)(winCurrentTimeInt64_winFiletimeEpoch + ((((long)(ft.dwHighDateTime)) * winCurrentTimeInt64_max32BitValue) + (long)(ft.dwLowDateTime)) / (long)(10000));
			return (int)(0);
		}
		public static int winDelete(sqlite3_vfs pVfs, sbyte* zFilename, int syncDir)
		{
			int cnt = (int)(0);
			int rc = 0;
			uint attr = 0;
			uint lastErrno = (uint)(0);
			void* zConverted;
			zConverted = winConvertFromUtf8Filename(zFilename);
			if ((zConverted) == (null))
			{
				return (int)(10 | (12 << 8));
			}

			if ((1) != 0)
			{
				do
				{
					attr = (uint)((Uint(UShort * ))(aSyscall[21].pCurrent)(zConverted));
					if ((attr) == ((uint)(-1)))
					{
						lastErrno = (uint)((Uint())(aSyscall[26].pCurrent)());
						if (((lastErrno) == (2L)) || ((lastErrno) == (3L)))
						{
							rc = (int)(10 | (23 << 8));
						}
						else
						{
							rc = (int)(1);
						}

						break;
					}

					if ((attr & 0x00000010) != 0)
					{
						rc = (int)(1);
						break;
					}

					if (((Int(UShort * ))(aSyscall[10].pCurrent)(zConverted)) != 0)
					{
						rc = (int)(0);
						break;
					}

					if (winRetryIoerr(&cnt, &lastErrno) == 0)
					{
						rc = (int)(1);
						break;
					}
				}
				while ((1) != 0);
			}
			else
			{
				do
				{
					attr = (uint)((Uint(Sbyte * ))(aSyscall[20].pCurrent)(zConverted));
					if ((attr) == ((uint)(-1)))
					{
						lastErrno = (uint)((Uint())(aSyscall[26].pCurrent)());
						if (((lastErrno) == (2L)) || ((lastErrno) == (3L)))
						{
							rc = (int)(10 | (23 << 8));
						}
						else
						{
							rc = (int)(1);
						}

						break;
					}

					if ((attr & 0x00000010) != 0)
					{
						rc = (int)(1);
						break;
					}

					if (((Int(Sbyte * ))(aSyscall[9].pCurrent)(zConverted)) != 0)
					{
						rc = (int)(0);
						break;
					}

					if (winRetryIoerr(&cnt, &lastErrno) == 0)
					{
						rc = (int)(1);
						break;
					}
				}
				while ((1) != 0);
			}

			if (((rc) != 0) && (rc != (10 | (23 << 8))))
			{
				rc = (int)(winLogErrorAtLine((int)(10 | (10 << 8)), (uint)(lastErrno), "winDelete", zFilename, (int)(48335)));
			}
			else
			{
				winLogIoerr((int)(cnt), (int)(48337));
			}

			sqlite3_free(zConverted);
			return (int)(rc);
		}
		public static void winDlClose(sqlite3_vfs pVfs, void* pHandle)
		{
			(Int(HINSTANCE__ * ))(aSyscall[16].pCurrent)(pHandle);
		}
		public static void winDlError(sqlite3_vfs pVfs, int nBuf, sbyte* zBufOut)
		{
			winGetLastErrorMsg((uint)((Uint())(aSyscall[26].pCurrent)()), (int)(nBuf), zBufOut);
		}
		public static int winFullPathname(sqlite3_vfs pVfs, sbyte* zRelative, int nFull, sbyte* zFull)
		{
			uint nByte = 0;
			void* zConverted;
			sbyte* zOut;
			if (((zRelative[0]) == (47)) && (((winIsDriveLetterAndColon(zRelative + 1)) != 0) || ((winIsLongPathPrefix(zRelative + 1)) != 0)))
			{
				zRelative++;
			}

			if (((sqlite3_data_directory) != null) && (winIsVerbatimPathname(zRelative) == 0))
			{
				sqlite3_snprintf((int)((nFull) < (pVfs.mxPathname) ? (nFull) : (pVfs.mxPathname)), zFull, "%s%c%s", sqlite3_data_directory, (int)(92), zRelative);
				return (int)(0);
			}

			zConverted = winConvertFromUtf8Filename(zRelative);
			if ((zConverted) == (null))
			{
				return (int)(10 | (12 << 8));
			}

			if ((1) != 0)
			{
				ushort* zTemp;
				nByte = (uint)((Uint(UShort * , UShort * , UShort * , UShort * ))(aSyscall[25].pCurrent)((ushort*)(zConverted), (uint)(0), null, null));
				if ((nByte) == (0))
				{
					sqlite3_free(zConverted);
					return (int)(winLogErrorAtLine((int)(14 | (3 << 8)), (uint)((Uint())(aSyscall[26].pCurrent)()), "winFullPathname1", zRelative, (int)(48608)));
				}

				nByte += (uint)(3);
				zTemp = sqlite3MallocZero((ulong)(nByte * sizeof(ushort)));
				if ((zTemp) == (null))
				{
					sqlite3_free(zConverted);
					return (int)(10 | (12 << 8));
				}

				nByte = (uint)((Uint(UShort * , UShort * , UShort * , UShort * ))(aSyscall[25].pCurrent)((ushort*)(zConverted), (uint)(nByte), zTemp, null));
				if ((nByte) == (0))
				{
					sqlite3_free(zConverted);
					sqlite3_free(zTemp);
					return (int)(winLogErrorAtLine((int)(14 | (3 << 8)), (uint)((Uint())(aSyscall[26].pCurrent)()), "winFullPathname2", zRelative, (int)(48621)));
				}

				sqlite3_free(zConverted);
				zOut = winUnicodeToUtf8(zTemp);
				sqlite3_free(zTemp);
			}
			else
			{
				sbyte* zTemp;
				nByte = (uint)((Uint(Sbyte * , Sbyte * , Sbyte * , Sbyte * ))(aSyscall[24].pCurrent)((sbyte*)(zConverted), (uint)(0), null, null));
				if ((nByte) == (0))
				{
					sqlite3_free(zConverted);
					return (int)(winLogErrorAtLine((int)(14 | (3 << 8)), (uint)((Uint())(aSyscall[26].pCurrent)()), "winFullPathname3", zRelative, (int)(48634)));
				}

				nByte += (uint)(3);
				zTemp = sqlite3MallocZero((ulong)(nByte * sizeof(sbyte)));
				if ((zTemp) == (null))
				{
					sqlite3_free(zConverted);
					return (int)(10 | (12 << 8));
				}

				nByte = (uint)((Uint(Sbyte * , Sbyte * , Sbyte * , Sbyte * ))(aSyscall[24].pCurrent)((sbyte*)(zConverted), (uint)(nByte), zTemp, null));
				if ((nByte) == (0))
				{
					sqlite3_free(zConverted);
					sqlite3_free(zTemp);
					return (int)(winLogErrorAtLine((int)(14 | (3 << 8)), (uint)((Uint())(aSyscall[26].pCurrent)()), "winFullPathname4", zRelative, (int)(48647)));
				}

				sqlite3_free(zConverted);
				zOut = winMbcsToUtf8(zTemp, (int)((Int())(aSyscall[0].pCurrent)()));
				sqlite3_free(zTemp);
			}

			if ((zOut) != null)
			{
				sqlite3_snprintf((int)((nFull) < (pVfs.mxPathname) ? (nFull) : (pVfs.mxPathname)), zFull, "%s", zOut);
				sqlite3_free(zOut);
				return (int)(0);
			}
			else
			{
				return (int)(10 | (12 << 8));
			}
		}
		public static int winGetLastError(sqlite3_vfs pVfs, int nBuf, sbyte* zBuf)
		{
			uint e = (uint)((Uint())(aSyscall[26].pCurrent)());
			if ((nBuf) > (0))
				winGetLastErrorMsg((uint)(e), (int)(nBuf), zBuf);
			return (int)(e);
		}
		public static int winGetTempname(sqlite3_vfs pVfs, sbyte** pzBuf)
		{
			ulong i = 0; ulong j = 0;
			int nPre = (int)(sqlite3Strlen30("etilqs_"));
			int nMax = 0; int nBuf = 0; int nDir = 0; int nLen = 0;
			sbyte* zBuf;
			nMax = (int)(pVfs.mxPathname);
			nBuf = (int)(nMax + 2);
			zBuf = sqlite3MallocZero((ulong)(nBuf));
			if (zBuf == null)
			{
				return (int)(10 | (12 << 8));
			}

			nDir = (int)(nMax - (nPre + 15));
			if ((sqlite3_temp_directory) != null)
			{
				int nDirLen = (int)(sqlite3Strlen30(sqlite3_temp_directory));
				if ((nDirLen) > (0))
				{
					if (!(((sqlite3_temp_directory[nDirLen - 1]) == (47)) || ((sqlite3_temp_directory[nDirLen - 1]) == (92))))
					{
						nDirLen++;
					}

					if ((nDirLen) > (nDir))
					{
						sqlite3_free(zBuf);
						return (int)(winLogErrorAtLine((int)(1), (uint)(0), "winGetTempname1", null, (int)(47691)));
					}

					sqlite3_snprintf((int)(nMax), zBuf, "%s", sqlite3_temp_directory);
				}
			}
			else if ((1) != 0)
			{
				sbyte* zMulti;
				ushort* zWidePath = sqlite3MallocZero((ulong)(nMax * sizeof(ushort)));
				if (zWidePath == null)
				{
					sqlite3_free(zBuf);
					return (int)(10 | (12 << 8));
				}

				if (((Uint(Uint, Uint))(aSyscall[32].pCurrent)((uint)(nMax), zWidePath)) == (0))
				{
					sqlite3_free(zWidePath);
					sqlite3_free(zBuf);
					return (int)(winLogErrorAtLine((int)(10 | (25 << 8)), (uint)((Uint())(aSyscall[26].pCurrent)()), "winGetTempname2", null, (int)(47790)));
				}

				zMulti = winUnicodeToUtf8(zWidePath);
				if ((zMulti) != null)
				{
					sqlite3_snprintf((int)(nMax), zBuf, "%s", zMulti);
					sqlite3_free(zMulti);
					sqlite3_free(zWidePath);
				}
				else
				{
					sqlite3_free(zWidePath);
					sqlite3_free(zBuf);
					return (int)(10 | (12 << 8));
				}
			}
			else
			{
				sbyte* zUtf8;
				sbyte* zMbcsPath = sqlite3MallocZero((ulong)(nMax));
				if (zMbcsPath == null)
				{
					sqlite3_free(zBuf);
					return (int)(10 | (12 << 8));
				}

				if (((Uint(Uint, Uint))(aSyscall[31].pCurrent)((uint)(nMax), zMbcsPath)) == (0))
				{
					sqlite3_free(zBuf);
					return (int)(winLogErrorAtLine((int)(10 | (25 << 8)), (uint)((Uint())(aSyscall[26].pCurrent)()), "winGetTempname3", null, (int)(47817)));
				}

				zUtf8 = winMbcsToUtf8(zMbcsPath, (int)((Int())(aSyscall[0].pCurrent)()));
				if ((zUtf8) != null)
				{
					sqlite3_snprintf((int)(nMax), zBuf, "%s", zUtf8);
					sqlite3_free(zUtf8);
				}
				else
				{
					sqlite3_free(zBuf);
					return (int)(10 | (12 << 8));
				}
			}

			if (winMakeEndInDirSep((int)(nDir + 1), zBuf) == 0)
			{
				sqlite3_free(zBuf);
				return (int)(winLogErrorAtLine((int)(1), (uint)(0), "winGetTempname4", null, (int)(47840)));
			}

			nLen = (int)(sqlite3Strlen30(zBuf));
			if ((nLen + nPre + 17) > (nBuf))
			{
				sqlite3_free(zBuf);
				return (int)(winLogErrorAtLine((int)(1), (uint)(0), "winGetTempname5", null, (int)(47858)));
			}

			sqlite3_snprintf((int)(nBuf - 16 - nLen), zBuf + nLen, "etilqs_");
			j = (ulong)(sqlite3Strlen30(zBuf));
			sqlite3_randomness((int)(15), &zBuf[j]);
			for (i = (ulong)(0); (i) < (15); i++, j++)
			{
				zBuf[j] = (sbyte)(winGetTempname_zChars[((byte)(zBuf[j])) % (63 * sizeof(sbyte) - 1)]);
			}

			zBuf[j] = (sbyte)(0);
			zBuf[j + 1] = (sbyte)(0);
			*pzBuf = zBuf;
			return (int)(0);
		}
		public static int winOpen(sqlite3_vfs pVfs, sbyte* zName, sqlite3_file id, int flags, int* pOutFlags)
		{
			void* h;
			uint lastErrno = (uint)(0);
			uint dwDesiredAccess = 0;
			uint dwShareMode = 0;
			uint dwCreationDisposition = 0;
			uint dwFlagsAndAttributes = (uint)(0);
			winVfsAppData pAppData;
			winFile pFile = (winFile)(id);
			void* zConverted;
			sbyte* zUtf8Name = zName;
			int cnt = (int)(0);
			sbyte* zTmpname = null;
			int rc = (int)(0);
			int isExclusive = (int)(flags & 0x00000010);
			int isDelete = (int)(flags & 0x00000008);
			int isCreate = (int)(flags & 0x00000004);
			int isReadonly = (int)(flags & 0x00000001);
			int isReadWrite = (int)(flags & 0x00000002);
			CRuntime.memset(pFile, (int)(0), (ulong)(sizeof(winFile)));
			pFile.h = ((void*)((long)(-1)));
			if (zUtf8Name == null)
			{
				rc = (int)(winGetTempname(pVfs, &zTmpname));
				if (rc != 0)
				{
					return (int)(rc);
				}

				zUtf8Name = zTmpname;
			}

			zConverted = winConvertFromUtf8Filename(zUtf8Name);
			if ((zConverted) == (null))
			{
				sqlite3_free(zTmpname);
				return (int)(10 | (12 << 8));
			}

			if ((winIsDir(zConverted)) != 0)
			{
				sqlite3_free(zConverted);
				sqlite3_free(zTmpname);
				return (int)(14 | (2 << 8));
			}

			if ((isReadWrite) != 0)
			{
				dwDesiredAccess = (uint)((0x80000000L) | (0x40000000L));
			}
			else
			{
				dwDesiredAccess = (uint)(0x80000000L);
			}

			if ((isExclusive) != 0)
			{
				dwCreationDisposition = (uint)(1);
			}
			else if ((isCreate) != 0)
			{
				dwCreationDisposition = (uint)(4);
			}
			else
			{
				dwCreationDisposition = (uint)(3);
			}

			if ((0) == (sqlite3_uri_boolean(zName, "exclusive", (int)(0))))
			{
				dwShareMode = (uint)(0x00000001 | 0x00000002);
			}
			else
			{
				dwShareMode = (uint)(0);
			}

			if ((isDelete) != 0)
			{
				dwFlagsAndAttributes = (uint)(0x00000100 | 0x00000002 | 0x04000000);
			}
			else
			{
				dwFlagsAndAttributes = (uint)(0x00000080);
			}

			if ((1) != 0)
			{
				do
				{
					h = (Void * (UShort * , UShort * , UShort * , UShort * , UShort * , UShort * , UShort * ))(aSyscall[5].pCurrent)((ushort*)(zConverted), (uint)(dwDesiredAccess), (uint)(dwShareMode), null, (uint)(dwCreationDisposition), (uint)(dwFlagsAndAttributes), null);
					if (h != ((void*)((long)(-1))))
						break;
					if ((isReadWrite) != 0)
					{
						int rc2 = 0;
						int isRO = (int)(0);
						sqlite3BeginBenignMalloc();
						rc2 = (int)(winAccess(pVfs, zName, (int)(2), &isRO));
						sqlite3EndBenignMalloc();
						if (((rc2) == (0)) && ((isRO) != 0))
							break;
					}
				}
				while ((winRetryIoerr(&cnt, &lastErrno)) != 0);
			}
			else
			{
				do
				{
					h = (Void * (Sbyte * , Sbyte * , Sbyte * , Sbyte * , Sbyte * , Sbyte * , Sbyte * ))(aSyscall[4].pCurrent)((sbyte*)(zConverted), (uint)(dwDesiredAccess), (uint)(dwShareMode), null, (uint)(dwCreationDisposition), (uint)(dwFlagsAndAttributes), null);
					if (h != ((void*)((long)(-1))))
						break;
					if ((isReadWrite) != 0)
					{
						int rc2 = 0;
						int isRO = (int)(0);
						sqlite3BeginBenignMalloc();
						rc2 = (int)(winAccess(pVfs, zName, (int)(2), &isRO));
						sqlite3EndBenignMalloc();
						if (((rc2) == (0)) && ((isRO) != 0))
							break;
					}
				}
				while ((winRetryIoerr(&cnt, &lastErrno)) != 0);
			}

			winLogIoerr((int)(cnt), (int)(48147));
			if ((h) == ((void*)((long)(-1))))
			{
				sqlite3_free(zConverted);
				sqlite3_free(zTmpname);
				if (((isReadWrite) != 0) && (isExclusive == 0))
				{
					return (int)(winOpen(pVfs, zName, id, (int)((flags | 0x00000001) & ~(0x00000004 | 0x00000002)), pOutFlags));
				}
				else
				{
					pFile.lastErrno = (uint)(lastErrno);
					winLogErrorAtLine((int)(14), (uint)(pFile.lastErrno), "winOpen", zUtf8Name, (int)(48162));
					return (int)(sqlite3CantopenError((int)(48163)));
				}
			}

			if ((pOutFlags) != null)
			{
				if ((isReadWrite) != 0)
				{
					*pOutFlags = (int)(0x00000002);
				}
				else
				{
					*pOutFlags = (int)(0x00000001);
				}
			}

			pAppData = (winVfsAppData)(pVfs.pAppData);
			{
				sqlite3_free(zConverted);
			}

			sqlite3_free(zTmpname);
			id.pMethods = pAppData ? pAppData.pMethod : winIoMethod;
			pFile.pVfs = pVfs;
			pFile.h = h;
			if ((isReadonly) != 0)
			{
				pFile.ctrlFlags |= (byte)(0x02);
			}

			if (((flags & 0x00000100) != 0) && ((sqlite3_uri_boolean(zName, "psow", (int)(1))) != 0))
			{
				pFile.ctrlFlags |= (byte)(0x10);
			}

			pFile.lastErrno = (uint)(0L);
			pFile.zPath = zName;
			pFile.hMap = null;
			pFile.pMapRegion = null;
			pFile.mmapSize = (long)(0);
			pFile.mmapSizeMax = (long)(sqlite3Config.szMmap);
			return (int)(rc);
		}
		public static int winRandomness(sqlite3_vfs pVfs, int nBuf, sbyte* zBuf)
		{
			EntropyGatherer e = new EntropyGatherer();
			CRuntime.memset(zBuf, (int)(0), (ulong)(nBuf));
			e.a = (byte*)(zBuf);
			e.na = (int)(nBuf);
			e.nXor = (int)(0);
			e.i = (int)(0);
			{
				_SYSTEMTIME x = new _SYSTEMTIME();
				(Void(_SYSTEMTIME * ))(aSyscall[29].pCurrent)(&x);
				xorMemory(&e, (byte*)(&x), (int)(sizeof(_SYSTEMTIME)));
			}

			{
				uint pid = (uint)((Uint())(aSyscall[17].pCurrent)());
				xorMemory(&e, (byte*)(&pid), (int)(sizeof(uint)));
			}

			{
				uint cnt = (uint)((Uint())(aSyscall[33].pCurrent)());
				xorMemory(&e, (byte*)(&cnt), (int)(sizeof(uint)));
			}

			{
				union _LARGE_INTEGER i = new union _LARGE_INTEGER();
				(Int(union_LARGE_INTEGER * ))(aSyscall[51].pCurrent)(&i);
				xorMemory(&e, (byte*)(&i), (int)(sizeof(union _LARGE_INTEGER) ) )
        ;
			}

			return (int)((e.nXor) > (nBuf) ? nBuf : e.nXor);
		}
		public static int winSetSystemCall(sqlite3_vfs pNotUsed, sbyte* zName, delegate74 pNewFunc)
		{
			uint i = 0;
			int rc = (int)(12);
			if ((zName) == (null))
			{
				rc = (int)(0);
				for (i = (uint)(0); (i) < (80 * sizeof(win_syscall) / sizeof(win_syscall)); i++)
				{
					if ((aSyscall[i].pDefault) != null)
					{
						aSyscall[i].pCurrent = aSyscall[i].pDefault;
					}
				}
			}
			else
			{
				for (i = (uint)(0); (i) < (80 * sizeof(win_syscall) / sizeof(win_syscall)); i++)
				{
					if ((CRuntime.strcmp(zName, aSyscall[i].zName)) == (0))
					{
						if ((aSyscall[i].pDefault) == (null))
						{
							aSyscall[i].pDefault = aSyscall[i].pCurrent;
						}

						rc = (int)(0);
						if ((pNewFunc) == (null))
							pNewFunc = aSyscall[i].pDefault;
						aSyscall[i].pCurrent = pNewFunc;
						break;
					}
				}
			}

			return (int)(rc);
		}
		public static void winShmPurge(sqlite3_vfs pVfs, int deleteFlag)
		{
			winShmNode pp;
			winShmNode p;
			pp = winShmNodeList;
			while ((p = pp) != null)
			{
				if ((p.nRef) == (0))
				{
					int i = 0;
					if ((p.mutex) != null)
					{
						sqlite3_mutex_free(p.mutex);
					}

					for (i = (int)(0); (i) < (p.nRegion); i++)
					{
						int bRc = (int)((Int(Void * ))(aSyscall[59].pCurrent)(p.aRegion[i].pMap));
						(void)(bRc);
						bRc = (int)((Int(Void * ))(aSyscall[3].pCurrent)(p.aRegion[i].hMap));
						(void)(bRc);
					}

					if ((p.hFile.h != null) && (p.hFile.h != ((void*)((long)(-1)))))
					{
						winClose((sqlite3_file)(p.hFile));
					}

					if ((deleteFlag) != 0)
					{
						sqlite3BeginBenignMalloc();
						winDelete(pVfs, p.zFilename, (int)(0));
						sqlite3EndBenignMalloc();
					}

					pp = p.pNext;
					sqlite3_free(p.aRegion);
					sqlite3_free(p);
				}
				else
				{
					pp = p.pNext;
				}
			}
		}
		public static int winSleep(sqlite3_vfs pVfs, int microsec)
		{
			sqlite3_win32_sleep((uint)((microsec + 999) / 1000));
			return (int)(((microsec + 999) / 1000) * 1000);
		}
	}
}