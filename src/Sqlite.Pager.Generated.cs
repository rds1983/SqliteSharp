// Generated by Hebron at 4/3/2022 2:10:10 AM

using System;
using System.Runtime.InteropServices;
using Hebron.Runtime;

namespace SqliteSharp
{
	unsafe partial class Sqlite
	{
		public static int addToSavepointBitvecs(Pager pPager, uint pgno)
		{
			int ii = 0;
			int rc = (int)(0);
			for (ii = (int)(0); (ii) < (pPager.nSavepoint); ii++)
			{
				PagerSavepoint* p = &pPager.aSavepoint[ii];
				if ((pgno) <= (p->nOrig))
				{
					rc |= (int)(sqlite3BitvecSet(p->pInSavepoint, (uint)(pgno)));
				}
			}

			return (int)(rc);
		}
		public static int databaseIsUnmoved(Pager pPager)
		{
			int bHasMoved = (int)(0);
			int rc = 0;
			if ((pPager.tempFile) != 0)
				return (int)(0);
			if ((pPager.dbSize) == (0))
				return (int)(0);
			rc = (int)(sqlite3OsFileControl(pPager.fd, (int)(20), &bHasMoved));
			if ((rc) == (12))
			{
				rc = (int)(0);
			}
			else if (((rc) == (0)) && ((bHasMoved) != 0))
			{
				rc = (int)(8 | (4 << 8));
			}

			return (int)(rc);
		}
		public static int getPageError(Pager pPager, uint pgno, PgHdr ppPage, int flags)
		{
			ppPage = null;
			return (int)(pPager.errCode);
		}
		public static int getPageMMap(Pager pPager, uint pgno, PgHdr ppPage, int flags)
		{
			int rc = (int)(0);
			PgHdr pPg = null;
			uint iFrame = (uint)(0);
			int bMmapOk = (int)((((pgno) > (1)) && (((pPager.eState) == (1)) || ((flags & 0x02) != 0))) ? 1 : 0);
			if (((pgno) <= (1)) && ((pgno) == (0)))
			{
				return (int)(sqlite3CorruptError((int)(58828)));
			}

			if (((bMmapOk) != 0) && ((pPager).pWal != null))
			{
				rc = (int)(sqlite3WalFindFrame(pPager.pWal, (uint)(pgno), &iFrame));
				if (rc != 0)
				{
					ppPage = null;
					return (int)(rc);
				}
			}

			if (((bMmapOk) != 0) && ((iFrame) == (0)))
			{
				void* pData = null;
				rc = (int)(sqlite3OsFetch(pPager.fd, (long)((long)(pgno - 1) * pPager.pageSize), (int)(pPager.pageSize), &pData));
				if (((rc) == (0)) && ((pData) != null))
				{
					if (((pPager.eState) > (1)) || ((pPager.tempFile) != 0))
					{
						pPg = sqlite3PagerLookup(pPager, (uint)(pgno));
					}

					if ((pPg) == (null))
					{
						rc = (int)(pagerAcquireMapPage(pPager, (uint)(pgno), pData, pPg));
					}
					else
					{
						sqlite3OsUnfetch(pPager.fd, (long)((long)(pgno - 1) * pPager.pageSize), pData);
					}

					if ((pPg) != null)
					{
						ppPage = pPg;
						return (int)(0);
					}
				}

				if (rc != 0)
				{
					ppPage = null;
					return (int)(rc);
				}
			}

			return (int)(getPageNormal(pPager, (uint)(pgno), ppPage, (int)(flags)));
		}
		public static int getPageNormal(Pager pPager, uint pgno, PgHdr ppPage, int flags)
		{
			int rc = (int)(0);
			PgHdr pPg;
			byte noContent = 0;
			sqlite3_pcache_page* pBase;
			if ((pgno) == (0))
				return (int)(sqlite3CorruptError((int)(58717)));
			pBase = sqlite3PcacheFetch(pPager.pPCache, (uint)(pgno), (int)(3));
			if ((pBase) == (null))
			{
				pPg = null;
				rc = (int)(sqlite3PcacheFetchStress(pPager.pPCache, (uint)(pgno), &pBase));
				if (rc != 0)
					goto pager_acquire_err;
				if ((pBase) == (null))
				{
					rc = (int)(7);
					goto pager_acquire_err;
				}
			}

			pPg = ppPage = sqlite3PcacheFetchFinish(pPager.pPCache, (uint)(pgno), pBase);
			noContent = (byte)((flags & 0x01) != 0);
			if (((pPg.pPager) != null) && (noContent == 0))
			{
				pPager.aStat[0]++;
				return (int)(0);
			}
			else
			{
				if ((pgno) == ((uint)((sqlite3PendingByte / ((pPager).pageSize)) + 1)))
				{
					rc = (int)(sqlite3CorruptError((int)(58749)));
					goto pager_acquire_err;
				}

				pPg.pPager = pPager;
				if (((!((pPager.fd).pMethods != null)) || ((pPager.dbSize) < (pgno))) || ((noContent) != 0))
				{
					if ((pgno) > (pPager.mxPgno))
					{
						rc = (int)(13);
						goto pager_acquire_err;
					}

					if ((noContent) != 0)
					{
						sqlite3BeginBenignMalloc();
						if ((pgno) <= (pPager.dbOrigSize))
						{
							sqlite3BitvecSet(pPager.pInJournal, (uint)(pgno));
						}

						addToSavepointBitvecs(pPager, (uint)(pgno));
						sqlite3EndBenignMalloc();
					}

					CRuntime.memset(pPg.pData, (int)(0), (ulong)(pPager.pageSize));
				}
				else
				{
					pPager.aStat[1]++;
					rc = (int)(readDbPage(pPg));
					if (rc != 0)
					{
						goto pager_acquire_err;
					}
				}
			}

			return (int)(0);
		pager_acquire_err:
			;
			if ((pPg) != null)
			{
				sqlite3PcacheDrop(pPg);
			}

			pagerUnlockIfUnused(pPager);
			ppPage = null;
			return (int)(rc);
		}
		public static int hasHotJournal(Pager pPager, int* pExists)
		{
			sqlite3_vfs pVfs = pPager.pVfs;
			int rc = (int)(0);
			int exists = (int)(1);
			int jrnlOpen = (int)(!!((pPager.jfd).pMethods != null));
			*pExists = (int)(0);
			if (jrnlOpen == 0)
			{
				rc = (int)(sqlite3OsAccess(pVfs, pPager.zJournal, (int)(0), &exists));
			}

			if (((rc) == (0)) && ((exists) != 0))
			{
				int locked = (int)(0);
				rc = (int)(sqlite3OsCheckReservedLock(pPager.fd, &locked));
				if (((rc) == (0)) && (locked == 0))
				{
					uint nPage = 0;
					rc = (int)(pagerPagecount(pPager, &nPage));
					if ((rc) == (0))
					{
						if (((nPage) == (0)) && (jrnlOpen == 0))
						{
							sqlite3BeginBenignMalloc();
							if ((pagerLockDb(pPager, (int)(2))) == (0))
							{
								sqlite3OsDelete(pVfs, pPager.zJournal, (int)(0));
								if (pPager.exclusiveMode == 0)
									pagerUnlockDb(pPager, (int)(1));
							}

							sqlite3EndBenignMalloc();
						}
						else
						{
							if (jrnlOpen == 0)
							{
								int f = (int)(0x00000001 | 0x00000800);
								rc = (int)(sqlite3OsOpen(pVfs, pPager.zJournal, pPager.jfd, (int)(f), &f));
							}

							if ((rc) == (0))
							{
								byte first = (byte)(0);
								rc = (int)(sqlite3OsRead(pPager.jfd, (void*)(&first), (int)(1), (long)(0)));
								if ((rc) == (10 | (2 << 8)))
								{
									rc = (int)(0);
								}

								if (jrnlOpen == 0)
								{
									sqlite3OsClose(pPager.jfd);
								}

								*pExists = (int)(first != 0);
							}
							else if ((rc) == (14))
							{
								*pExists = (int)(1);
								rc = (int)(0);
							}
						}
					}
				}
			}

			return (int)(rc);
		}
		public static long journalHdrOffset(Pager pPager)
		{
			long offset = (long)(0);
			long c = (long)(pPager.journalOff);
			if ((c) != 0)
			{
				offset = (long)(((c - 1) / (pPager.sectorSize) + 1) * (pPager.sectorSize));
			}

			return (long)(offset);
		}
		public static int jrnlBufferSize(Pager pPager)
		{
			return (int)(0);
		}
		public static int openSubJournal(Pager pPager)
		{
			int rc = (int)(0);
			if (!((pPager.sjfd).pMethods != null))
			{
				int flags = (int)(0x00002000 | 0x00000002 | 0x00000004 | 0x00000010 | 0x00000008);
				int nStmtSpill = (int)(sqlite3Config.nStmtSpill);
				if (((pPager.journalMode) == (4)) || ((pPager.subjInMemory) != 0))
				{
					nStmtSpill = (int)(-1);
				}

				rc = (int)(sqlite3JournalOpen(pPager.pVfs, null, pPager.sjfd, (int)(flags), (int)(nStmtSpill)));
			}

			return (int)(rc);
		}
		public static uint pager_cksum(Pager pPager, byte* aData)
		{
			uint cksum = (uint)(pPager.cksumInit);
			int i = (int)(pPager.pageSize - 200);
			while ((i) > (0))
			{
				cksum += (uint)(aData[i]);
				i -= (int)(200);
			}

			return (uint)(cksum);
		}
		public static int pager_delsuper(Pager pPager, sbyte* zSuper)
		{
			sqlite3_vfs pVfs = pPager.pVfs;
			int rc = 0;
			sqlite3_file pSuper;
			sqlite3_file pJournal;
			sbyte* zSuperJournal = null;
			long nSuperJournal = 0;
			sbyte* zJournal;
			sbyte* zSuperPtr;
			sbyte* zFree = null;
			int nSuperPtr = 0;
			pSuper = (sqlite3_file)(sqlite3MallocZero((ulong)(pVfs.szOsFile * 2)));
			if (pSuper == null)
			{
				rc = (int)(7);
				pJournal = null;
			}
			else
			{
				int flags = (int)(0x00000001 | 0x00004000);
				rc = (int)(sqlite3OsOpen(pVfs, zSuper, pSuper, (int)(flags), null));
				pJournal = (sqlite3_file)(((byte*)(pSuper)) + pVfs.szOsFile);
			}

			if (rc != 0)
				goto delsuper_out;
			rc = (int)(sqlite3OsFileSize(pSuper, &nSuperJournal));
			if (rc != 0)
				goto delsuper_out;
			nSuperPtr = (int)(pVfs.mxPathname + 1);
			zFree = sqlite3Malloc((ulong)(4 + nSuperJournal + nSuperPtr + 2));
			if (zFree == null)
			{
				rc = (int)(7);
				goto delsuper_out;
			}

			zFree[0] = (sbyte)(zFree[1] = (sbyte)(zFree[2] = (sbyte)(zFree[3] = (sbyte)(0))));
			zSuperJournal = &zFree[4];
			zSuperPtr = &zSuperJournal[nSuperJournal + 2];
			rc = (int)(sqlite3OsRead(pSuper, zSuperJournal, (int)(nSuperJournal), (long)(0)));
			if (rc != 0)
				goto delsuper_out;
			zSuperJournal[nSuperJournal] = (sbyte)(0);
			zSuperJournal[nSuperJournal + 1] = (sbyte)(0);
			zJournal = zSuperJournal;
			while ((zJournal - zSuperJournal) < (nSuperJournal))
			{
				int exists = 0;
				rc = (int)(sqlite3OsAccess(pVfs, zJournal, (int)(0), &exists));
				if (rc != 0)
				{
					goto delsuper_out;
				}

				if ((exists) != 0)
				{
					int c = 0;
					int flags = (int)(0x00000001 | 0x00004000);
					rc = (int)(sqlite3OsOpen(pVfs, zJournal, pJournal, (int)(flags), null));
					if (rc != 0)
					{
						goto delsuper_out;
					}

					rc = (int)(readSuperJournal(pJournal, zSuperPtr, (uint)(nSuperPtr)));
					sqlite3OsClose(pJournal);
					if (rc != 0)
					{
						goto delsuper_out;
					}

					c = (int)((zSuperPtr[0] != 0) && ((CRuntime.strcmp(zSuperPtr, zSuper)) == (0)) ? 1 : 0);
					if ((c) != 0)
					{
						goto delsuper_out;
					}
				}

				zJournal += (sqlite3Strlen30(zJournal) + 1);
			}

			sqlite3OsClose(pSuper);
			rc = (int)(sqlite3OsDelete(pVfs, zSuper, (int)(0)));
		delsuper_out:
			; sqlite3_free(zFree);
			if ((pSuper) != null)
			{
				sqlite3OsClose(pSuper);
				sqlite3_free(pSuper);
			}

			return (int)(rc);
		}
		public static int pager_end_transaction(Pager pPager, int hasSuper, int bCommit)
		{
			int rc = (int)(0);
			int rc2 = (int)(0);
			if (((pPager.eState) < (2)) && ((pPager.eLock) < (2)))
			{
				return (int)(0);
			}

			releaseAllSavepoints(pPager);
			if (((pPager.jfd).pMethods != null))
			{
				if ((sqlite3JournalIsInMemory(pPager.jfd)) != 0)
				{
					sqlite3OsClose(pPager.jfd);
				}
				else if ((pPager.journalMode) == (3))
				{
					if ((pPager.journalOff) == (0))
					{
						rc = (int)(0);
					}
					else
					{
						rc = (int)(sqlite3OsTruncate(pPager.jfd, (long)(0)));
						if (((rc) == (0)) && ((pPager.fullSync) != 0))
						{
							rc = (int)(sqlite3OsSync(pPager.jfd, (int)(pPager.syncFlags)));
						}
					}

					pPager.journalOff = (long)(0);
				}
				else if (((pPager.journalMode) == (1)) || (((pPager.exclusiveMode) != 0) && (pPager.journalMode != 5)))
				{
					rc = (int)(zeroJournalHdr(pPager, (((hasSuper) != 0) || ((pPager.tempFile) != 0) ? 1 : 0)));
					pPager.journalOff = (long)(0);
				}
				else
				{
					int bDelete = (int)(!pPager.tempFile);
					sqlite3OsClose(pPager.jfd);
					if ((bDelete) != 0)
					{
						rc = (int)(sqlite3OsDelete(pPager.pVfs, pPager.zJournal, (int)(pPager.extraSync)));
					}
				}
			}

			sqlite3BitvecDestroy(pPager.pInJournal);
			pPager.pInJournal = null;
			pPager.nRec = (int)(0);
			if ((rc) == (0))
			{
				if (((pPager.memDb) != 0) || ((pagerFlushOnCommit(pPager, (int)(bCommit))) != 0))
				{
					sqlite3PcacheCleanAll(pPager.pPCache);
				}
				else
				{
					sqlite3PcacheClearWritable(pPager.pPCache);
				}

				sqlite3PcacheTruncate(pPager.pPCache, (uint)(pPager.dbSize));
			}

			if (((pPager).pWal != null))
			{
				rc2 = (int)(sqlite3WalEndWriteTransaction(pPager.pWal));
			}
			else if ((((rc) == (0)) && ((bCommit) != 0)) && ((pPager.dbFileSize) > (pPager.dbSize)))
			{
				rc = (int)(pager_truncate(pPager, (uint)(pPager.dbSize)));
			}

			if (((rc) == (0)) && ((bCommit) != 0))
			{
				rc = (int)(sqlite3OsFileControl(pPager.fd, (int)(22), null));
				if ((rc) == (12))
					rc = (int)(0);
			}

			if ((pPager.exclusiveMode == 0) && ((!((pPager).pWal != null)) || ((sqlite3WalExclusiveMode(pPager.pWal, (int)(0))) != 0)))
			{
				rc2 = (int)(pagerUnlockDb(pPager, (int)(1)));
			}

			pPager.eState = (byte)(1);
			pPager.setSuper = (byte)(0);
			return (int)((rc) == (0) ? rc2 : rc);
		}
		public static int pager_error(Pager pPager, int rc)
		{
			int rc2 = (int)(rc & 0xff);
			if (((rc2) == (13)) || ((rc2) == (10)))
			{
				pPager.errCode = (int)(rc);
				pPager.eState = (byte)(6);
				setGetterMethod(pPager);
			}

			return (int)(rc);
		}
		public static int pager_incr_changecounter(Pager pPager, int isDirectMode)
		{
			int rc = (int)(0);
			if ((pPager.changeCountDone == 0) && ((pPager.dbSize) > (0)))
			{
				PgHdr pPgHdr;
				rc = (int)(sqlite3PagerGet(pPager, (uint)(1), pPgHdr, (int)(0)));
				if ((0 == 0) && ((rc) == (0)))
				{
					rc = (int)(sqlite3PagerWrite(pPgHdr));
				}

				if ((rc) == (0))
				{
					pager_write_changecounter(pPgHdr);
					if ((0) != 0)
					{
						void* zBuf;
						zBuf = pPgHdr.pData;
						if ((rc) == (0))
						{
							rc = (int)(sqlite3OsWrite(pPager.fd, zBuf, (int)(pPager.pageSize), (long)(0)));
							pPager.aStat[2]++;
						}

						if ((rc) == (0))
						{
							void* pCopy = (void*)(&((sbyte*)(zBuf))[24]);
							CRuntime.memcpy(&pPager.dbFileVers, pCopy, (ulong)(16 * sizeof(sbyte)));
							pPager.changeCountDone = (byte)(1);
						}
					}
					else
					{
						pPager.changeCountDone = (byte)(1);
					}
				}

				sqlite3PagerUnref(pPgHdr);
			}

			return (int)(rc);
		}
		public static int pager_open_journal(Pager pPager)
		{
			int rc = (int)(0);
			sqlite3_vfs pVfs = pPager.pVfs;
			if ((pPager.errCode) != 0)
				return (int)(pPager.errCode);
			if ((!((pPager).pWal != null)) && (pPager.journalMode != 2))
			{
				pPager.pInJournal = sqlite3BitvecCreate((uint)(pPager.dbSize));
				if ((pPager.pInJournal) == (null))
				{
					return (int)(7);
				}

				if (!((pPager.jfd).pMethods != null))
				{
					if ((pPager.journalMode) == (4))
					{
						sqlite3MemJournalOpen(pPager.jfd);
					}
					else
					{
						int flags = (int)(0x00000002 | 0x00000004);
						int nSpill = 0;
						if ((pPager.tempFile) != 0)
						{
							flags |= (int)(0x00000008 | 0x00001000);
							nSpill = (int)(sqlite3Config.nStmtSpill);
						}
						else
						{
							flags |= (int)(0x00000800);
							nSpill = (int)(jrnlBufferSize(pPager));
						}

						rc = (int)(databaseIsUnmoved(pPager));
						if ((rc) == (0))
						{
							rc = (int)(sqlite3JournalOpen(pVfs, pPager.zJournal, pPager.jfd, (int)(flags), (int)(nSpill)));
						}
					}
				}

				if ((rc) == (0))
				{
					pPager.nRec = (int)(0);
					pPager.journalOff = (long)(0);
					pPager.setSuper = (byte)(0);
					pPager.journalHdr = (long)(0);
					rc = (int)(writeJournalHdr(pPager));
				}
			}

			if (rc != 0)
			{
				sqlite3BitvecDestroy(pPager.pInJournal);
				pPager.pInJournal = null;
			}
			else
			{
				pPager.eState = (byte)(3);
			}

			return (int)(rc);
		}
		public static int pager_playback(Pager pPager, int isHot)
		{
			sqlite3_vfs pVfs = pPager.pVfs;
			long szJ = 0;
			uint nRec = 0;
			uint u = 0;
			uint mxPg = (uint)(0);
			int rc = 0;
			int res = (int)(1);
			sbyte* zSuper = null;
			int needPagerReset = 0;
			int nPlayback = (int)(0);
			uint savedPageSize = (uint)(pPager.pageSize);
			rc = (int)(sqlite3OsFileSize(pPager.jfd, &szJ));
			if (rc != 0)
			{
				goto end_playback;
			}

			zSuper = pPager.pTmpSpace;
			rc = (int)(readSuperJournal(pPager.jfd, zSuper, (uint)(pPager.pVfs.mxPathname + 1)));
			if (((rc) == (0)) && ((zSuper[0]) != 0))
			{
				rc = (int)(sqlite3OsAccess(pVfs, zSuper, (int)(0), &res));
			}

			zSuper = null;
			if ((rc != 0) || (res == 0))
			{
				goto end_playback;
			}

			pPager.journalOff = (long)(0);
			needPagerReset = (int)(isHot);
			while ((1) != 0)
			{
				rc = (int)(readJournalHdr(pPager, (int)(isHot), (long)(szJ), &nRec, &mxPg));
				if (rc != 0)
				{
					if ((rc) == (101))
					{
						rc = (int)(0);
					}

					goto end_playback;
				}

				if ((nRec) == (0xffffffff))
				{
					nRec = (uint)((int)((szJ - (pPager.sectorSize)) / ((pPager.pageSize) + 8)));
				}

				if ((((nRec) == (0)) && (isHot == 0)) && ((pPager.journalHdr + (pPager.sectorSize)) == (pPager.journalOff)))
				{
					nRec = (uint)((int)((szJ - pPager.journalOff) / ((pPager.pageSize) + 8)));
				}

				if ((pPager.journalOff) == (pPager.sectorSize))
				{
					rc = (int)(pager_truncate(pPager, (uint)(mxPg)));
					if (rc != 0)
					{
						goto end_playback;
					}

					pPager.dbSize = (uint)(mxPg);
					if ((pPager.mxPgno) < (mxPg))
					{
						pPager.mxPgno = (uint)(mxPg);
					}
				}

				for (u = (uint)(0); (u) < (nRec); u++)
				{
					if ((needPagerReset) != 0)
					{
						pager_reset(pPager);
						needPagerReset = (int)(0);
					}

					rc = (int)(pager_playback_one_page(pPager, &pPager.journalOff, null, (int)(1), (int)(0)));
					if ((rc) == (0))
					{
						nPlayback++;
					}
					else
					{
						if ((rc) == (101))
						{
							pPager.journalOff = (long)(szJ);
							break;
						}
						else if ((rc) == (10 | (2 << 8)))
						{
							rc = (int)(0);
							goto end_playback;
						}
						else
						{
							goto end_playback;
						}
					}
				}
			}

		end_playback:
			; if ((rc) == (0)) { rc = (int)(sqlite3PagerSetPagesize(pPager, &savedPageSize, (int)(-1))); }
			pPager.changeCountDone = (byte)(pPager.tempFile);
			if ((rc) == (0))
			{
				zSuper = &pPager.pTmpSpace[4];
				rc = (int)(readSuperJournal(pPager.jfd, zSuper, (uint)(pPager.pVfs.mxPathname + 1)));
			}

			if (((rc) == (0)) && (((pPager.eState) >= (4)) || ((pPager.eState) == (0))))
			{
				rc = (int)(sqlite3PagerSync(pPager, null));
			}

			if ((rc) == (0))
			{
				rc = (int)(pager_end_transaction(pPager, (int)(zSuper[0] != 0), (int)(0)));
			}

			if ((((rc) == (0)) && ((zSuper[0]) != 0)) && ((res) != 0))
			{
				CRuntime.memset(&zSuper[-4], (int)(0), (ulong)(4));
				rc = (int)(pager_delsuper(pPager, zSuper));
			}

			if (((isHot) != 0) && ((nPlayback) != 0))
			{
				sqlite3_log((int)(27 | (2 << 8)), "recovered %d pages from %s", (int)(nPlayback), pPager.zJournal);
			}

			setSectorSize(pPager);
			return (int)(rc);
		}
		public static int pager_playback_one_page(Pager pPager, long* pOffset, Bitvec* pDone, int isMainJrnl, int isSavepnt)
		{
			int rc = 0;
			PgHdr pPg;
			uint pgno = 0;
			uint cksum = 0;
			sbyte* aData;
			sqlite3_file jfd;
			int isSynced = 0;
			aData = pPager.pTmpSpace;
			jfd = (isMainJrnl) != 0 ? pPager.jfd : pPager.sjfd;
			rc = (int)(read32bits(jfd, (long)(*pOffset), &pgno));
			if (rc != 0)
				return (int)(rc);
			rc = (int)(sqlite3OsRead(jfd, (byte*)(aData), (int)(pPager.pageSize), (long)((*pOffset) + 4)));
			if (rc != 0)
				return (int)(rc);
			*pOffset += (long)(pPager.pageSize + 4 + isMainJrnl * 4);
			if (((pgno) == (0)) || ((pgno) == ((uint)((sqlite3PendingByte / ((pPager).pageSize)) + 1))))
			{
				return (int)(101);
			}

			if (((pgno) > (pPager.dbSize)) || ((sqlite3BitvecTest(pDone, (uint)(pgno))) != 0))
			{
				return (int)(0);
			}

			if ((isMainJrnl) != 0)
			{
				rc = (int)(read32bits(jfd, (long)((*pOffset) - 4), &cksum));
				if ((rc) != 0)
					return (int)(rc);
				if ((isSavepnt == 0) && (pager_cksum(pPager, (byte*)(aData)) != cksum))
				{
					return (int)(101);
				}
			}

			if (((pDone) != null) && ((rc = (int)(sqlite3BitvecSet(pDone, (uint)(pgno)))) != 0))
			{
				return (int)(rc);
			}

			if (((pgno) == (1)) && (pPager.nReserve != ((byte*)(aData))[20]))
			{
				pPager.nReserve = (short)(((byte*)(aData))[20]);
			}

			if (((pPager).pWal != null))
			{
				pPg = null;
			}
			else
			{
				pPg = sqlite3PagerLookup(pPager, (uint)(pgno));
			}

			if ((isMainJrnl) != 0)
			{
				isSynced = (int)(((pPager.noSync) != 0) || ((*pOffset) <= (pPager.journalHdr)) ? 1 : 0);
			}
			else
			{
				isSynced = (int)(((pPg) == (null)) || ((0) == (pPg.flags & 0x008)) ? 1 : 0);
			}

			if ((((pPager.fd).pMethods != null) && (((pPager.eState) >= (4)) || ((pPager.eState) == (0)))) && ((isSynced) != 0))
			{
				long ofst = (long)((pgno - 1) * pPager.pageSize);
				rc = (int)(sqlite3OsWrite(pPager.fd, (byte*)(aData), (int)(pPager.pageSize), (long)(ofst)));
				if ((pgno) > (pPager.dbFileSize))
				{
					pPager.dbFileSize = (uint)(pgno);
				}

				if ((pPager.pBackup) != null)
				{
					sqlite3BackupUpdate(pPager.pBackup, (uint)(pgno), (byte*)(aData));
				}
			}
			else if ((isMainJrnl == 0) && ((pPg) == (null)))
			{
				pPager.doNotSpill |= (byte)(0x02);
				rc = (int)(sqlite3PagerGet(pPager, (uint)(pgno), pPg, (int)(1)));
				pPager.doNotSpill &= (byte)(~0x02);
				if (rc != 0)
					return (int)(rc);
				sqlite3PcacheMakeDirty(pPg);
			}

			if ((pPg) != null)
			{
				void* pData;
				pData = pPg.pData;
				CRuntime.memcpy(pData, (byte*)(aData), (ulong)(pPager.pageSize));
				pPager.xReiniter(pPg);
				if ((pgno) == (1))
				{
					CRuntime.memcpy(&pPager.dbFileVers, &((byte*)(pData))[24], (ulong)(16 * sizeof(sbyte)));
				}

				sqlite3PcacheRelease(pPg);
			}

			return (int)(rc);
		}
		public static void pager_reset(Pager pPager)
		{
			pPager.iDataVersion++;
			sqlite3BackupRestart(pPager.pBackup);
			sqlite3PcacheClear(pPager.pPCache);
		}
		public static int pager_truncate(Pager pPager, uint nPage)
		{
			int rc = (int)(0);
			if (((pPager.fd).pMethods != null) && (((pPager.eState) >= (4)) || ((pPager.eState) == (0))))
			{
				long currentSize = 0;
				long newSize = 0;
				int szPage = (int)(pPager.pageSize);
				rc = (int)(sqlite3OsFileSize(pPager.fd, &currentSize));
				newSize = (long)(szPage * (long)(nPage));
				if (((rc) == (0)) && (currentSize != newSize))
				{
					if ((currentSize) > (newSize))
					{
						rc = (int)(sqlite3OsTruncate(pPager.fd, (long)(newSize)));
					}
					else if ((currentSize + szPage) <= (newSize))
					{
						sbyte* pTmp = pPager.pTmpSpace;
						CRuntime.memset(pTmp, (int)(0), (ulong)(szPage));
						rc = (int)(sqlite3OsWrite(pPager.fd, pTmp, (int)(szPage), (long)(newSize - szPage)));
					}

					if ((rc) == (0))
					{
						pPager.dbFileSize = (uint)(nPage);
					}
				}
			}

			return (int)(rc);
		}
		public static void pager_unlock(Pager pPager)
		{
			sqlite3BitvecDestroy(pPager.pInJournal);
			pPager.pInJournal = null;
			releaseAllSavepoints(pPager);
			if (((pPager).pWal != null))
			{
				sqlite3WalEndReadTransaction(pPager.pWal);
				pPager.eState = (byte)(0);
			}
			else if (pPager.exclusiveMode == 0)
			{
				int rc = 0;
				int iDc = (int)(((pPager.fd).pMethods != null) ? sqlite3OsDeviceCharacteristics(pPager.fd) : 0);
				if (((0) == (iDc & 0x00000800)) || (1 != (pPager.journalMode & 5)))
				{
					sqlite3OsClose(pPager.jfd);
				}

				rc = (int)(pagerUnlockDb(pPager, (int)(0)));
				if ((rc != 0) && ((pPager.eState) == (6)))
				{
					pPager.eLock = (byte)(4 + 1);
				}

				pPager.eState = (byte)(0);
			}

			if ((pPager.errCode) != 0)
			{
				if ((pPager.tempFile) == (0))
				{
					pager_reset(pPager);
					pPager.changeCountDone = (byte)(0);
					pPager.eState = (byte)(0);
				}
				else
				{
					pPager.eState = (byte)(((pPager.jfd).pMethods != null) ? 0 : 1);
				}

				if (((pPager).bUseFetch) != 0)
					sqlite3OsUnfetch(pPager.fd, (long)(0), null);
				pPager.errCode = (int)(0);
				setGetterMethod(pPager);
			}

			pPager.journalOff = (long)(0);
			pPager.journalHdr = (long)(0);
			pPager.setSuper = (byte)(0);
		}
		public static int pager_wait_on_lock(Pager pPager, int locktype)
		{
			int rc = 0;
			do
			{
				rc = (int)(pagerLockDb(pPager, (int)(locktype)));
			}
			while (((rc) == (5)) && ((pPager.xBusyHandler(pPager.pBusyHandlerArg)) != 0));
			return (int)(rc);
		}
		public static int pager_write_pagelist(Pager pPager, PgHdr pList)
		{
			int rc = (int)(0);
			if (!((pPager.fd).pMethods != null))
			{
				rc = (int)(pagerOpentemp(pPager, pPager.fd, (int)(pPager.vfsFlags)));
			}

			if ((((rc) == (0)) && ((pPager.dbHintSize) < (pPager.dbSize))) && (((pList.pDirty) != null) || ((pList.pgno) > (pPager.dbHintSize))))
			{
				long szFile = (long)(pPager.pageSize * (long)(pPager.dbSize));
				sqlite3OsFileControlHint(pPager.fd, (int)(5), &szFile);
				pPager.dbHintSize = (uint)(pPager.dbSize);
			}

			while (((rc) == (0)) && ((pList) != null))
			{
				uint pgno = (uint)(pList.pgno);
				if (((pgno) <= (pPager.dbSize)) && ((0) == (pList.flags & 0x010)))
				{
					long offset = (long)((pgno - 1) * pPager.pageSize);
					sbyte* pData;
					if ((pList.pgno) == (1))
						pager_write_changecounter(pList);
					pData = pList.pData;
					rc = (int)(sqlite3OsWrite(pPager.fd, pData, (int)(pPager.pageSize), (long)(offset)));
					if ((pgno) == (1))
					{
						CRuntime.memcpy(&pPager.dbFileVers, &pData[24], (ulong)(16 * sizeof(sbyte)));
					}

					if ((pgno) > (pPager.dbFileSize))
					{
						pPager.dbFileSize = (uint)(pgno);
					}

					pPager.aStat[2]++;
					sqlite3BackupUpdate(pPager.pBackup, (uint)(pgno), (byte*)(pList.pData));
				}
				else
				{
				}

				pList = pList.pDirty;
			}

			return (int)(rc);
		}
		public static int pagerAcquireMapPage(Pager pPager, uint pgno, void* pData, PgHdr ppPage)
		{
			PgHdr p;
			if ((pPager.pMmapFreelist) != null)
			{
				ppPage = p = pPager.pMmapFreelist;
				pPager.pMmapFreelist = p.pDirty;
				p.pDirty = null;
				CRuntime.memset(p.pExtra, (int)(0), (ulong)(8));
			}
			else
			{
				ppPage = p = (PgHdr)(sqlite3MallocZero((ulong)(sizeof(PgHdr) + pPager.nExtra)));
				if ((p) == (null))
				{
					sqlite3OsUnfetch(pPager.fd, (long)((long)(pgno - 1) * pPager.pageSize), pData);
					return (int)(7);
				}

				p.pExtra = (void*)(p[1]);
				p.flags = (ushort)(0x020);
				p.nRef = (short)(1);
				p.pPager = pPager;
			}

			p.pgno = (uint)(pgno);
			p.pData = pData;
			pPager.nMmapOut++;
			return (int)(0);
		}
		public static int pagerBeginReadTransaction(Pager pPager)
		{
			int rc = 0;
			int changed = (int)(0);
			sqlite3WalEndReadTransaction(pPager.pWal);
			rc = (int)(sqlite3WalBeginReadTransaction(pPager.pWal, &changed));
			if ((rc != 0) || ((changed) != 0))
			{
				pager_reset(pPager);
				if (((pPager).bUseFetch) != 0)
					sqlite3OsUnfetch(pPager.fd, (long)(0), null);
			}

			return (int)(rc);
		}
		public static int pagerExclusiveLock(Pager pPager)
		{
			int rc = 0;
			rc = (int)(pagerLockDb(pPager, (int)(4)));
			if (rc != 0)
			{
				pagerUnlockDb(pPager, (int)(1));
			}

			return (int)(rc);
		}
		public static void pagerFixMaplimit(Pager pPager)
		{
			sqlite3_file fd = pPager.fd;
			if (((fd).pMethods != null) && ((fd.pMethods.iVersion) >= (3)))
			{
				long sz = 0;
				sz = (long)(pPager.szMmap);
				pPager.bUseFetch = (byte)((sz) > (0));
				setGetterMethod(pPager);
				sqlite3OsFileControlHint(pPager.fd, (int)(18), &sz);
			}
		}
		public static int pagerFlushOnCommit(Pager pPager, int bCommit)
		{
			if ((pPager.tempFile) == (0))
				return (int)(1);
			if (bCommit == 0)
				return (int)(0);
			if (!((pPager.fd).pMethods != null))
				return (int)(0);
			return (((sqlite3PCachePercentDirty(pPager.pPCache)) >= (25)) ? 1 : 0);
		}
		public static void pagerFreeMapHdrs(Pager pPager)
		{
			PgHdr p;
			PgHdr pNext;
			for (p = pPager.pMmapFreelist; p; p = pNext)
			{
				pNext = p.pDirty;
				sqlite3_free(p);
			}
		}
		public static int pagerLockDb(Pager pPager, int eLock)
		{
			int rc = (int)(0);
			if (((pPager.eLock) < (eLock)) || ((pPager.eLock) == (4 + 1)))
			{
				rc = (int)((pPager.noLock) != 0 ? 0 : sqlite3OsLock(pPager.fd, (int)(eLock)));
				if (((rc) == (0)) && ((pPager.eLock != (4 + 1)) || ((eLock) == (4))))
				{
					pPager.eLock = ((byte)(eLock));
				}
			}

			return (int)(rc);
		}
		public static int pagerOpenSavepoint(Pager pPager, int nSavepoint)
		{
			int rc = (int)(0);
			int nCurrent = (int)(pPager.nSavepoint);
			int ii = 0;
			PagerSavepoint* aNew;
			aNew = (PagerSavepoint*)(sqlite3Realloc(pPager.aSavepoint, (ulong)(sizeof(PagerSavepoint) * nSavepoint)));
			if (aNew == null)
			{
				return (int)(7);
			}

			CRuntime.memset(&aNew[nCurrent], (int)(0), (ulong)((nSavepoint - nCurrent) * sizeof(PagerSavepoint)));
			pPager.aSavepoint = aNew;
			for (ii = (int)(nCurrent); (ii) < (nSavepoint); ii++)
			{
				aNew[ii].nOrig = (uint)(pPager.dbSize);
				if (((pPager.jfd).pMethods != null) && ((pPager.journalOff) > (0)))
				{
					aNew[ii].iOffset = (long)(pPager.journalOff);
				}
				else
				{
					aNew[ii].iOffset = (long)(pPager.sectorSize);
				}

				aNew[ii].iSubRec = (uint)(pPager.nSubRec);
				aNew[ii].pInSavepoint = sqlite3BitvecCreate((uint)(pPager.dbSize));
				aNew[ii].bTruncateOnRelease = (int)(1);
				if (aNew[ii].pInSavepoint == null)
				{
					return (int)(7);
				}

				if (((pPager).pWal != null))
				{
					sqlite3WalSavepoint(pPager.pWal, aNew[ii].aWalData);
				}

				pPager.nSavepoint = (int)(ii + 1);
			}

			return (int)(rc);
		}
		public static int pagerOpentemp(Pager pPager, sqlite3_file pFile, int vfsFlags)
		{
			int rc = 0;
			vfsFlags |= (int)(0x00000002 | 0x00000004 | 0x00000010 | 0x00000008);
			rc = (int)(sqlite3OsOpen(pPager.pVfs, null, pFile, (int)(vfsFlags), null));
			return (int)(rc);
		}
		public static int pagerOpenWal(Pager pPager)
		{
			int rc = (int)(0);
			if ((pPager.exclusiveMode) != 0)
			{
				rc = (int)(pagerExclusiveLock(pPager));
			}

			if ((rc) == (0))
			{
				rc = (int)(sqlite3WalOpen(pPager.pVfs, pPager.fd, pPager.zWal, (int)(pPager.exclusiveMode), (long)(pPager.journalSizeLimit), pPager.pWal));
			}

			pagerFixMaplimit(pPager);
			return (int)(rc);
		}
		public static int pagerOpenWalIfPresent(Pager pPager)
		{
			int rc = (int)(0);
			if (pPager.tempFile == 0)
			{
				int isWal = 0;
				rc = (int)(sqlite3OsAccess(pPager.pVfs, pPager.zWal, (int)(0), &isWal));
				if ((rc) == (0))
				{
					if ((isWal) != 0)
					{
						uint nPage = 0;
						rc = (int)(pagerPagecount(pPager, &nPage));
						if ((rc) != 0)
							return (int)(rc);
						if ((nPage) == (0))
						{
							rc = (int)(sqlite3OsDelete(pPager.pVfs, pPager.zWal, (int)(0)));
						}
						else
						{
							rc = (int)(sqlite3PagerOpenWal(pPager, null));
						}
					}
					else if ((pPager.journalMode) == (5))
					{
						pPager.journalMode = (byte)(0);
					}
				}
			}

			return (int)(rc);
		}
		public static int pagerPagecount(Pager pPager, uint* pnPage)
		{
			uint nPage = 0;
			nPage = (uint)(sqlite3WalDbsize(pPager.pWal));
			if (((nPage) == (0)) && (((pPager.fd).pMethods != null) != 0))
			{
				long n = (long)(0);
				int rc = (int)(sqlite3OsFileSize(pPager.fd, &n));
				if (rc != 0)
				{
					return (int)(rc);
				}

				nPage = ((uint)((n + pPager.pageSize - 1) / pPager.pageSize));
			}

			if ((nPage) > (pPager.mxPgno))
			{
				pPager.mxPgno = (uint)(nPage);
			}

			*pnPage = (uint)(nPage);
			return (int)(0);
		}
		public static int pagerPlaybackSavepoint(Pager pPager, PagerSavepoint* pSavepoint)
		{
			long szJ = 0;
			long iHdrOff = 0;
			int rc = (int)(0);
			Bitvec* pDone = null;
			if ((pSavepoint) != null)
			{
				pDone = sqlite3BitvecCreate((uint)(pSavepoint->nOrig));
				if (pDone == null)
				{
					return (int)(7);
				}
			}

			pPager.dbSize = (uint)(pSavepoint ? pSavepoint->nOrig : pPager.dbOrigSize);
			pPager.changeCountDone = (byte)(pPager.tempFile);
			if ((pSavepoint == null) && ((pPager).pWal != null))
			{
				return (int)(pagerRollbackWal(pPager));
			}

			szJ = (long)(pPager.journalOff);
			if (((pSavepoint) != null) && (!((pPager).pWal != null)))
			{
				iHdrOff = (long)((pSavepoint->iHdrOffset) != 0 ? pSavepoint->iHdrOffset : szJ);
				pPager.journalOff = (long)(pSavepoint->iOffset);
				while (((rc) == (0)) && ((pPager.journalOff) < (iHdrOff)))
				{
					rc = (int)(pager_playback_one_page(pPager, &pPager.journalOff, pDone, (int)(1), (int)(1)));
				}
			}
			else
			{
				pPager.journalOff = (long)(0);
			}

			while (((rc) == (0)) && ((pPager.journalOff) < (szJ)))
			{
				uint ii = 0;
				uint nJRec = (uint)(0);
				uint dummy = 0;
				rc = (int)(readJournalHdr(pPager, (int)(0), (long)(szJ), &nJRec, &dummy));
				if (((nJRec) == (0)) && ((pPager.journalHdr + (pPager.sectorSize)) == (pPager.journalOff)))
				{
					nJRec = ((uint)((szJ - pPager.journalOff) / ((pPager.pageSize) + 8)));
				}

				for (ii = (uint)(0); (((rc) == (0)) && ((ii) < (nJRec))) && ((pPager.journalOff) < (szJ)); ii++)
				{
					rc = (int)(pager_playback_one_page(pPager, &pPager.journalOff, pDone, (int)(1), (int)(1)));
				}
			}

			if ((pSavepoint) != null)
			{
				uint ii = 0;
				long offset = (long)((long)(pSavepoint->iSubRec) * (4 + pPager.pageSize));
				if (((pPager).pWal != null))
				{
					rc = (int)(sqlite3WalSavepointUndo(pPager.pWal, pSavepoint->aWalData));
				}

				for (ii = (uint)(pSavepoint->iSubRec); ((rc) == (0)) && ((ii) < (pPager.nSubRec)); ii++)
				{
					rc = (int)(pager_playback_one_page(pPager, &offset, pDone, (int)(0), (int)(1)));
				}
			}

			sqlite3BitvecDestroy(pDone);
			if ((rc) == (0))
			{
				pPager.journalOff = (long)(szJ);
			}

			return (int)(rc);
		}
		public static int pagerRollbackWal(Pager pPager)
		{
			int rc = 0;
			PgHdr pList;
			pPager.dbSize = (uint)(pPager.dbOrigSize);
			rc = (int)(sqlite3WalUndo(pPager.pWal, pagerUndoCallback, (void*)(pPager)));
			pList = sqlite3PcacheDirtyList(pPager.pPCache);
			while (((pList) != null) && ((rc) == (0)))
			{
				PgHdr pNext = pList.pDirty;
				rc = (int)(pagerUndoCallback((void*)(pPager), (uint)(pList.pgno)));
				pList = pNext;
			}

			return (int)(rc);
		}
		public static int pagerSyncHotJournal(Pager pPager)
		{
			int rc = (int)(0);
			if (pPager.noSync == 0)
			{
				rc = (int)(sqlite3OsSync(pPager.jfd, (int)(0x00002)));
			}

			if ((rc) == (0))
			{
				rc = (int)(sqlite3OsFileSize(pPager.jfd, &pPager.journalHdr));
			}

			return (int)(rc);
		}
		public static void pagerUnlockAndRollback(Pager pPager)
		{
			if ((pPager.eState != 6) && (pPager.eState != 0))
			{
				if ((pPager.eState) >= (2))
				{
					sqlite3BeginBenignMalloc();
					sqlite3PagerRollback(pPager);
					sqlite3EndBenignMalloc();
				}
				else if (pPager.exclusiveMode == 0)
				{
					pager_end_transaction(pPager, (int)(0), (int)(0));
				}
			}

			pager_unlock(pPager);
		}
		public static int pagerUnlockDb(Pager pPager, int eLock)
		{
			int rc = (int)(0);
			if (((pPager.fd).pMethods != null))
			{
				rc = (int)((pPager.noLock) != 0 ? 0 : sqlite3OsUnlock(pPager.fd, (int)(eLock)));
				if (pPager.eLock != (4 + 1))
				{
					pPager.eLock = ((byte)(eLock));
				}
			}

			pPager.changeCountDone = (byte)(pPager.tempFile);
			return (int)(rc);
		}
		public static void pagerUnlockIfUnused(Pager pPager)
		{
			if ((sqlite3PcacheRefCount(pPager.pPCache)) == (0))
			{
				pagerUnlockAndRollback(pPager);
			}
		}
		public static int pagerWalFrames(Pager pPager, PgHdr pList, uint nTruncate, int isCommit)
		{
			int rc = 0;
			int nList = 0;
			PgHdr p;
			if ((isCommit) != 0)
			{
				PgHdr ppNext = pList;
				nList = (int)(0);
				for (p = pList; (ppNext = p) != null; p = p.pDirty)
				{
					if ((p.pgno) <= (nTruncate))
					{
						ppNext = p.pDirty;
						nList++;
					}
				}
			}
			else
			{
				nList = (int)(1);
			}

			pPager.aStat[2] += (int)(nList);
			if ((pList.pgno) == (1))
				pager_write_changecounter(pList);
			rc = (int)(sqlite3WalFrames(pPager.pWal, (int)(pPager.pageSize), pList, (uint)(nTruncate), (int)(isCommit), (int)(pPager.walSyncFlags)));
			if (((rc) == (0)) && ((pPager.pBackup) != null))
			{
				for (p = pList; p; p = p.pDirty)
				{
					sqlite3BackupUpdate(pPager.pBackup, (uint)(p.pgno), (byte*)(p.pData));
				}
			}

			return (int)(rc);
		}
		public static int readJournalHdr(Pager pPager, int isHot, long journalSize, uint* pNRec, uint* pDbSize)
		{
			int rc = 0;
			byte* aMagic = stackalloc byte[8];
			long iHdrOff = 0;
			pPager.journalOff = (long)(journalHdrOffset(pPager));
			if ((pPager.journalOff + (pPager.sectorSize)) > (journalSize))
			{
				return (int)(101);
			}

			iHdrOff = (long)(pPager.journalOff);
			if (((isHot) != 0) || (iHdrOff != pPager.journalHdr))
			{
				rc = (int)(sqlite3OsRead(pPager.jfd, aMagic, (int)(8 * sizeof(byte)), (long)(iHdrOff)));
				if ((rc) != 0)
				{
					return (int)(rc);
				}

				if (memcmp(aMagic, aJournalMagic, (ulong)(8 * sizeof(byte))) != 0)
				{
					return (int)(101);
				}
			}

			if (((0 != (rc = (int)(read32bits(pPager.jfd, (long)(iHdrOff + 8), pNRec)))) || (0 != (rc = (int)(read32bits(pPager.jfd, (long)(iHdrOff + 12), &pPager.cksumInit))))) || (0 != (rc = (int)(read32bits(pPager.jfd, (long)(iHdrOff + 16), pDbSize)))))
			{
				return (int)(rc);
			}

			if ((pPager.journalOff) == (0))
			{
				uint iPageSize = 0;
				uint iSectorSize = 0;
				if ((0 != (rc = (int)(read32bits(pPager.jfd, (long)(iHdrOff + 20), &iSectorSize)))) || (0 != (rc = (int)(read32bits(pPager.jfd, (long)(iHdrOff + 24), &iPageSize)))))
				{
					return (int)(rc);
				}

				if ((iPageSize) == (0))
				{
					iPageSize = (uint)(pPager.pageSize);
				}

				if (((((((iPageSize) < (512)) || ((iSectorSize) < (32))) || ((iPageSize) > (65536))) || ((iSectorSize) > (0x10000))) || (((iPageSize - 1) & iPageSize) != 0)) || (((iSectorSize - 1) & iSectorSize) != 0))
				{
					return (int)(101);
				}

				rc = (int)(sqlite3PagerSetPagesize(pPager, &iPageSize, (int)(-1)));
				pPager.sectorSize = (uint)(iSectorSize);
			}

			pPager.journalOff += (long)(pPager.sectorSize);
			return (int)(rc);
		}
		public static void releaseAllSavepoints(Pager pPager)
		{
			int ii = 0;
			for (ii = (int)(0); (ii) < (pPager.nSavepoint); ii++)
			{
				sqlite3BitvecDestroy(pPager.aSavepoint[ii].pInSavepoint);
			}

			if ((pPager.exclusiveMode == 0) || ((sqlite3JournalIsInMemory(pPager.sjfd)) != 0))
			{
				sqlite3OsClose(pPager.sjfd);
			}

			sqlite3_free(pPager.aSavepoint);
			pPager.aSavepoint = null;
			pPager.nSavepoint = (int)(0);
			pPager.nSubRec = (uint)(0);
		}
		public static void setGetterMethod(Pager pPager)
		{
			if ((pPager.errCode) != 0)
			{
				pPager.xGet = getPageError;
			}
			else if (((pPager).bUseFetch) != 0)
			{
				pPager.xGet = getPageMMap;
			}
			else
			{
				pPager.xGet = getPageNormal;
			}
		}
		public static void setSectorSize(Pager pPager)
		{
			if (((pPager.tempFile) != 0) || ((sqlite3OsDeviceCharacteristics(pPager.fd) & 0x00001000) != 0))
			{
				pPager.sectorSize = (uint)(512);
			}
			else
			{
				pPager.sectorSize = (uint)(sqlite3SectorSize(pPager.fd));
			}
		}
		public static sqlite3_backup sqlite3PagerBackupPtr(Pager pPager)
		{
			return pPager.pBackup;
		}
		public static int sqlite3PagerBegin(Pager pPager, int exFlag, int subjInMemory)
		{
			int rc = (int)(0);
			if ((pPager.errCode) != 0)
				return (int)(pPager.errCode);
			pPager.subjInMemory = ((byte)(subjInMemory));
			if ((pPager.eState) == (1))
			{
				if (((pPager).pWal != null))
				{
					if (((pPager.exclusiveMode) != 0) && ((sqlite3WalExclusiveMode(pPager.pWal, (int)(-1))) != 0))
					{
						rc = (int)(pagerLockDb(pPager, (int)(4)));
						if (rc != 0)
						{
							return (int)(rc);
						}

						(void)(sqlite3WalExclusiveMode(pPager.pWal, (int)(1)));
					}

					rc = (int)(sqlite3WalBeginWriteTransaction(pPager.pWal));
				}
				else
				{
					rc = (int)(pagerLockDb(pPager, (int)(2)));
					if (((rc) == (0)) && ((exFlag) != 0))
					{
						rc = (int)(pager_wait_on_lock(pPager, (int)(4)));
					}
				}

				if ((rc) == (0))
				{
					pPager.eState = (byte)(2);
					pPager.dbHintSize = (uint)(pPager.dbSize);
					pPager.dbFileSize = (uint)(pPager.dbSize);
					pPager.dbOrigSize = (uint)(pPager.dbSize);
					pPager.journalOff = (long)(0);
				}
			}

			return (int)(rc);
		}
		public static void sqlite3PagerCacheStat(Pager pPager, int eStat, int reset, int* pnVal)
		{
			eStat -= (int)(7);
			*pnVal += (int)(pPager.aStat[eStat]);
			if ((reset) != 0)
			{
				pPager.aStat[eStat] = (int)(0);
			}
		}
		public static int sqlite3PagerCheckpoint(Pager pPager, sqlite3 db, int eMode, int* pnLog, int* pnCkpt)
		{
			int rc = (int)(0);
			if (((pPager.pWal) == (null)) && ((pPager.journalMode) == (5)))
			{
				sqlite3_exec(db, "PRAGMA table_list", null, null, null);
			}

			if ((pPager.pWal) != null)
			{
				rc = (int)(sqlite3WalCheckpoint(pPager.pWal, db, (int)(eMode), ((eMode) == (0) ? null : pPager.xBusyHandler), pPager.pBusyHandlerArg, (int)(pPager.walSyncFlags), (int)(pPager.pageSize), (byte*)(pPager.pTmpSpace), pnLog, pnCkpt));
			}

			return (int)(rc);
		}
		public static void sqlite3PagerClearCache(Pager pPager)
		{
			if ((pPager.tempFile) == (0))
				pager_reset(pPager);
		}
		public static int sqlite3PagerClose(Pager pPager, sqlite3 db)
		{
			byte* pTmp = (byte*)(pPager.pTmpSpace);
			sqlite3BeginBenignMalloc();
			pagerFreeMapHdrs(pPager);
			pPager.exclusiveMode = (byte)(0);
			{
				byte* a = null;
				if ((((db) != null) && ((0) == (db.flags & 0x00000800))) && ((0) == (databaseIsUnmoved(pPager))))
				{
					a = pTmp;
				}

				sqlite3WalClose(pPager.pWal, db, (int)(pPager.walSyncFlags), (int)(pPager.pageSize), a);
				pPager.pWal = null;
			}

			pager_reset(pPager);
			if ((pPager.memDb) != 0)
			{
				pager_unlock(pPager);
			}
			else
			{
				if (((pPager.jfd).pMethods != null))
				{
					pager_error(pPager, (int)(pagerSyncHotJournal(pPager)));
				}

				pagerUnlockAndRollback(pPager);
			}

			sqlite3EndBenignMalloc();
			sqlite3OsClose(pPager.jfd);
			sqlite3OsClose(pPager.fd);
			sqlite3PageFree(pTmp);
			sqlite3PcacheClose(pPager.pPCache);
			sqlite3_free(pPager);
			return (int)(0);
		}
		public static int sqlite3PagerCloseWal(Pager pPager, sqlite3 db)
		{
			int rc = (int)(0);
			if (pPager.pWal == null)
			{
				int logexists = (int)(0);
				rc = (int)(pagerLockDb(pPager, (int)(1)));
				if ((rc) == (0))
				{
					rc = (int)(sqlite3OsAccess(pPager.pVfs, pPager.zWal, (int)(0), &logexists));
				}

				if (((rc) == (0)) && ((logexists) != 0))
				{
					rc = (int)(pagerOpenWal(pPager));
				}
			}

			if (((rc) == (0)) && ((pPager.pWal) != null))
			{
				rc = (int)(pagerExclusiveLock(pPager));
				if ((rc) == (0))
				{
					rc = (int)(sqlite3WalClose(pPager.pWal, db, (int)(pPager.walSyncFlags), (int)(pPager.pageSize), (byte*)(pPager.pTmpSpace)));
					pPager.pWal = null;
					pagerFixMaplimit(pPager);
					if (((rc) != 0) && (pPager.exclusiveMode == 0))
						pagerUnlockDb(pPager, (int)(1));
				}
			}

			return (int)(rc);
		}
		public static int sqlite3PagerCommitPhaseOne(Pager pPager, sbyte* zSuper, int noSync)
		{
			int rc = (int)(0);
			if ((pPager.errCode) != 0)
				return (int)(pPager.errCode);
			if ((sqlite3FaultSim((int)(400))) != 0)
				return (int)(10);
			if ((pPager.eState) < (3))
				return (int)(0);
			if ((0) == (pagerFlushOnCommit(pPager, (int)(1))))
			{
				sqlite3BackupRestart(pPager.pBackup);
			}
			else
			{
				PgHdr pList;
				if (((pPager).pWal != null))
				{
					PgHdr pPageOne = null;
					pList = sqlite3PcacheDirtyList(pPager.pPCache);
					if ((pList) == (null))
					{
						rc = (int)(sqlite3PagerGet(pPager, (uint)(1), pPageOne, (int)(0)));
						pList = pPageOne;
						pList.pDirty = null;
					}

					if ((pList) != null)
					{
						rc = (int)(pagerWalFrames(pPager, pList, (uint)(pPager.dbSize), (int)(1)));
					}

					sqlite3PagerUnref(pPageOne);
					if ((rc) == (0))
					{
						sqlite3PcacheCleanAll(pPager.pPCache);
					}
				}
				else
				{
					rc = (int)(pager_incr_changecounter(pPager, (int)(0)));
					if (rc != 0)
						goto commit_phase_one_exit;
					rc = (int)(writeSuperJournal(pPager, zSuper));
					if (rc != 0)
						goto commit_phase_one_exit;
					rc = (int)(syncJournal(pPager, (int)(0)));
					if (rc != 0)
						goto commit_phase_one_exit;
					pList = sqlite3PcacheDirtyList(pPager.pPCache);
					if ((0) == (0))
					{
						rc = (int)(pager_write_pagelist(pPager, pList));
					}

					if (rc != 0)
					{
						goto commit_phase_one_exit;
					}

					sqlite3PcacheCleanAll(pPager.pPCache);
					if ((pPager.dbSize) > (pPager.dbFileSize))
					{
						uint nNew = (uint)(pPager.dbSize - ((pPager.dbSize) == ((uint)((sqlite3PendingByte / ((pPager).pageSize)) + 1))));
						rc = (int)(pager_truncate(pPager, (uint)(nNew)));
						if (rc != 0)
							goto commit_phase_one_exit;
					}

					if (noSync == 0)
					{
						rc = (int)(sqlite3PagerSync(pPager, zSuper));
					}
				}
			}

		commit_phase_one_exit:
			; if (((rc) == (0)) && (!((pPager).pWal != null))) { pPager.eState = (byte)(5); }
			return (int)(rc);
		}
		public static int sqlite3PagerCommitPhaseTwo(Pager pPager)
		{
			int rc = (int)(0);
			if ((pPager.errCode) != 0)
				return (int)(pPager.errCode);
			pPager.iDataVersion++;
			if ((((pPager.eState) == (2)) && ((pPager.exclusiveMode) != 0)) && ((pPager.journalMode) == (1)))
			{
				pPager.eState = (byte)(1);
				return (int)(0);
			}

			rc = (int)(pager_end_transaction(pPager, (int)(pPager.setSuper), (int)(1)));
			return (int)(pager_error(pPager, (int)(rc)));
		}
		public static uint sqlite3PagerDataVersion(Pager pPager)
		{
			return (uint)(pPager.iDataVersion);
		}
		public static int sqlite3PagerExclusiveLock(Pager pPager)
		{
			int rc = (int)(pPager.errCode);
			if ((rc) == (0))
			{
				if ((0) == ((pPager).pWal != null))
				{
					rc = (int)(pager_wait_on_lock(pPager, (int)(4)));
				}
			}

			return (int)(rc);
		}
		public static sqlite3_file sqlite3PagerFile(Pager pPager)
		{
			return pPager.fd;
		}
		public static int sqlite3PagerFlush(Pager pPager)
		{
			int rc = (int)(pPager.errCode);
			if (pPager.memDb == 0)
			{
				PgHdr pList = sqlite3PcacheDirtyList(pPager.pPCache);
				while (((rc) == (0)) && ((pList) != null))
				{
					PgHdr pNext = pList.pDirty;
					if ((pList.nRef) == (0))
					{
						rc = (int)(pagerStress((void*)(pPager), pList));
					}

					pList = pNext;
				}
			}

			return (int)(rc);
		}
		public static int sqlite3PagerGet(Pager pPager, uint pgno, PgHdr ppPage, int flags)
		{
			return (int)(pPager.xGet(pPager, (uint)(pgno), ppPage, (int)(flags)));
		}
		public static int sqlite3PagerGetJournalMode(Pager pPager)
		{
			return (int)(pPager.journalMode);
		}
		public static int sqlite3PagerIsMemdb(Pager pPager)
		{
			return (((pPager.tempFile) != 0) || ((pPager.memVfs) != 0) ? 1 : 0);
		}
		public static byte sqlite3PagerIsreadonly(Pager pPager)
		{
			return (byte)(pPager.readOnly);
		}
		public static long sqlite3PagerJournalSizeLimit(Pager pPager, long iLimit)
		{
			if ((iLimit) >= (-1))
			{
				pPager.journalSizeLimit = (long)(iLimit);
				sqlite3WalLimit(pPager.pWal, (long)(iLimit));
			}

			return (long)(pPager.journalSizeLimit);
		}
		public static sqlite3_file sqlite3PagerJrnlFile(Pager pPager)
		{
			return pPager.pWal ? sqlite3WalFile(pPager.pWal) : pPager.jfd;
		}
		public static int sqlite3PagerLockingMode(Pager pPager, int eMode)
		{
			if ((((eMode) >= (0)) && (pPager.tempFile == 0)) && (sqlite3WalHeapMemory(pPager.pWal) == 0))
			{
				pPager.exclusiveMode = ((byte)(eMode));
			}

			return (int)(pPager.exclusiveMode);
		}
		public static PgHdr sqlite3PagerLookup(Pager pPager, uint pgno)
		{
			sqlite3_pcache_page* pPage;
			pPage = sqlite3PcacheFetch(pPager.pPCache, (uint)(pgno), (int)(0));
			if ((pPage) == (null))
				return null;
			return sqlite3PcacheFetchFinish(pPager.pPCache, (uint)(pgno), pPage);
		}
		public static uint sqlite3PagerMaxPageCount(Pager pPager, uint mxPage)
		{
			if ((mxPage) > (0))
			{
				pPager.mxPgno = (uint)(mxPage);
			}

			return (uint)(pPager.mxPgno);
		}
		public static int sqlite3PagerMemUsed(Pager pPager)
		{
			int perPageSize = (int)(pPager.pageSize + pPager.nExtra + (int)(sizeof(PgHdr) + 5 * sizeof(void*)));
			return (int)(perPageSize * sqlite3PcachePagecount(pPager.pPCache) + sqlite3MallocSize(pPager) + pPager.pageSize);
		}
		public static int sqlite3PagerMovepage(Pager pPager, PgHdr pPg, uint pgno, int isCommit)
		{
			PgHdr pPgOld;
			uint needSyncPgno = (uint)(0);
			int rc = 0;
			uint origPgno = 0;
			if ((pPager.tempFile) != 0)
			{
				rc = (int)(sqlite3PagerWrite(pPg));
				if ((rc) != 0)
					return (int)(rc);
			}

			if (((pPg.flags & 0x002) != 0) && (0 != (rc = (int)(subjournalPageIfRequired(pPg)))))
			{
				return (int)(rc);
			}

			if (((pPg.flags & 0x008) != 0) && (isCommit == 0))
			{
				needSyncPgno = (uint)(pPg.pgno);
			}

			pPg.flags &= (ushort)(~0x008);
			pPgOld = sqlite3PagerLookup(pPager, (uint)(pgno));
			if ((pPgOld) != null)
			{
				if (((pPgOld.nRef) > (1)))
				{
					sqlite3PagerUnrefNotNull(pPgOld);
					return (int)(sqlite3CorruptError((int)(60367)));
				}

				pPg.flags |= (ushort)(pPgOld.flags & 0x008);
				if ((pPager.tempFile) != 0)
				{
					sqlite3PcacheMove(pPgOld, (uint)(pPager.dbSize + 1));
				}
				else
				{
					sqlite3PcacheDrop(pPgOld);
				}
			}

			origPgno = (uint)(pPg.pgno);
			sqlite3PcacheMove(pPg, (uint)(pgno));
			sqlite3PcacheMakeDirty(pPg);
			if (((pPager.tempFile) != 0) && ((pPgOld) != null))
			{
				sqlite3PcacheMove(pPgOld, (uint)(origPgno));
				sqlite3PagerUnrefNotNull(pPgOld);
			}

			if ((needSyncPgno) != 0)
			{
				PgHdr pPgHdr;
				rc = (int)(sqlite3PagerGet(pPager, (uint)(needSyncPgno), pPgHdr, (int)(0)));
				if (rc != 0)
				{
					if ((needSyncPgno) <= (pPager.dbOrigSize))
					{
						sqlite3BitvecClear(pPager.pInJournal, (uint)(needSyncPgno), pPager.pTmpSpace);
					}

					return (int)(rc);
				}

				pPgHdr.flags |= (ushort)(0x008);
				sqlite3PcacheMakeDirty(pPgHdr);
				sqlite3PagerUnrefNotNull(pPgHdr);
			}

			return (int)(0);
		}
		public static int sqlite3PagerOkToChangeJournalMode(Pager pPager)
		{
			if ((pPager.eState) >= (3))
				return (int)(0);
			if ((((pPager.jfd).pMethods != null) && ((pPager.journalOff) > (0))))
				return (int)(0);
			return (int)(1);
		}
		public static int sqlite3PagerOpenSavepoint(Pager pPager, int nSavepoint)
		{
			if (((nSavepoint) > (pPager.nSavepoint)) && ((pPager.useJournal) != 0))
			{
				return (int)(pagerOpenSavepoint(pPager, (int)(nSavepoint)));
			}
			else
			{
				return (int)(0);
			}
		}
		public static int sqlite3PagerOpenWal(Pager pPager, int* pbOpen)
		{
			int rc = (int)(0);
			if ((pPager.tempFile == 0) && (pPager.pWal == null))
			{
				if (sqlite3PagerWalSupported(pPager) == 0)
					return (int)(14);
				sqlite3OsClose(pPager.jfd);
				rc = (int)(pagerOpenWal(pPager));
				if ((rc) == (0))
				{
					pPager.journalMode = (byte)(5);
					pPager.eState = (byte)(0);
				}
			}
			else
			{
				*pbOpen = (int)(1);
			}

			return (int)(rc);
		}
		public static void sqlite3PagerPagecount(Pager pPager, int* pnPage)
		{
			*pnPage = ((int)(pPager.dbSize));
		}
		public static int sqlite3PagerReadFileheader(Pager pPager, int N, byte* pDest)
		{
			int rc = (int)(0);
			CRuntime.memset(pDest, (int)(0), (ulong)(N));
			if (((pPager.fd).pMethods != null))
			{
				rc = (int)(sqlite3OsRead(pPager.fd, pDest, (int)(N), (long)(0)));
				if ((rc) == (10 | (2 << 8)))
				{
					rc = (int)(0);
				}
			}

			return (int)(rc);
		}
		public static int sqlite3PagerRollback(Pager pPager)
		{
			int rc = (int)(0);
			if ((pPager.eState) == (6))
				return (int)(pPager.errCode);
			if ((pPager.eState) <= (1))
				return (int)(0);
			if (((pPager).pWal != null))
			{
				int rc2 = 0;
				rc = (int)(sqlite3PagerSavepoint(pPager, (int)(2), (int)(-1)));
				rc2 = (int)(pager_end_transaction(pPager, (int)(pPager.setSuper), (int)(0)));
				if ((rc) == (0))
					rc = (int)(rc2);
			}
			else if ((!((pPager.jfd).pMethods != null)) || ((pPager.eState) == (2)))
			{
				int eState = (int)(pPager.eState);
				rc = (int)(pager_end_transaction(pPager, (int)(0), (int)(0)));
				if ((pPager.memDb == 0) && ((eState) > (2)))
				{
					pPager.errCode = (int)(4);
					pPager.eState = (byte)(6);
					setGetterMethod(pPager);
					return (int)(rc);
				}
			}
			else
			{
				rc = (int)(pager_playback(pPager, (int)(0)));
			}

			return (int)(pager_error(pPager, (int)(rc)));
		}
		public static int sqlite3PagerSavepoint(Pager pPager, int op, int iSavepoint)
		{
			int rc = (int)(pPager.errCode);
			if (((rc) == (0)) && ((iSavepoint) < (pPager.nSavepoint)))
			{
				int ii = 0;
				int nNew = 0;
				nNew = (int)(iSavepoint + (((op) == (1)) ? 0 : 1));
				for (ii = (int)(nNew); (ii) < (pPager.nSavepoint); ii++)
				{
					sqlite3BitvecDestroy(pPager.aSavepoint[ii].pInSavepoint);
				}

				pPager.nSavepoint = (int)(nNew);
				if ((op) == (1))
				{
					PagerSavepoint* pRel = &pPager.aSavepoint[nNew];
					if (((pRel->bTruncateOnRelease) != 0) && ((pPager.sjfd).pMethods != null))
					{
						if ((sqlite3JournalIsInMemory(pPager.sjfd)) != 0)
						{
							long sz = (long)((pPager.pageSize + 4) * (long)(pRel->iSubRec));
							rc = (int)(sqlite3OsTruncate(pPager.sjfd, (long)(sz)));
						}

						pPager.nSubRec = (uint)(pRel->iSubRec);
					}
				}
				else if (((pPager).pWal != null) || ((pPager.jfd).pMethods != null))
				{
					PagerSavepoint* pSavepoint = ((nNew) == (0)) ? null : &pPager.aSavepoint[nNew - 1];
					rc = (int)(pagerPlaybackSavepoint(pPager, pSavepoint));
				}
			}

			return (int)(rc);
		}
		public static void sqlite3PagerSetBusyHandler(Pager pPager, delegate19 xBusyHandler, void* pBusyHandlerArg)
		{
			void** ap;
			pPager.xBusyHandler = xBusyHandler;
			pPager.pBusyHandlerArg = pBusyHandlerArg;
			ap = (void**)(&pPager.xBusyHandler);
			sqlite3OsFileControlHint(pPager.fd, (int)(15), (void*)(ap));
		}
		public static void sqlite3PagerSetCachesize(Pager pPager, int mxPage)
		{
			sqlite3PcacheSetCachesize(pPager.pPCache, (int)(mxPage));
		}
		public static void sqlite3PagerSetFlags(Pager pPager, uint pgFlags)
		{
			uint level = (uint)(pgFlags & 0x07);
			if ((pPager.tempFile) != 0)
			{
				pPager.noSync = (byte)(1);
				pPager.fullSync = (byte)(0);
				pPager.extraSync = (byte)(0);
			}
			else
			{
				pPager.noSync = (byte)((level) == (0x01) ? 1 : 0);
				pPager.fullSync = (byte)((level) >= (0x03) ? 1 : 0);
				pPager.extraSync = (byte)((level) == (0x04) ? 1 : 0);
			}

			if ((pPager.noSync) != 0)
			{
				pPager.syncFlags = (byte)(0);
			}
			else if ((pgFlags & 0x08) != 0)
			{
				pPager.syncFlags = (byte)(0x00003);
			}
			else
			{
				pPager.syncFlags = (byte)(0x00002);
			}

			pPager.walSyncFlags = (byte)(pPager.syncFlags << 2);
			if ((pPager.fullSync) != 0)
			{
				pPager.walSyncFlags |= (byte)(pPager.syncFlags);
			}

			if (((pgFlags & 0x10) != 0) && (pPager.noSync == 0))
			{
				pPager.walSyncFlags |= (byte)(0x00003 << 2);
			}

			if ((pgFlags & 0x20) != 0)
			{
				pPager.doNotSpill &= (byte)(~0x01);
			}
			else
			{
				pPager.doNotSpill |= (byte)(0x01);
			}
		}
		public static int sqlite3PagerSetJournalMode(Pager pPager, int eMode)
		{
			byte eOld = (byte)(pPager.journalMode);
			if ((pPager.memDb) != 0)
			{
				if ((eMode != 4) && (eMode != 2))
				{
					eMode = (int)(eOld);
				}
			}

			if (eMode != eOld)
			{
				pPager.journalMode = ((byte)(eMode));
				if (((pPager.exclusiveMode == 0) && ((eOld & 5) == (1))) && ((eMode & 1) == (0)))
				{
					sqlite3OsClose(pPager.jfd);
					if ((pPager.eLock) >= (2))
					{
						sqlite3OsDelete(pPager.pVfs, pPager.zJournal, (int)(0));
					}
					else
					{
						int rc = (int)(0);
						int state = (int)(pPager.eState);
						if ((state) == (0))
						{
							rc = (int)(sqlite3PagerSharedLock(pPager));
						}

						if ((pPager.eState) == (1))
						{
							rc = (int)(pagerLockDb(pPager, (int)(2)));
						}

						if ((rc) == (0))
						{
							sqlite3OsDelete(pPager.pVfs, pPager.zJournal, (int)(0));
						}

						if (((rc) == (0)) && ((state) == (1)))
						{
							pagerUnlockDb(pPager, (int)(1));
						}
						else if ((state) == (0))
						{
							pager_unlock(pPager);
						}
					}
				}
				else if ((eMode) == (2))
				{
					sqlite3OsClose(pPager.jfd);
				}
			}

			return (int)(pPager.journalMode);
		}
		public static void sqlite3PagerSetMmapLimit(Pager pPager, long szMmap)
		{
			pPager.szMmap = (long)(szMmap);
			pagerFixMaplimit(pPager);
		}
		public static int sqlite3PagerSetPagesize(Pager pPager, uint* pPageSize, int nReserve)
		{
			int rc = (int)(0);
			uint pageSize = (uint)(*pPageSize);
			if ((((((pPager.memDb) == (0)) || ((pPager.dbSize) == (0))) && ((sqlite3PcacheRefCount(pPager.pPCache)) == (0))) && ((pageSize) != 0)) && (pageSize != (uint)(pPager.pageSize)))
			{
				sbyte* pNew = null;
				long nByte = (long)(0);
				if (((pPager.eState) > (0)) && ((pPager.fd).pMethods != null))
				{
					rc = (int)(sqlite3OsFileSize(pPager.fd, &nByte));
				}

				if ((rc) == (0))
				{
					pNew = (sbyte*)(sqlite3PageMalloc((int)(pageSize + 8)));
					if (pNew == null)
					{
						rc = (int)(7);
					}
					else
					{
						CRuntime.memset(pNew + pageSize, (int)(0), (ulong)(8));
					}
				}

				if ((rc) == (0))
				{
					pager_reset(pPager);
					rc = (int)(sqlite3PcacheSetPageSize(pPager.pPCache, (int)(pageSize)));
				}

				if ((rc) == (0))
				{
					sqlite3PageFree(pPager.pTmpSpace);
					pPager.pTmpSpace = pNew;
					pPager.dbSize = ((uint)((nByte + pageSize - 1) / pageSize));
					pPager.pageSize = (long)(pageSize);
				}
				else
				{
					sqlite3PageFree(pNew);
				}
			}

			*pPageSize = (uint)(pPager.pageSize);
			if ((rc) == (0))
			{
				if ((nReserve) < (0))
					nReserve = (int)(pPager.nReserve);
				pPager.nReserve = ((short)(nReserve));
				pagerFixMaplimit(pPager);
			}

			return (int)(rc);
		}
		public static int sqlite3PagerSetSpillsize(Pager pPager, int mxPage)
		{
			return (int)(sqlite3PcacheSetSpillsize(pPager.pPCache, (int)(mxPage)));
		}
		public static int sqlite3PagerSharedLock(Pager pPager)
		{
			int rc = (int)(0);
			if ((!((pPager).pWal != null)) && ((pPager.eState) == (0)))
			{
				int bHotJournal = (int)(1);
				rc = (int)(pager_wait_on_lock(pPager, (int)(1)));
				if (rc != 0)
				{
					goto failed;
				}

				if ((pPager.eLock) <= (1))
				{
					rc = (int)(hasHotJournal(pPager, &bHotJournal));
				}

				if (rc != 0)
				{
					goto failed;
				}

				if ((bHotJournal) != 0)
				{
					if ((pPager.readOnly) != 0)
					{
						rc = (int)(8 | (3 << 8));
						goto failed;
					}

					rc = (int)(pagerLockDb(pPager, (int)(4)));
					if (rc != 0)
					{
						goto failed;
					}

					if ((!((pPager.jfd).pMethods != null)) && (pPager.journalMode != 2))
					{
						sqlite3_vfs pVfs = pPager.pVfs;
						int bExists = 0;
						rc = (int)(sqlite3OsAccess(pVfs, pPager.zJournal, (int)(0), &bExists));
						if (((rc) == (0)) && ((bExists) != 0))
						{
							int fout = (int)(0);
							int f = (int)(0x00000002 | 0x00000800);
							rc = (int)(sqlite3OsOpen(pVfs, pPager.zJournal, pPager.jfd, (int)(f), &fout));
							if (((rc) == (0)) && ((fout & 0x00000001) != 0))
							{
								rc = (int)(sqlite3CantopenError((int)(58504)));
								sqlite3OsClose(pPager.jfd);
							}
						}
					}

					if (((pPager.jfd).pMethods != null))
					{
						rc = (int)(pagerSyncHotJournal(pPager));
						if ((rc) == (0))
						{
							rc = (int)(pager_playback(pPager, (int)(!pPager.tempFile)));
							pPager.eState = (byte)(0);
						}
					}
					else if (pPager.exclusiveMode == 0)
					{
						pagerUnlockDb(pPager, (int)(1));
					}

					if (rc != 0)
					{
						pager_error(pPager, (int)(rc));
						goto failed;
					}
				}

				if ((pPager.tempFile == 0) && ((pPager.hasHeldSharedLock) != 0))
				{
					sbyte* dbFileVers = stackalloc sbyte[16];
					rc = (int)(sqlite3OsRead(pPager.fd, &dbFileVers, (int)(16 * sizeof(sbyte)), (long)(24)));
					if (rc != 0)
					{
						if (rc != (10 | (2 << 8)))
						{
							goto failed;
						}

						CRuntime.memset(dbFileVers, (int)(0), (ulong)(16 * sizeof(sbyte)));
					}

					if (memcmp(pPager.dbFileVers, dbFileVers, (ulong)(16 * sizeof(sbyte))) != 0)
					{
						pager_reset(pPager);
						if (((pPager).bUseFetch) != 0)
						{
							sqlite3OsUnfetch(pPager.fd, (long)(0), null);
						}
					}
				}

				rc = (int)(pagerOpenWalIfPresent(pPager));
			}

			if (((pPager).pWal != null))
			{
				rc = (int)(pagerBeginReadTransaction(pPager));
			}

			if ((((pPager.tempFile) == (0)) && ((pPager.eState) == (0))) && ((rc) == (0)))
			{
				rc = (int)(pagerPagecount(pPager, &pPager.dbSize));
			}

		failed:
			; if (rc != 0) { pager_unlock(pPager); } else { pPager.eState = (byte)(1); pPager.hasHeldSharedLock = (byte)(1); }
			return (int)(rc);
		}
		public static void sqlite3PagerShrink(Pager pPager)
		{
			sqlite3PcacheShrink(pPager.pPCache);
		}
		public static int sqlite3PagerSync(Pager pPager, sbyte* zSuper)
		{
			int rc = (int)(0);
			void* pArg = (void*)(zSuper);
			rc = (int)(sqlite3OsFileControl(pPager.fd, (int)(21), pArg));
			if ((rc) == (12))
				rc = (int)(0);
			if (((rc) == (0)) && (pPager.noSync == 0))
			{
				rc = (int)(sqlite3OsSync(pPager.fd, (int)(pPager.syncFlags)));
			}

			return (int)(rc);
		}
		public static void sqlite3PagerTruncateImage(Pager pPager, uint nPage)
		{
			pPager.dbSize = (uint)(nPage);
		}
		public static sqlite3_vfs sqlite3PagerVfs(Pager pPager)
		{
			return pPager.pVfs;
		}
		public static int sqlite3PagerWalCallback(Pager pPager)
		{
			return (int)(sqlite3WalCallback(pPager.pWal));
		}
		public static int sqlite3PagerWalSupported(Pager pPager)
		{
			sqlite3_io_methods pMethods = pPager.fd.pMethods;
			if ((pPager.noLock) != 0)
				return (int)(0);
			return (((pPager.exclusiveMode) != 0) || (((pMethods.iVersion) >= (2)) && ((pMethods.xShmMap) != null)) ? 1 : 0);
		}
		public static int syncJournal(Pager pPager, int newHdr)
		{
			int rc = 0;
			rc = (int)(sqlite3PagerExclusiveLock(pPager));
			if (rc != 0)
				return (int)(rc);
			if (pPager.noSync == 0)
			{
				if (((pPager.jfd).pMethods != null) && (pPager.journalMode != 4))
				{
					int iDc = (int)(sqlite3OsDeviceCharacteristics(pPager.fd));
					if ((0) == (iDc & 0x00000200))
					{
						long iNextHdrOffset = 0;
						byte* aMagic = stackalloc byte[8];
						byte* zHeader = stackalloc byte[12];
						CRuntime.memcpy(zHeader, aJournalMagic, (ulong)(8 * sizeof(byte)));
						sqlite3Put4byte(&zHeader[8 * sizeof(byte)], (uint)(pPager.nRec));
						iNextHdrOffset = (long)(journalHdrOffset(pPager));
						rc = (int)(sqlite3OsRead(pPager.jfd, aMagic, (int)(8), (long)(iNextHdrOffset)));
						if (((rc) == (0)) && ((0) == (memcmp(aMagic, aJournalMagic, (ulong)(8)))))
						{
							rc = (int)(sqlite3OsWrite(pPager.jfd, &syncJournal_zerobyte, (int)(1), (long)(iNextHdrOffset)));
						}

						if ((rc != 0) && (rc != (10 | (2 << 8))))
						{
							return (int)(rc);
						}

						if (((pPager.fullSync) != 0) && ((0) == (iDc & 0x00000400)))
						{
							rc = (int)(sqlite3OsSync(pPager.jfd, (int)(pPager.syncFlags)));
							if (rc != 0)
								return (int)(rc);
						}

						rc = (int)(sqlite3OsWrite(pPager.jfd, zHeader, (int)(12 * sizeof(byte)), (long)(pPager.journalHdr)));
						if (rc != 0)
							return (int)(rc);
					}

					if ((0) == (iDc & 0x00000400))
					{
						rc = (int)(sqlite3OsSync(pPager.jfd, (int)(pPager.syncFlags | ((pPager.syncFlags) == (0x00003) ? 0x00010 : 0))));
						if (rc != 0)
							return (int)(rc);
					}

					pPager.journalHdr = (long)(pPager.journalOff);
					if (((newHdr) != 0) && ((0) == (iDc & 0x00000200)))
					{
						pPager.nRec = (int)(0);
						rc = (int)(writeJournalHdr(pPager));
						if (rc != 0)
							return (int)(rc);
					}
				}
				else
				{
					pPager.journalHdr = (long)(pPager.journalOff);
				}
			}

			sqlite3PcacheClearSyncFlags(pPager.pPCache);
			pPager.eState = (byte)(4);
			return (int)(0);
		}
		public static int writeJournalHdr(Pager pPager)
		{
			int rc = (int)(0);
			sbyte* zHeader = pPager.pTmpSpace;
			uint nHeader = (uint)(pPager.pageSize);
			uint nWrite = 0;
			int ii = 0;
			if ((nHeader) > (pPager.sectorSize))
			{
				nHeader = (uint)(pPager.sectorSize);
			}

			for (ii = (int)(0); (ii) < (pPager.nSavepoint); ii++)
			{
				if ((pPager.aSavepoint[ii].iHdrOffset) == (0))
				{
					pPager.aSavepoint[ii].iHdrOffset = (long)(pPager.journalOff);
				}
			}

			pPager.journalHdr = (long)(pPager.journalOff = (long)(journalHdrOffset(pPager)));
			if ((((pPager.noSync) != 0) || ((pPager.journalMode) == (4))) || ((sqlite3OsDeviceCharacteristics(pPager.fd) & 0x00000200) != 0))
			{
				CRuntime.memcpy(zHeader, aJournalMagic, (ulong)(8 * sizeof(byte)));
				sqlite3Put4byte((byte*)(&zHeader[8 * sizeof(byte)]), (uint)(0xffffffff));
			}
			else
			{
				CRuntime.memset(zHeader, (int)(0), (ulong)(8 * sizeof(byte) + 4));
			}

			sqlite3_randomness((int)(sizeof(uint)), &pPager.cksumInit);
			sqlite3Put4byte((byte*)(&zHeader[8 * sizeof(byte) + 4]), (uint)(pPager.cksumInit));
			sqlite3Put4byte((byte*)(&zHeader[8 * sizeof(byte) + 8]), (uint)(pPager.dbOrigSize));
			sqlite3Put4byte((byte*)(&zHeader[8 * sizeof(byte) + 12]), (uint)(pPager.sectorSize));
			sqlite3Put4byte((byte*)(&zHeader[8 * sizeof(byte) + 16]), (uint)(pPager.pageSize));
			CRuntime.memset(&zHeader[8 * sizeof(byte) + 20], (int)(0), (ulong)(nHeader - (8 * sizeof(byte) + 20)));
			for (nWrite = (uint)(0); ((rc) == (0)) && ((nWrite) < (pPager.sectorSize)); nWrite += (uint)(nHeader))
			{
				rc = (int)(sqlite3OsWrite(pPager.jfd, zHeader, (int)(nHeader), (long)(pPager.journalOff)));
				pPager.journalOff += (long)(nHeader);
			}

			return (int)(rc);
		}
		public static int writeSuperJournal(Pager pPager, sbyte* zSuper)
		{
			int rc = 0;
			int nSuper = 0;
			long iHdrOff = 0;
			long jrnlSize = 0;
			uint cksum = (uint)(0);
			if (((zSuper == null) || ((pPager.journalMode) == (4))) || (!((pPager.jfd).pMethods != null)))
			{
				return (int)(0);
			}

			pPager.setSuper = (byte)(1);
			for (nSuper = (int)(0); zSuper[nSuper]; nSuper++)
			{
				cksum += (uint)(zSuper[nSuper]);
			}

			if ((pPager.fullSync) != 0)
			{
				pPager.journalOff = (long)(journalHdrOffset(pPager));
			}

			iHdrOff = (long)(pPager.journalOff);
			if (((((0 != (rc = (int)(write32bits(pPager.jfd, (long)(iHdrOff), ((uint)((sqlite3PendingByte / ((pPager).pageSize)) + 1)))))) || (0 != (rc = (int)(sqlite3OsWrite(pPager.jfd, zSuper, (int)(nSuper), (long)(iHdrOff + 4)))))) || (0 != (rc = (int)(write32bits(pPager.jfd, (long)(iHdrOff + 4 + nSuper), (uint)(nSuper)))))) || (0 != (rc = (int)(write32bits(pPager.jfd, (long)(iHdrOff + 4 + nSuper + 4), (uint)(cksum)))))) || (0 != (rc = (int)(sqlite3OsWrite(pPager.jfd, aJournalMagic, (int)(8), (long)(iHdrOff + 4 + nSuper + 8))))))
			{
				return (int)(rc);
			}

			pPager.journalOff += (long)(nSuper + 20);
			if (((0) == (rc = (int)(sqlite3OsFileSize(pPager.jfd, &jrnlSize)))) && ((jrnlSize) > (pPager.journalOff)))
			{
				rc = (int)(sqlite3OsTruncate(pPager.jfd, (long)(pPager.journalOff)));
			}

			return (int)(rc);
		}
		public static int zeroJournalHdr(Pager pPager, int doTruncate)
		{
			int rc = (int)(0);
			if ((pPager.journalOff) != 0)
			{
				long iLimit = (long)(pPager.journalSizeLimit);
				if (((doTruncate) != 0) || ((iLimit) == (0)))
				{
					rc = (int)(sqlite3OsTruncate(pPager.jfd, (long)(0)));
				}
				else
				{
					rc = (int)(sqlite3OsWrite(pPager.jfd, zeroJournalHdr_zeroHdr, (int)(28 * sizeof(sbyte)), (long)(0)));
				}

				if (((rc) == (0)) && (pPager.noSync == 0))
				{
					rc = (int)(sqlite3OsSync(pPager.jfd, (int)(0x00010 | pPager.syncFlags)));
				}

				if (((rc) == (0)) && ((iLimit) > (0)))
				{
					long sz = 0;
					rc = (int)(sqlite3OsFileSize(pPager.jfd, &sz));
					if (((rc) == (0)) && ((sz) > (iLimit)))
					{
						rc = (int)(sqlite3OsTruncate(pPager.jfd, (long)(iLimit)));
					}
				}
			}

			return (int)(rc);
		}
	}
}