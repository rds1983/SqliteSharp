// Generated by Hebron at 4/3/2022 2:10:11 AM

using System;
using System.Runtime.InteropServices;
using Hebron.Runtime;

namespace SqliteSharp
{
	unsafe partial class Sqlite
	{
		public static int vdbeIncrBgPopulate(IncrMerger pIncr)
		{
			void* p = (void*)(pIncr);
			return (int)(vdbeSorterCreateThread(pIncr.pTask, vdbeIncrPopulateThread, p));
		}
		public static void vdbeIncrFree(IncrMerger pIncr)
		{
			if ((pIncr) != null)
			{
				if ((pIncr.bUseThread) != 0)
				{
					vdbeSorterJoinThread(pIncr.pTask);
					if ((pIncr.aFile[0].pFd) != null)
						sqlite3OsCloseFree(pIncr.aFile[0].pFd);
					if ((pIncr.aFile[1].pFd) != null)
						sqlite3OsCloseFree(pIncr.aFile[1].pFd);
				}

				vdbeMergeEngineFree(pIncr.pMerger);
				sqlite3_free(pIncr);
			}
		}
		public static void vdbeIncrMergerSetThreads(IncrMerger pIncr)
		{
			pIncr.bUseThread = (int)(1);
			pIncr.pTask.file2.iEof -= (long)(pIncr.mxSz);
		}
		public static int vdbeIncrPopulate(IncrMerger pIncr)
		{
			int rc = (int)(0);
			int rc2 = 0;
			long iStart = (long)(pIncr.iStartOff);
			SorterFile pOut = pIncr.aFile[1];
			SortSubtask pTask = pIncr.pTask;
			MergeEngine pMerger = pIncr.pMerger;
			PmaWriter writer = new PmaWriter();
			vdbePmaWriterInit(pOut.pFd, writer, (int)(pTask.pSorter.pgsz), (long)(iStart));
			while ((rc) == (0))
			{
				int dummy = 0;
				PmaReader pReader = pMerger.aReadr[pMerger.aTree[1]];
				int nKey = (int)(pReader.nKey);
				long iEof = (long)(writer.iWriteOff + writer.iBufEnd);
				if ((pReader.pFd) == (null))
					break;
				if ((iEof + nKey + sqlite3VarintLen((ulong)(nKey))) > (iStart + pIncr.mxSz))
					break;
				vdbePmaWriteVarint(writer, (ulong)(nKey));
				vdbePmaWriteBlob(writer, pReader.aKey, (int)(nKey));
				rc = (int)(vdbeMergeEngineStep(pIncr.pMerger, &dummy));
			}

			rc2 = (int)(vdbePmaWriterFinish(writer, &pOut.iEof));
			if ((rc) == (0))
				rc = (int)(rc2);
			return (int)(rc);
		}
		public static int vdbeIncrSwap(IncrMerger pIncr)
		{
			int rc = (int)(0);
			if ((pIncr.bUseThread) != 0)
			{
				rc = (int)(vdbeSorterJoinThread(pIncr.pTask));
				if ((rc) == (0))
				{
					SorterFile f0 = (SorterFile)(pIncr.aFile[0]);
					pIncr.aFile[0] = (SorterFile)(pIncr.aFile[1]);
					pIncr.aFile[1] = (SorterFile)(f0);
				}

				if ((rc) == (0))
				{
					if ((pIncr.aFile[0].iEof) == (pIncr.iStartOff))
					{
						pIncr.bEof = (int)(1);
					}
					else
					{
						rc = (int)(vdbeIncrBgPopulate(pIncr));
					}
				}
			}
			else
			{
				rc = (int)(vdbeIncrPopulate(pIncr));
				pIncr.aFile[0] = (SorterFile)(pIncr.aFile[1]);
				if ((pIncr.aFile[0].iEof) == (pIncr.iStartOff))
				{
					pIncr.bEof = (int)(1);
				}
			}

			return (int)(rc);
		}
	}
}