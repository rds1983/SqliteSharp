// Generated by Hebron at 4/3/2022 2:10:11 AM

using System;
using System.Runtime.InteropServices;
using Hebron.Runtime;

namespace SqliteSharp
{
	unsafe partial class Sqlite
	{
		public static void exprAnalyze(SrcList pSrc, WhereClause pWC, int idxTerm)
		{
			WhereInfo pWInfo = pWC.pWInfo;
			WhereTerm pTerm;
			WhereMaskSet* pMaskSet;
			Expr pExpr;
			ulong prereqLeft = 0;
			ulong prereqAll = 0;
			ulong extraRight = (ulong)(0);
			Expr pStr1 = null;
			int isComplete = (int)(0);
			int noCase = (int)(0);
			int op = 0;
			Parse pParse = pWInfo.pParse;
			sqlite3 db = pParse.db;
			byte eOp2 = (byte)(0);
			int nLeft = 0;
			if ((db.mallocFailed) != 0)
			{
				return;
			}

			pTerm = pWC.a[idxTerm];
			pMaskSet = &pWInfo.sMaskSet;
			pExpr = pTerm.pExpr;
			pMaskSet->bVarSelect = (int)(0);
			prereqLeft = (ulong)(sqlite3WhereExprUsage(pMaskSet, pExpr.pLeft));
			op = (int)(pExpr.op);
			if ((op) == (49))
			{
				if ((sqlite3ExprCheckIN(pParse, pExpr)) != 0)
					return;
				if ((((pExpr).flags & 0x000800) != 0))
				{
					pTerm.prereqRight = (ulong)(exprSelectUsage(pMaskSet, pExpr.x.pSelect));
				}
				else
				{
					pTerm.prereqRight = (ulong)(sqlite3WhereExprListUsage(pMaskSet, pExpr.x.pList));
				}

				prereqAll = (ulong)(prereqLeft | pTerm.prereqRight);
			}
			else
			{
				pTerm.prereqRight = (ulong)(sqlite3WhereExprUsage(pMaskSet, pExpr.pRight));
				if ((((pExpr.pLeft) == (null)) || (((pExpr).flags & (0x000800 | 0x020000)) != 0)) || (pExpr.x.pList != null))
				{
					prereqAll = (ulong)(sqlite3WhereExprUsageNN(pMaskSet, pExpr));
				}
				else
				{
					prereqAll = (ulong)(prereqLeft | pTerm.prereqRight);
				}
			}

			if ((pMaskSet->bVarSelect) != 0)
				pTerm.wtFlags |= (ushort)(0x1000);
			if ((((pExpr).flags & (0x000001)) != 0))
			{
				ulong x = (ulong)(sqlite3WhereGetMask(pMaskSet, (int)(pExpr.w.iRightJoinTable)));
				prereqAll |= (ulong)(x);
				extraRight = (ulong)(x - 1);
				if ((prereqAll >> 1) >= (x))
				{
					sqlite3ErrorMsg(pParse, "ON clause references tables to its right");
					return;
				}
			}

			pTerm.prereqAll = (ulong)(prereqAll);
			pTerm.leftCursor = (int)(-1);
			pTerm.iParent = (int)(-1);
			pTerm.eOperator = (ushort)(0);
			if ((allowedOp((int)(op))) != 0)
			{
				int* aiCurCol = stackalloc int[2];
				Expr pLeft = sqlite3ExprSkipCollate(pExpr.pLeft);
				Expr pRight = sqlite3ExprSkipCollate(pExpr.pRight);
				ushort opMask = (ushort)((pTerm.prereqRight & prereqLeft) == (0) ? 0x1fff : 0x0800);
				if ((pTerm.u.x.iField) > (0))
				{
					pLeft = pLeft.x.pList.a[pTerm.u.x.iField - 1].pExpr;
				}

				if ((exprMightBeIndexed(pSrc, (ulong)(prereqLeft), aiCurCol, pLeft, (int)(op))) != 0)
				{
					pTerm.leftCursor = (int)(aiCurCol[0]);
					pTerm.u.x.leftColumn = (int)(aiCurCol[1]);
					pTerm.eOperator = (ushort)(operatorMask((int)(op)) & opMask);
				}

				if ((op) == (45))
					pTerm.wtFlags |= (ushort)(0x0800);
				if ((((pRight) != null) && ((exprMightBeIndexed(pSrc, (ulong)(pTerm.prereqRight), aiCurCol, pRight, (int)(op))) != 0)) && (!(((pRight).flags & (0x000008)) != 0)))
				{
					WhereTerm pNew;
					Expr pDup;
					ushort eExtraOp = (ushort)(0);
					if ((pTerm.leftCursor) >= (0))
					{
						int idxNew = 0;
						pDup = sqlite3ExprDup(db, pExpr, (int)(0));
						if ((db.mallocFailed) != 0)
						{
							sqlite3ExprDelete(db, pDup);
							return;
						}

						idxNew = (int)(whereClauseInsert(pWC, pDup, (ushort)(0x0002 | 0x0001)));
						if ((idxNew) == (0))
							return;
						pNew = pWC.a[idxNew];
						markTermAsChild(pWC, (int)(idxNew), (int)(idxTerm));
						if ((op) == (45))
							pNew.wtFlags |= (ushort)(0x0800);
						pTerm = pWC.a[idxTerm];
						pTerm.wtFlags |= (ushort)(0x0008);
						if ((termIsEquivalence(pParse, pDup)) != 0)
						{
							pTerm.eOperator |= (ushort)(0x0800);
							eExtraOp = (ushort)(0x0800);
						}
					}
					else
					{
						pDup = pExpr;
						pNew = pTerm;
					}

					pNew.wtFlags |= (ushort)(exprCommute(pParse, pDup));
					pNew.leftCursor = (int)(aiCurCol[0]);
					pNew.u.x.leftColumn = (int)(aiCurCol[1]);
					pNew.prereqRight = (ulong)(prereqLeft | extraRight);
					pNew.prereqAll = (ulong)(prereqAll);
					pNew.eOperator = (ushort)((operatorMask((int)(pDup.op)) + eExtraOp) & opMask);
				}
				else if ((((op) == (50)) && (!(((pExpr).flags & (0x000001)) != 0))) && ((0) == (sqlite3ExprCanBeNull(pLeft))))
				{
					pExpr.op = (byte)(170);
					pExpr.u.zToken = "false";
					(pExpr).flags |= (uint)(0x20000000);
					pTerm.prereqAll = (ulong)(0);
					pTerm.eOperator = (ushort)(0);
				}
			}
			else if (((pExpr.op) == (48)) && ((pWC.op) == (44)))
			{
				ExprList pList;
				int i = 0;
				pList = pExpr.x.pList;
				for (i = (int)(0); (i) < (2); i++)
				{
					Expr pNewExpr;
					int idxNew = 0;
					pNewExpr = sqlite3PExpr(pParse, (int)(exprAnalyze_ops[i]), sqlite3ExprDup(db, pExpr.pLeft, (int)(0)), sqlite3ExprDup(db, pList.a[i].pExpr, (int)(0)));
					transferJoinMarkings(pNewExpr, pExpr);
					idxNew = (int)(whereClauseInsert(pWC, pNewExpr, (ushort)(0x0002 | 0x0001)));
					exprAnalyze(pSrc, pWC, (int)(idxNew));
					pTerm = pWC.a[idxTerm];
					markTermAsChild(pWC, (int)(idxNew), (int)(idxTerm));
				}
			}
			else if ((pExpr.op) == (43))
			{
				exprAnalyzeOrTerm(pSrc, pWC, (int)(idxTerm));
				pTerm = pWC.a[idxTerm];
			}
			else if ((pExpr.op) == (51))
			{
				if ((((pExpr.pLeft.op) == (167)) && ((pExpr.pLeft.iColumn) >= (0))) && (!(((pExpr).flags & (0x000001)) != 0)))
				{
					Expr pNewExpr;
					Expr pLeft = pExpr.pLeft;
					int idxNew = 0;
					WhereTerm pNewTerm;
					pNewExpr = sqlite3PExpr(pParse, (int)(54), sqlite3ExprDup(db, pLeft, (int)(0)), sqlite3ExprAlloc(db, (int)(121), null, (int)(0)));
					idxNew = (int)(whereClauseInsert(pWC, pNewExpr, (ushort)(0x0002 | 0x0001 | 0x0080)));
					if ((idxNew) != 0)
					{
						pNewTerm = pWC.a[idxNew];
						pNewTerm.prereqRight = (ulong)(0);
						pNewTerm.leftCursor = (int)(pLeft.iTable);
						pNewTerm.u.x.leftColumn = (int)(pLeft.iColumn);
						pNewTerm.eOperator = (ushort)(0x0002 << (54 - 53));
						markTermAsChild(pWC, (int)(idxNew), (int)(idxTerm));
						pTerm = pWC.a[idxTerm];
						pTerm.wtFlags |= (ushort)(0x0008);
						pNewTerm.prereqAll = (ulong)(pTerm.prereqAll);
					}
				}
			}
			else if ((((pExpr.op) == (172)) && ((pWC.op) == (44))) && ((isLikeOrGlob(pParse, pExpr, pStr1, &isComplete, &noCase)) != 0))
			{
				Expr pLeft;
				Expr pStr2;
				Expr pNewExpr1;
				Expr pNewExpr2;
				int idxNew1 = 0;
				int idxNew2 = 0;
				sbyte* zCollSeqName;
				ushort wtFlags = (ushort)(0x0100 | 0x0002 | 0x0001);
				pLeft = pExpr.x.pList.a[1].pExpr;
				pStr2 = sqlite3ExprDup(db, pStr1, (int)(0));
				if (((noCase) != 0) && (pParse.db.mallocFailed == 0))
				{
					int i = 0;
					sbyte c = 0;
					pTerm.wtFlags |= (ushort)(0x0400);
					for (i = (int)(0); (c = (sbyte)(pStr1.u.zToken[i])) != 0; i++)
					{
						pStr1.u.zToken[i] = (sbyte)((c) & ~(sqlite3CtypeMap[(byte)(c)] & 0x20));
						pStr2.u.zToken[i] = (sbyte)(sqlite3UpperToLower[(byte)(c)]);
					}
				}

				if (db.mallocFailed == 0)
				{
					byte c = 0;
					byte* pC;
					pC = (byte*)(&pStr2.u.zToken[sqlite3Strlen30(pStr2.u.zToken) - 1]);
					c = (byte)(*pC);
					if ((noCase) != 0)
					{
						if ((c) == (65 - 1))
							isComplete = (int)(0);
						c = (byte)(sqlite3UpperToLower[c]);
					}

					*pC = (byte)(c + 1);
				}

				zCollSeqName = (noCase) != 0 ? "NOCASE" : sqlite3StrBINARY;
				pNewExpr1 = sqlite3ExprDup(db, pLeft, (int)(0));
				pNewExpr1 = sqlite3PExpr(pParse, (int)(57), sqlite3ExprAddCollateString(pParse, pNewExpr1, zCollSeqName), pStr1);
				transferJoinMarkings(pNewExpr1, pExpr);
				idxNew1 = (int)(whereClauseInsert(pWC, pNewExpr1, (ushort)(wtFlags)));
				exprAnalyze(pSrc, pWC, (int)(idxNew1));
				pNewExpr2 = sqlite3ExprDup(db, pLeft, (int)(0));
				pNewExpr2 = sqlite3PExpr(pParse, (int)(56), sqlite3ExprAddCollateString(pParse, pNewExpr2, zCollSeqName), pStr2);
				transferJoinMarkings(pNewExpr2, pExpr);
				idxNew2 = (int)(whereClauseInsert(pWC, pNewExpr2, (ushort)(wtFlags)));
				exprAnalyze(pSrc, pWC, (int)(idxNew2));
				pTerm = pWC.a[idxTerm];
				if ((isComplete) != 0)
				{
					markTermAsChild(pWC, (int)(idxNew1), (int)(idxTerm));
					markTermAsChild(pWC, (int)(idxNew2), (int)(idxTerm));
				}
			}

			if (((((((pExpr.op) == (53)) || ((pExpr.op) == (45))) && ((nLeft = (int)(sqlite3ExprVectorSize(pExpr.pLeft))) > (1))) && ((sqlite3ExprVectorSize(pExpr.pRight)) == (nLeft))) && (((pExpr.pLeft.flags & 0x000800) == (0)) || ((pExpr.pRight.flags & 0x000800) == (0)))) && ((pWC.op) == (44)))
			{
				int i = 0;
				for (i = (int)(0); (i) < (nLeft); i++)
				{
					int idxNew = 0;
					Expr pNew;
					Expr pLeft = sqlite3ExprForVectorField(pParse, pExpr.pLeft, (int)(i), (int)(nLeft));
					Expr pRight = sqlite3ExprForVectorField(pParse, pExpr.pRight, (int)(i), (int)(nLeft));
					pNew = sqlite3PExpr(pParse, (int)(pExpr.op), pLeft, pRight);
					transferJoinMarkings(pNew, pExpr);
					idxNew = (int)(whereClauseInsert(pWC, pNew, (ushort)(0x0001 | 0x8000)));
					exprAnalyze(pSrc, pWC, (int)(idxNew));
				}

				pTerm = pWC.a[idxTerm];
				pTerm.wtFlags |= (ushort)(0x0004 | 0x0002);
				pTerm.eOperator = (ushort)(0);
			}
			else if ((((((((pExpr.op) == (49)) && ((pTerm.u.x.iField) == (0))) && ((pExpr.pLeft.op) == (177))) && ((((pExpr).flags & 0x000800) != 0) != 0)) && ((pExpr.x.pSelect.pPrior) == (null))) && ((pExpr.x.pSelect.pWin) == (null))) && ((pWC.op) == (44)))
			{
				int i = 0;
				for (i = (int)(0); (i) < (sqlite3ExprVectorSize(pExpr.pLeft)); i++)
				{
					int idxNew = 0;
					idxNew = (int)(whereClauseInsert(pWC, pExpr, (ushort)(0x0002 | 0x8000)));
					pWC.a[idxNew].u.x.iField = (int)(i + 1);
					exprAnalyze(pSrc, pWC, (int)(idxNew));
					markTermAsChild(pWC, (int)(idxNew), (int)(idxTerm));
				}
			}
			else if ((pWC.op) == (44))
			{
				Expr pRight = null;
				Expr pLeft = null;
				int res = (int)(isAuxiliaryVtabOperator(db, pExpr, &eOp2, pLeft, pRight));
				while ((res--) > (0))
				{
					int idxNew = 0;
					WhereTerm pNewTerm;
					ulong prereqColumn = 0;
					ulong prereqExpr = 0;
					prereqExpr = (ulong)(sqlite3WhereExprUsage(pMaskSet, pRight));
					prereqColumn = (ulong)(sqlite3WhereExprUsage(pMaskSet, pLeft));
					if ((prereqExpr & prereqColumn) == (0))
					{
						Expr pNewExpr;
						pNewExpr = sqlite3PExpr(pParse, (int)(46), null, sqlite3ExprDup(db, pRight, (int)(0)));
						if ((((pExpr).flags & (0x000001)) != 0) && ((pNewExpr) != null))
						{
							(pNewExpr).flags |= (uint)(0x000001);
							pNewExpr.w.iRightJoinTable = (int)(pExpr.w.iRightJoinTable);
						}

						idxNew = (int)(whereClauseInsert(pWC, pNewExpr, (ushort)(0x0002 | 0x0001)));
						pNewTerm = pWC.a[idxNew];
						pNewTerm.prereqRight = (ulong)(prereqExpr);
						pNewTerm.leftCursor = (int)(pLeft.iTable);
						pNewTerm.u.x.leftColumn = (int)(pLeft.iColumn);
						pNewTerm.eOperator = (ushort)(0x0040);
						pNewTerm.eMatchOp = (byte)(eOp2);
						markTermAsChild(pWC, (int)(idxNew), (int)(idxTerm));
						pTerm = pWC.a[idxTerm];
						pTerm.wtFlags |= (ushort)(0x0008);
						pNewTerm.prereqAll = (ulong)(pTerm.prereqAll);
					}

					{
						Expr t = pLeft;
						pLeft = pRight;
						pRight = t;
					}
				}
			}

			pTerm = pWC.a[idxTerm];
			pTerm.prereqRight |= (ulong)(extraRight);
		}
		public static void exprAnalyzeOrTerm(SrcList pSrc, WhereClause pWC, int idxTerm)
		{
			WhereInfo pWInfo = pWC.pWInfo;
			Parse pParse = pWInfo.pParse;
			sqlite3 db = pParse.db;
			WhereTerm pTerm = pWC.a[idxTerm];
			Expr pExpr = pTerm.pExpr;
			int i = 0;
			WhereClause pOrWc;
			WhereTerm pOrTerm;
			WhereOrInfo pOrInfo;
			ulong chngToIN = 0;
			ulong indexable = 0;
			pTerm.u.pOrInfo = pOrInfo = sqlite3DbMallocZero(db, (ulong)(sizeof(WhereOrInfo)));
			if ((pOrInfo) == (null))
				return;
			pTerm.wtFlags |= (ushort)(0x0010);
			pOrWc = pOrInfo.wc;
			CRuntime.memset(pOrWc.aStatic, (int)(0), (ulong)(8 * sizeof(WhereTerm)));
			sqlite3WhereClauseInit(pOrWc, pWInfo);
			sqlite3WhereSplit(pOrWc, pExpr, (byte)(43));
			sqlite3WhereExprAnalyze(pSrc, pOrWc);
			if ((db.mallocFailed) != 0)
				return;
			indexable = (ulong)(~(ulong)(0));
			chngToIN = (ulong)(~(ulong)(0));
			for (i = (int)(pOrWc.nTerm - 1), pOrTerm = pOrWc.a; ((i) >= (0)) && ((indexable) != 0); i--, pOrTerm++)
			{
				if ((pOrTerm.eOperator & 0x01ff) == (0))
				{
					WhereAndInfo pAndInfo;
					chngToIN = (ulong)(0);
					pAndInfo = sqlite3DbMallocRawNN(db, (ulong)(sizeof(WhereAndInfo)));
					if ((pAndInfo) != null)
					{
						WhereClause pAndWC;
						WhereTerm pAndTerm;
						int j = 0;
						ulong b = (ulong)(0);
						pOrTerm.u.pAndInfo = pAndInfo;
						pOrTerm.wtFlags |= (ushort)(0x0020);
						pOrTerm.eOperator = (ushort)(0x0400);
						pOrTerm.leftCursor = (int)(-1);
						pAndWC = pAndInfo.wc;
						CRuntime.memset(pAndWC.aStatic, (int)(0), (ulong)(8 * sizeof(WhereTerm)));
						sqlite3WhereClauseInit(pAndWC, pWC.pWInfo);
						sqlite3WhereSplit(pAndWC, pOrTerm.pExpr, (byte)(44));
						sqlite3WhereExprAnalyze(pSrc, pAndWC);
						pAndWC.pOuter = pWC;
						if (db.mallocFailed == 0)
						{
							for (j = (int)(0), pAndTerm = pAndWC.a; (j) < (pAndWC.nTerm); j++, pAndTerm++)
							{
								if (((allowedOp((int)(pAndTerm.pExpr.op))) != 0) || ((pAndTerm.eOperator) == (0x0040)))
								{
									b |= (ulong)(sqlite3WhereGetMask(&pWInfo.sMaskSet, (int)(pAndTerm.leftCursor)));
								}
							}
						}

						indexable &= (ulong)(b);
					}
				}
				else if ((pOrTerm.wtFlags & 0x0008) != 0)
				{
				}
				else
				{
					ulong b = 0;
					b = (ulong)(sqlite3WhereGetMask(&pWInfo.sMaskSet, (int)(pOrTerm.leftCursor)));
					if ((pOrTerm.wtFlags & 0x0002) != 0)
					{
						WhereTerm pOther = pOrWc.a[pOrTerm.iParent];
						b |= (ulong)(sqlite3WhereGetMask(&pWInfo.sMaskSet, (int)(pOther.leftCursor)));
					}

					indexable &= (ulong)(b);
					if ((pOrTerm.eOperator & 0x0002) == (0))
					{
						chngToIN = (ulong)(0);
					}
					else
					{
						chngToIN &= (ulong)(b);
					}
				}
			}

			pOrInfo.indexable = (ulong)(indexable);
			pTerm.eOperator = (ushort)(0x0200);
			pTerm.leftCursor = (int)(-1);
			if ((indexable) != 0)
			{
				pWC.hasOr = (byte)(1);
			}

			if (((indexable) != 0) && ((pOrWc.nTerm) == (2)))
			{
				int iOne = (int)(0);
				WhereTerm pOne;
				while ((pOne = whereNthSubterm(pOrWc.a[0], (int)(iOne++))) != null)
				{
					int iTwo = (int)(0);
					WhereTerm pTwo;
					while ((pTwo = whereNthSubterm(pOrWc.a[1], (int)(iTwo++))) != null)
					{
						whereCombineDisjuncts(pSrc, pWC, pOne, pTwo);
					}
				}
			}

			if ((chngToIN) != 0)
			{
				int okToChngToIN = (int)(0);
				int iColumn = (int)(-1);
				int iCursor = (int)(-1);
				int j = (int)(0);
				for (j = (int)(0); ((j) < (2)) && (okToChngToIN == 0); j++)
				{
					Expr pLeft = null;
					pOrTerm = pOrWc.a;
					for (i = (int)(pOrWc.nTerm - 1); (i) >= (0); i--, pOrTerm++)
					{
						pOrTerm.wtFlags &= (ushort)(~0x0040);
						if ((pOrTerm.leftCursor) == (iCursor))
						{
							continue;
						}

						if ((chngToIN & sqlite3WhereGetMask(&pWInfo.sMaskSet, (int)(pOrTerm.leftCursor))) == (0))
						{
							continue;
						}

						iColumn = (int)(pOrTerm.u.x.leftColumn);
						iCursor = (int)(pOrTerm.leftCursor);
						pLeft = pOrTerm.pExpr.pLeft;
						break;
					}

					if ((i) < (0))
					{
						break;
					}

					okToChngToIN = (int)(1);
					for (; ((i) >= (0)) && ((okToChngToIN) != 0); i--, pOrTerm++)
					{
						if (pOrTerm.leftCursor != iCursor)
						{
							pOrTerm.wtFlags &= (ushort)(~0x0040);
						}
						else if ((pOrTerm.u.x.leftColumn != iColumn) || (((iColumn) == (-2)) && ((sqlite3ExprCompare(pParse, pOrTerm.pExpr.pLeft, pLeft, (int)(-1))) != 0)))
						{
							okToChngToIN = (int)(0);
						}
						else
						{
							int affLeft = 0;
							int affRight = 0;
							affRight = (int)(sqlite3ExprAffinity(pOrTerm.pExpr.pRight));
							affLeft = (int)(sqlite3ExprAffinity(pOrTerm.pExpr.pLeft));
							if ((affRight != 0) && (affRight != affLeft))
							{
								okToChngToIN = (int)(0);
							}
							else
							{
								pOrTerm.wtFlags |= (ushort)(0x0040);
							}
						}
					}
				}

				if ((okToChngToIN) != 0)
				{
					Expr pDup;
					ExprList pList = null;
					Expr pLeft = null;
					Expr pNew;
					for (i = (int)(pOrWc.nTerm - 1), pOrTerm = pOrWc.a; (i) >= (0); i--, pOrTerm++)
					{
						if ((pOrTerm.wtFlags & 0x0040) == (0))
							continue;
						pDup = sqlite3ExprDup(db, pOrTerm.pExpr.pRight, (int)(0));
						pList = sqlite3ExprListAppend(pWInfo.pParse, pList, pDup);
						pLeft = pOrTerm.pExpr.pLeft;
					}

					pDup = sqlite3ExprDup(db, pLeft, (int)(0));
					pNew = sqlite3PExpr(pParse, (int)(49), pDup, null);
					if ((pNew) != null)
					{
						int idxNew = 0;
						transferJoinMarkings(pNew, pExpr);
						pNew.x.pList = pList;
						idxNew = (int)(whereClauseInsert(pWC, pNew, (ushort)(0x0002 | 0x0001)));
						exprAnalyze(pSrc, pWC, (int)(idxNew));
						markTermAsChild(pWC, (int)(idxNew), (int)(idxTerm));
					}
					else
					{
						sqlite3ExprListDelete(db, pList);
					}
				}
			}
		}
		public static int exprMightBeIndexed(SrcList pFrom, ulong mPrereq, int* aiCurCol, Expr pExpr, int op)
		{
			if (((pExpr.op) == (177)) && (((op) >= (54)) && ((op) <= (57))))
			{
				pExpr = pExpr.x.pList.a[0].pExpr;
			}

			if ((pExpr.op) == (167))
			{
				aiCurCol[0] = (int)(pExpr.iTable);
				aiCurCol[1] = (int)(pExpr.iColumn);
				return (int)(1);
			}

			if ((mPrereq) == (0))
				return (int)(0);
			if ((mPrereq & (mPrereq - 1)) != 0)
				return (int)(0);
			return (int)(exprMightBeIndexed2(pFrom, (ulong)(mPrereq), aiCurCol, pExpr));
		}
		public static int exprMightBeIndexed2(SrcList pFrom, ulong mPrereq, int* aiCurCol, Expr pExpr)
		{
			Index pIdx;
			int i = 0;
			int iCur = 0;
			for (i = (int)(0); (mPrereq) > (1); i++, mPrereq >>= 1)
			{
			}

			iCur = (int)(pFrom.a[i].iCursor);
			for (pIdx = pFrom.a[i].pTab.pIndex; pIdx; pIdx = pIdx.pNext)
			{
				if ((pIdx.aColExpr) == (null))
					continue;
				for (i = (int)(0); (i) < (pIdx.nKeyCol); i++)
				{
					if (pIdx.aiColumn[i] != (-2))
						continue;
					if ((sqlite3ExprCompareSkip(pExpr, pIdx.aColExpr.a[i].pExpr, (int)(iCur))) == (0))
					{
						aiCurCol[0] = (int)(iCur);
						aiCurCol[1] = (int)(-2);
						return (int)(1);
					}
				}
			}

			return (int)(0);
		}
		public static SrcItem isSelfJoinView(SrcList pTabList, SrcItem pThis)
		{
			SrcItem pItem;
			if ((pThis.pSelect.selFlags & 0x1000000) != 0)
				return null;
			for (pItem = pTabList.a; (pItem) < (pThis); pItem++)
			{
				Select pS1;
				if ((pItem.pSelect) == (null))
					continue;
				if ((pItem.fg.viaCoroutine) != 0)
					continue;
				if ((pItem.zName) == (null))
					continue;
				if (pItem.pTab.pSchema != pThis.pTab.pSchema)
					continue;
				if (sqlite3_stricmp(pItem.zName, pThis.zName) != 0)
					continue;
				pS1 = pItem.pSelect;
				if (((pItem.pTab.pSchema) == (null)) && (pThis.pSelect.selId != pS1.selId))
				{
					continue;
				}

				if ((pItem.pSelect.selFlags & 0x1000000) != 0)
				{
					continue;
				}

				return pItem;
			}

			return null;
		}
		public static void sqlite3SrcListShiftJoinType(SrcList p)
		{
			if ((p) != null)
			{
				int i = 0;
				for (i = (int)(p.nSrc - 1); (i) > (0); i--)
				{
					p.a[i].fg.jointype = (byte)(p.a[i - 1].fg.jointype);
				}

				p.a[0].fg.jointype = (byte)(0);
			}
		}
		public static void sqlite3WhereExprAnalyze(SrcList pTabList, WhereClause pWC)
		{
			int i = 0;
			for (i = (int)(pWC.nTerm - 1); (i) >= (0); i--)
			{
				exprAnalyze(pTabList, pWC, (int)(i));
			}
		}
		public static int tableAndColumnIndex(SrcList pSrc, int N, sbyte* zCol, int* piTab, int* piCol, int bIgnoreHidden)
		{
			int i = 0;
			int iCol = 0;
			for (i = (int)(0); (i) < (N); i++)
			{
				iCol = (int)(sqlite3ColumnIndex(pSrc.a[i].pTab, zCol));
				if (((iCol) >= (0)) && (((bIgnoreHidden) == (0)) || ((((&pSrc.a[i].pTab.aCol[iCol])->colFlags & 0x0002) != 0) == (0))))
				{
					if ((piTab) != null)
					{
						*piTab = (int)(i);
						*piCol = (int)(iCol);
					}

					return (int)(1);
				}
			}

			return (int)(0);
		}
		public static void whereCombineDisjuncts(SrcList pSrc, WhereClause pWC, WhereTerm pOne, WhereTerm pTwo)
		{
			ushort eOp = (ushort)(pOne.eOperator | pTwo.eOperator);
			sqlite3 db;
			Expr pNew;
			int op = 0;
			int idxNew = 0;
			if (((pOne.wtFlags | pTwo.wtFlags) & 0x0080) != 0)
				return;
			if ((pOne.eOperator & (0x0002 | (0x0002 << (56 - 53)) | (0x0002 << (55 - 53)) | (0x0002 << (54 - 53)) | (0x0002 << (57 - 53)))) == (0))
				return;
			if ((pTwo.eOperator & (0x0002 | (0x0002 << (56 - 53)) | (0x0002 << (55 - 53)) | (0x0002 << (54 - 53)) | (0x0002 << (57 - 53)))) == (0))
				return;
			if (((eOp & (0x0002 | (0x0002 << (56 - 53)) | (0x0002 << (55 - 53)))) != eOp) && ((eOp & (0x0002 | (0x0002 << (54 - 53)) | (0x0002 << (57 - 53)))) != eOp))
				return;
			if ((sqlite3ExprCompare(null, pOne.pExpr.pLeft, pTwo.pExpr.pLeft, (int)(-1))) != 0)
				return;
			if ((sqlite3ExprCompare(null, pOne.pExpr.pRight, pTwo.pExpr.pRight, (int)(-1))) != 0)
				return;
			if ((eOp & (eOp - 1)) != 0)
			{
				if ((eOp & ((0x0002 << (56 - 53)) | (0x0002 << (55 - 53)))) != 0)
				{
					eOp = (ushort)(0x0002 << (55 - 53));
				}
				else
				{
					eOp = (ushort)(0x0002 << (57 - 53));
				}
			}

			db = pWC.pWInfo.pParse.db;
			pNew = sqlite3ExprDup(db, pOne.pExpr, (int)(0));
			if ((pNew) == (null))
				return;
			for (op = (int)(53); eOp != (0x0002 << (op - 53)); op++)
			{
			}

			pNew.op = (byte)(op);
			idxNew = (int)(whereClauseInsert(pWC, pNew, (ushort)(0x0002 | 0x0001)));
			exprAnalyze(pSrc, pWC, (int)(idxNew));
		}
	}
}