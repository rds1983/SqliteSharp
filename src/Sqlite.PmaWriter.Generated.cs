// Generated by Hebron at 4/3/2022 2:10:11 AM

using System;
using System.Runtime.InteropServices;
using Hebron.Runtime;

namespace SqliteSharp
{
	unsafe partial class Sqlite
	{
		public static void vdbePmaWriteBlob(PmaWriter p, byte* pData, int nData)
		{
			int nRem = (int)(nData);
			while (((nRem) > (0)) && ((p.eFWErr) == (0)))
			{
				int nCopy = (int)(nRem);
				if ((nCopy) > (p.nBuffer - p.iBufEnd))
				{
					nCopy = (int)(p.nBuffer - p.iBufEnd);
				}

				CRuntime.memcpy(&p.aBuffer[p.iBufEnd], &pData[nData - nRem], (ulong)(nCopy));
				p.iBufEnd += (int)(nCopy);
				if ((p.iBufEnd) == (p.nBuffer))
				{
					p.eFWErr = (int)(sqlite3OsWrite(p.pFd, &p.aBuffer[p.iBufStart], (int)(p.iBufEnd - p.iBufStart), (long)(p.iWriteOff + p.iBufStart)));
					p.iBufStart = (int)(p.iBufEnd = (int)(0));
					p.iWriteOff += (long)(p.nBuffer);
				}

				nRem -= (int)(nCopy);
			}
		}
		public static int vdbePmaWriterFinish(PmaWriter p, long* piEof)
		{
			int rc = 0;
			if ((((p.eFWErr) == (0)) && ((p.aBuffer) != null)) && ((p.iBufEnd) > (p.iBufStart)))
			{
				p.eFWErr = (int)(sqlite3OsWrite(p.pFd, &p.aBuffer[p.iBufStart], (int)(p.iBufEnd - p.iBufStart), (long)(p.iWriteOff + p.iBufStart)));
			}

			*piEof = (long)(p.iWriteOff + p.iBufEnd);
			sqlite3_free(p.aBuffer);
			rc = (int)(p.eFWErr);
			CRuntime.memset(p, (int)(0), (ulong)(sizeof(PmaWriter)));
			return (int)(rc);
		}
		public static void vdbePmaWriteVarint(PmaWriter p, ulong iVal)
		{
			int nByte = 0;
			byte* aByte = stackalloc byte[10];
			nByte = (int)(sqlite3PutVarint(aByte, (ulong)(iVal)));
			vdbePmaWriteBlob(p, aByte, (int)(nByte));
		}
	}
}