// Generated by Hebron at 4/3/2022 2:09:37 AM

using System;
using System.Runtime.InteropServices;
using Hebron.Runtime;

namespace SqliteSharp
{
	unsafe partial class Sqlite
	{
		public delegate int delegate0(sqlite3_file arg0);
		public delegate int delegate1(sqlite3_file arg0, void* arg1, int arg2, long arg3);
		public delegate void delegate10(sqlite3_vfs arg0, int arg1, sbyte* arg2);
		public delegate sqlite3 delegate100(sqlite3_stmt* arg0);
		public delegate sbyte* delegate101(sqlite3 arg0);
		public delegate void* delegate102(sqlite3 arg0);
		public delegate void delegate103(sbyte** arg0);
		public delegate void delegate104(sqlite3 arg0);
		public delegate long delegate105(sqlite3 arg0);
		public delegate sbyte* delegate106();
		public delegate sbyte* delegate107(sbyte* arg0);
		public delegate int delegate108(sbyte* arg0, sqlite3 arg1);
		public delegate void delegate109(sqlite3 arg0, int arg1, delegate19 arg2, void* arg3);
		public delegate delegate74 delegate11(sqlite3_vfs arg0, void* arg1, sbyte* arg2);
		public delegate void delegate110(sqlite3_context arg0, void* arg1, int arg2, delegate17 arg3);
		public delegate void delegate111(sqlite3_context arg0, double arg1);
		public delegate sbyte* delegate112(int arg0, sbyte* arg1, sbyte* arg2);
		public delegate int delegate113(sqlite3 arg0, sbyte* arg1, sbyte* arg2, sbyte* arg3, sbyte** arg4, sbyte** arg5, int* arg6, int* arg7, int* arg8);
		public delegate void* delegate114(sqlite3_context arg0);
		public delegate void* delegate115(sqlite3_value arg0);
		public delegate int delegate116(sqlite3_value arg0);
		public delegate double delegate117(sqlite3_value arg0);
		public delegate long delegate118(sqlite3_value arg0);
		public delegate byte* delegate119(sqlite3_value arg0);
		public delegate void delegate12(sqlite3_vfs arg0, void* arg1);
		public delegate sbyte* delegate120(sbyte* arg0, sbyte* arg1);
		public delegate int delegate121(sqlite3_blob* arg0);
		public delegate int delegate122(sqlite3 arg0, sbyte* arg1, sbyte* arg2, sbyte* arg3, long arg4, int arg5, sqlite3_blob** arg6);
		public delegate int delegate123(sqlite3_blob* arg0, void* arg1, int arg2, int arg3);
		public delegate long delegate124(int arg0);
		public delegate long delegate125();
		public delegate int delegate126(sbyte* arg0, sqlite3 arg1, int arg2, sbyte* arg3);
		public delegate void delegate127(int arg0);
		public delegate sqlite3_vfs delegate128(sbyte* arg0);
		public delegate int delegate129(sqlite3_vfs arg0);
		public delegate int delegate13(sqlite3_vfs arg0, int arg1);
		public delegate void delegate130(int arg0, void* arg1);
		public delegate sqlite3 delegate131(sqlite3_context arg0);
		public delegate sqlite3_stmt* delegate132(sqlite3 arg0, sqlite3_stmt* arg1);
		public delegate sbyte* delegate133(sqlite3_stmt* arg0);
		public delegate int delegate134(int arg0, int* arg1, int* arg2, int arg3);
		public delegate int delegate135(sqlite3_backup arg0);
		public delegate sqlite3_backup delegate136(sqlite3 arg0, sbyte* arg1, sqlite3 arg2, sbyte* arg3);
		public delegate int delegate137(sqlite3_backup arg0, int arg1);
		public delegate sbyte* delegate138(int arg0);
		public delegate sqlite3_mutex* delegate139(sqlite3 arg0);
		public delegate delegate74 delegate14(sqlite3_vfs arg0, sbyte* arg1);
		public delegate long delegate140(long arg0);
		public delegate int delegate141(sbyte* arg0, sbyte* arg1, int arg2);
		public delegate int delegate142(sqlite3_blob* arg0, long arg1);
		public delegate sbyte* delegate143(sqlite3 arg0, sbyte* arg1);
		public delegate long delegate144(sbyte* arg0, sbyte* arg1, long arg2);
		public delegate sbyte* delegate145(int arg0, sbyte* arg1, sbyte* arg2, sbyte* arg3);
		public delegate int delegate146(delegate74 arg0);
		public delegate int delegate147(sqlite3_stmt* arg0, int arg1, sbyte* arg2, ulong arg3, delegate17 arg4, byte arg5);
		public delegate void* delegate148(ulong arg0);
		public delegate ulong delegate149(void* arg0);
		public delegate sbyte* delegate15(sqlite3_vfs arg0, sbyte* arg1);
		public delegate void delegate150(sqlite3_context arg0, sbyte* arg1, ulong arg2, delegate17 arg3, byte arg4);
		public delegate sqlite3_value delegate151(sqlite3_value arg0);
		public delegate void delegate152(sqlite3_value arg0);
		public delegate int delegate153(sqlite3_context arg0, ulong arg1);
		public delegate uint delegate154(sqlite3_value arg0);
		public delegate void* delegate155(sqlite3_value arg0, sbyte* arg1);
		public delegate sbyte* delegate156(sqlite3_index_info* arg0, int arg1);
		public delegate int delegate157(int arg0, sbyte** arg1, int* arg2);
		public delegate sqlite3_str delegate158(sqlite3 arg0);
		public delegate sbyte* delegate159(sqlite3_str arg0);
		public delegate void* delegate16(int arg0);
		public delegate void delegate160(sqlite3_str arg0, sbyte* arg1);
		public delegate void delegate161(sqlite3_str arg0, sbyte* arg1, sbyte* arg2);
		public delegate void delegate162(sqlite3_str arg0);
		public delegate int delegate163(sqlite3_str arg0);
		public delegate int delegate164(sqlite3 arg0, sbyte* arg1, int arg2, int arg3, void* arg4, delegate68 arg5, delegate69 arg6, delegate69 arg7, delegate68 arg8, delegate17 arg9);
		public delegate sbyte* delegate165(sbyte* arg0, sbyte* arg1, sbyte* arg2, int arg3, sbyte** arg4);
		public delegate void delegate166(sbyte* arg0);
		public delegate sqlite3_file delegate167(sbyte* arg0);
		public delegate int delegate168(sqlite3_index_info* arg0, int arg1, sqlite3_value arg2);
		public delegate int delegate169(sqlite3_index_info* arg0);
		public delegate void delegate17(void* arg0);
		public delegate int delegate170(sqlite3_value arg0, sqlite3_value arg1);
		public delegate void delegate171();
		public delegate void delegate172(sqlite3_context arg0, int arg1, sqlite3_value arg2);
		public delegate void* delegate18(void* arg0, int arg1);
		public delegate int delegate19(void* arg0);
		public delegate int delegate2(sqlite3_file arg0, long arg1);
		public delegate int delegate20(int arg0);
		public delegate int delegate21(sqlite3 arg0, void* arg1, int arg2, sbyte** arg3, sqlite3_vtab arg4, sbyte** arg5);
		public delegate int delegate22(sqlite3_vtab arg0, sqlite3_index_info* arg1);
		public delegate int delegate23(sqlite3_vtab arg0);
		public delegate int delegate24(sqlite3_vtab_cursor arg0);
		public delegate int delegate25(sqlite3_vtab_cursor arg0, int arg1, sbyte* arg2, int arg3, sqlite3_value arg4);
		public delegate int delegate26(sqlite3_vtab_cursor arg0, sqlite3_context arg1, int arg2);
		public delegate int delegate27(sqlite3_vtab_cursor arg0, long* arg1);
		public delegate int delegate28(sqlite3_vtab arg0, int arg1, sqlite3_value arg2, long* arg3);
		public delegate int delegate29(sqlite3_vtab arg0, int arg1, sbyte* arg2, delegate172 arg3, void** arg4);
		public delegate int delegate3(sqlite3_file arg0, int arg1, void* arg2);
		public delegate int delegate30(sbyte* arg0);
		public delegate int delegate31();
		public delegate sqlite3_mutex* delegate32(int arg0);
		public delegate void delegate33(sqlite3_mutex* arg0);
		public delegate int delegate34(sqlite3_mutex* arg0);
		public delegate sqlite3_pcache* delegate35(int arg0, int arg1, int arg2);
		public delegate void delegate36(sqlite3_pcache* arg0, int arg1);
		public delegate int delegate37(sqlite3_pcache* arg0);
		public delegate sqlite3_pcache_page* delegate38(sqlite3_pcache* arg0, uint arg1, int arg2);
		public delegate void delegate39(sqlite3_pcache* arg0, sqlite3_pcache_page* arg1, int arg2);
		public delegate int delegate4(sqlite3_file arg0, int arg1, int arg2, int arg3, void** arg4);
		public delegate void delegate40(sqlite3_pcache* arg0, sqlite3_pcache_page* arg1, uint arg2, uint arg3);
		public delegate void delegate41(sqlite3_pcache* arg0);
		public delegate sqlite3_pcache* delegate42(int arg0, int arg1);
		public delegate void* delegate43(sqlite3_pcache* arg0, uint arg1, int arg2);
		public delegate void* delegate44(Fts5Context* arg0);
		public delegate int delegate45(Fts5Context* arg0);
		public delegate int delegate46(Fts5Context* arg0, long* arg1);
		public delegate int delegate47(Fts5Context* arg0, int arg1, long* arg2);
		public delegate int delegate48(Fts5Context* arg0, sbyte* arg1, int arg2, void* arg3, delegate67 arg4);
		public delegate long delegate49(Fts5Context* arg0);
		public delegate void delegate5(sqlite3_file arg0);
		public delegate int delegate50(Fts5Context* arg0, int arg1, sbyte** arg2, int* arg3);
		public delegate void* delegate51(Fts5Context* arg0, int arg1);
		public delegate void delegate52(Fts5Context* arg0, Fts5PhraseIter* arg1, int* arg2, int* arg3);
		public delegate void delegate53(Fts5Context* arg0, Fts5PhraseIter* arg1, int* arg2);
		public delegate int delegate54(void* arg0, sbyte** arg1, int arg2, Fts5Tokenizer** arg3);
		public delegate void delegate55(Fts5Tokenizer* arg0);
		public delegate int delegate56(Fts5Tokenizer* arg0, void* arg1, int arg2, sbyte* arg3, int arg4, delegate67 arg5);
		public delegate int delegate57(fts5_api arg0, sbyte* arg1, void* arg2, fts5_tokenizer arg3, delegate17 arg4);
		public delegate int delegate58(fts5_api arg0, sbyte* arg1, void** arg2, fts5_tokenizer arg3);
		public delegate int delegate59(void* arg0, int arg1);
		public delegate int delegate6(sqlite3_vfs arg0, sbyte* arg1, sqlite3_file arg2, int arg3, int* arg4);
		public delegate int delegate60(BtCursor arg0, int arg1);
		public delegate void delegate61(void* arg0, sbyte* arg1);
		public delegate int delegate62(uint arg0, void* arg1, void* arg2, void* arg3);
		public delegate void delegate63(void* arg0, sbyte* arg1, ulong arg2);
		public delegate void delegate64(void* arg0, int arg1, sbyte* arg2, sbyte* arg3, long arg4);
		public delegate uint delegate65(void* arg0, sbyte* arg1, uint arg2, uint arg3, uint arg4);
		public delegate void delegate66(void* arg0, sqlite3 arg1, int arg2, sbyte* arg3);
		public delegate int delegate67(void* arg0, int arg1, sbyte* arg2, sbyte* arg3, sbyte* arg4, sbyte* arg5);
		public delegate void delegate68(sqlite3_context arg0, int arg1, sqlite3_value arg2);
		public delegate void delegate69(sqlite3_context arg0);
		public delegate int delegate7(sqlite3_vfs arg0, sbyte* arg1, int arg2);
		public delegate int delegate70(void* arg0, int arg1, void* arg2, int arg3, void* arg4);
		public delegate void delegate71(sqlite3 arg0, void* arg1);
		public delegate int delegate72(Walker arg0, Expr arg1);
		public delegate void delegate73(Walker arg0, Select arg1);
		public delegate void delegate74();
		public delegate void* delegate75(void* arg0);
		public delegate void delegate76(PgHdr arg0);
		public delegate int delegate77(Pager arg0, uint arg1, PgHdr arg2, int arg3);
		public delegate ushort delegate78(MemPage arg0, byte* arg1);
		public delegate void delegate79(MemPage arg0, byte* arg1, CellInfo* arg2);
		public delegate int delegate8(sqlite3_vfs arg0, sbyte* arg1, int arg2, int* arg3);
		public delegate int delegate80(SortSubtask arg0, int* arg1, void* arg2, int arg3, void* arg4, int arg5);
		public delegate void* delegate81(sqlite3_context arg0, int arg1);
		public delegate int delegate82(sqlite3_context arg0);
		public delegate int delegate83(sqlite3_stmt* arg0, int arg1, void* arg2, int arg3, delegate17 arg4);
		public delegate int delegate84(sqlite3_stmt* arg0, int arg1, double arg2);
		public delegate int delegate85(sqlite3_stmt* arg0, int arg1);
		public delegate int delegate86(sqlite3_stmt* arg0);
		public delegate sbyte* delegate87(sqlite3_stmt* arg0, int arg1);
		public delegate int delegate88(sqlite3 arg0, delegate59 arg1, void* arg2);
		public delegate int delegate89(sqlite3 arg0, int arg1);
		public delegate void* delegate9(sqlite3_vfs arg0, sbyte* arg1);
		public delegate int delegate90(sqlite3 arg0);
		public delegate void* delegate91(sqlite3_stmt* arg0, int arg1);
		public delegate double delegate92(sqlite3_stmt* arg0, int arg1);
		public delegate long delegate93(sqlite3_stmt* arg0, int arg1);
		public delegate byte* delegate94(sqlite3_stmt* arg0, int arg1);
		public delegate sqlite3_value delegate95(sqlite3_stmt* arg0, int arg1);
		public delegate void* delegate96(sqlite3 arg0, delegate19 arg1, void* arg2);
		public delegate int delegate97(sqlite3 arg0, sbyte* arg1, int arg2, void* arg3, delegate70 arg4);
		public delegate int delegate98(sqlite3 arg0, sbyte* arg1, int arg2, int arg3, void* arg4, delegate68 arg5, delegate68 arg6, delegate69 arg7);
		public delegate int delegate99(sqlite3 arg0, sbyte* arg1, sqlite3_module arg2, void* arg3);
		public unsafe struct aFlagOpType
		{
			public int op;
			public uint mask;
		}
		public unsafe class AggInfo
		{
			public byte directMode;
			public byte useSortingIdx;
			public int sortingIdx;
			public int sortingIdxPTab;
			public int nSortingColumn;
			public int mnReg;
			public int mxReg;
			public ExprList pGroupBy;
			public AggInfo_col aCol;
			public int nColumn;
			public int nAccumulator;
			public AggInfo_func aFunc;
			public int nFunc;
			public uint selId;
		}
		public unsafe class AggInfo_col
		{
			public Table pTab;
			public Expr pCExpr;
			public int iTable;
			public int iMem;
			public short iColumn;
			public short iSorterColumn;
		}
		public unsafe class AggInfo_func
		{
			public Expr pFExpr;
			public FuncDef pFunc;
			public int iMem;
			public int iDistinct;
			public int iDistAddr;
		}
		public unsafe struct aKeywordType
		{
			public byte i;
			public byte nChar;
			public byte code;
		}
		public unsafe class aModType
		{
			public sbyte* zName;
			public sqlite3_module pModule;
		}
		public unsafe class analysisInfo
		{
			public sqlite3 db;
			public sbyte* zDatabase;
		}
		public unsafe struct aTableType
		{
			public sbyte* zName;
			public sbyte* zCols;
		}
		public unsafe class AuthContext
		{
			public sbyte* zAuthContext;
			public Parse pParse;
		}
		public unsafe class AutoincInfo
		{
			public AutoincInfo pNext;
			public Table pTab;
			public int iDb;
			public int regCtr;
		}
		public unsafe class AuxData
		{
			public int iAuxOp;
			public int iAuxArg;
			public void* pAux;
			public delegate17 xDeleteAux;
			public AuxData pNextAux;
		}
		public unsafe struct aXformTypeDef
		{
			public byte nName;
			public fixed sbyte zName[7];
			public float rLimit;
			public float rXform;
		}
		public unsafe class BenignMallocHooks
		{
			public delegate74 xBenignBegin;
			public delegate74 xBenignEnd;
		}
		public unsafe struct Bitvec
		{
			public uint iSize;
			public uint nSet;
			public uint iDivisor;
			[StructLayout(LayoutKind.Explicit)]
			public unsafe struct unnamed1
			{
				[FieldOffset(0)]
				public fixed byte aBitmap[496];
				[FieldOffset(0)]
				public fixed uint aHash[124];
				[FieldOffset(0)]
				public fixed long apSub[62];
			}

			public unnamed1 u;
		}
		public unsafe class BtCursor
		{
			public byte eState;
			public byte curFlags;
			public byte curPagerFlags;
			public byte hints;
			public int skipNext;
			public Btree pBtree;
			public uint* aOverflow;
			public void* pKey;
			public BtShared pBt;
			public BtCursor pNext;
			public CellInfo info;
			public long nKey;
			public uint pgnoRoot;
			public sbyte iPage;
			public byte curIntKey;
			public ushort ix;
			public UnsafeArray1D<ushort> aiIdxArray = new UnsafeArray1D<ushort>(19);
			public ushort* aiIdx;
			public KeyInfo pKeyInfo;
			public MemPage pPage;
			public MemPage[] apPage = new MemPage[19];
			public BtCursor()
			{
				aiIdx = (ushort*)aiIdxArray;
				for (var i = 0; i < 19; ++i)
				{
					apPage[i] = new MemPage();
				}
			}
		}
		public unsafe class BtLock
		{
			public Btree pBtree;
			public uint iTable;
			public byte eLock;
			public BtLock pNext;
		}
		public unsafe class Btree
		{
			public sqlite3 db;
			public BtShared pBt;
			public byte inTrans;
			public byte sharable;
			public byte locked;
			public byte hasIncrblobCur;
			public int wantToLock;
			public int nBackup;
			public uint iBDataVersion;
			public Btree pNext;
			public Btree pPrev;
			public BtLock _lock_;
		}
		public unsafe class BtreePayload
		{
			public void* pKey;
			public long nKey;
			public void* pData;
			public sqlite3_value aMem;
			public ushort nMem;
			public int nData;
			public int nZero;
		}
		public unsafe class BtShared
		{
			public Pager pPager;
			public sqlite3 db;
			public BtCursor pCursor;
			public MemPage pPage1;
			public byte openFlags;
			public byte autoVacuum;
			public byte incrVacuum;
			public byte bDoTruncate;
			public byte inTransaction;
			public byte max1bytePayload;
			public byte nReserveWanted;
			public ushort btsFlags;
			public ushort maxLocal;
			public ushort minLocal;
			public ushort maxLeaf;
			public ushort minLeaf;
			public uint pageSize;
			public uint usableSize;
			public int nTransaction;
			public uint nPage;
			public void* pSchema;
			public delegate17 xFreeSchema;
			public sqlite3_mutex* mutex;
			public Bitvec* pHasContent;
			public int nRef;
			public BtShared pNext;
			public BtLock pLock;
			public Btree pWriter;
			public byte* pTmpSpace;
			public int nPreformatSize;
		}
		public unsafe class BusyHandler
		{
			public delegate59 xBusyHandler;
			public void* pBusyArg;
			public int nBusy;
		}
		public unsafe struct CallCount
		{
			public long nValue;
			public long nStep;
			public long nTotal;
		}
		public unsafe class CellArray
		{
			public int nCell;
			public MemPage pRef;
			public byte** apCell;
			public ushort* szCell;
			public UnsafeArray1D<byte> apEndArray = new UnsafeArray1D<byte>(6);
			public byte** apEnd;
			public UnsafeArray1D<int> ixNxArray = new UnsafeArray1D<int>(6);
			public int* ixNx;
			public CellArray()
			{
				apEnd = (byte**)apEndArray;
				ixNx = (int*)ixNxArray;
			}
		}
		public unsafe struct CellInfo
		{
			public long nKey;
			public byte* pPayload;
			public uint nPayload;
			public ushort nLocal;
			public ushort nSize;
		}
		public unsafe class CollSeq
		{
			public sbyte* zName;
			public byte enc;
			public void* pUser;
			public delegate70 xCmp;
			public delegate17 xDel;
		}
		public unsafe struct Column
		{
			public sbyte* zCnName;
			public uint notNull;
			public uint eCType;
			public sbyte affinity;
			public byte szEst;
			public byte hName;
			public ushort iDflt;
			public ushort colFlags;
		}
		public unsafe struct compareInfo
		{
			public byte matchAll;
			public byte matchOne;
			public byte matchSet;
			public byte noCase;
		}
		public unsafe struct CountCtx
		{
			public long n;
		}
		public unsafe class Cte
		{
			public sbyte* zName;
			public ExprList pCols;
			public Select pSelect;
			public sbyte* zCteErr;
			public CteUse* pUse;
			public byte eM10d;
		}
		public unsafe struct CteUse
		{
			public int nUse;
			public int addrM9e;
			public int regRtn;
			public int iCur;
			public short nRowEst;
			public byte eM10d;
		}
		public unsafe struct DateTime
		{
			public long iJD;
			public int Y;
			public int M;
			public int D;
			public int h;
			public int m;
			public int tz;
			public double s;
			public sbyte validJD;
			public sbyte rawS;
			public sbyte validYMD;
			public sbyte validHMS;
			public sbyte validTZ;
			public sbyte tzSet;
			public sbyte isError;
		}
		public unsafe class Db
		{
			public sbyte* zDbSName;
			public Btree pBt;
			public byte safety_level;
			public byte bSyncSet;
			public Schema pSchema;
		}
		public unsafe class DbFixer
		{
			public Parse pParse;
			public Walker w;
			public Schema pSchema;
			public byte bTemp;
			public sbyte* zDb;
			public sbyte* zType;
			public Token* pName;
		}
		public unsafe struct DblquoteStr
		{
			public DblquoteStr* pNextStr;
			public fixed sbyte z[8];
		}
		public unsafe struct DistinctCtx
		{
			public byte isTnct;
			public byte eTnctType;
			public int tabTnct;
			public int addrTnct;
		}
		public unsafe struct EntropyGatherer
		{
			public byte* a;
			public int na;
			public int i;
			public int nXor;
		}
		public unsafe struct et_info
		{
			public sbyte fmttype;
			public byte _base_;
			public byte flags;
			public byte type;
			public byte charset;
			public byte prefix;
		}
		public unsafe class Expr
		{
			public byte op;
			public sbyte affExpr;
			public byte op2;
			public uint flags;
			[StructLayout(LayoutKind.Explicit)]
			public unsafe struct unnamed1
			{
				[FieldOffset(0)]
				public sbyte* zToken;
				[FieldOffset(0)]
				public int iValue;
			}

			public unnamed1 u;
			public Expr pLeft;
			public Expr pRight;
			[StructLayout(LayoutKind.Explicit)]
			public unsafe struct unnamed2
			{
				[FieldOffset(0)]
				public ExprList pList;
				[FieldOffset(0)]
				public Select pSelect;
			}

			public unnamed2 x;
			public int nHeight;
			public int iTable;
			public short iColumn;
			public short iAgg;
			[StructLayout(LayoutKind.Explicit)]
			public unsafe struct unnamed3
			{
				[FieldOffset(0)]
				public int iRightJoinTable;
				[FieldOffset(0)]
				public int iOfst;
			}

			public unnamed3 w;
			public AggInfo pAggInfo;
			[StructLayout(LayoutKind.Explicit)]
			public unsafe struct unnamed4
			{
				[FieldOffset(0)]
				public Table pTab;
				[FieldOffset(0)]
				public Window pWin;
				public unsafe struct unnamed5
				{
					public int iAddr;
					public int regReturn;
				}

				[FieldOffset(0)]
				public unnamed5 sub;
			}

			public unnamed4 y;
		}
		public unsafe class ExprList
		{
			public int nExpr;
			public int nAlloc;
			public unsafe struct ExprList_item
			{
				public Expr pExpr;
				public sbyte* zEName;
				public byte sortFlags;
				public uint eEName;
				public uint done;
				public uint reusable;
				public uint bSorterRef;
				public uint bNulls;
				[StructLayout(LayoutKind.Explicit)]
				public unsafe struct unnamed2
				{
					public unsafe struct unnamed3
					{
						public ushort iOrderByCol;
						public ushort iAlias;
					}

					[FieldOffset(0)]
					public unnamed3 x;
					[FieldOffset(0)]
					public int iConstExprReg;
				}

				public unnamed2 u;
			}

			public UnsafeArray1D<ExprList_item> aArray = new UnsafeArray1D<ExprList_item>(1);
			public ExprList_item* a;
			public ExprList()
			{
				a = (ExprList_item*)aArray;
			}
		}
		public unsafe struct FileChunk
		{
			public FileChunk* pNext;
			public fixed byte zChunk[8];
		}
		public unsafe struct FilePoint
		{
			public long iOffset;
			public FileChunk* pChunk;
		}
		public unsafe class FKey
		{
			public Table pFrom;
			public FKey pNextFrom;
			public sbyte* zTo;
			public FKey pNextTo;
			public FKey pPrevTo;
			public int nCol;
			public byte isDeferred;
			public UnsafeArray1D<byte> aActionArray = new UnsafeArray1D<byte>(2);
			public byte* aAction;
			public Trigger[] apTrigger = new Trigger[2];
			public unsafe struct sColMap
			{
				public int iFrom;
				public sbyte* zCol;
			}

			public UnsafeArray1D<sColMap> aColArray = new UnsafeArray1D<sColMap>(1);
			public sColMap* aCol;
			public FKey()
			{
				aAction = (byte*)aActionArray;
				for (var i = 0; i < 2; ++i)
				{
					apTrigger[i] = new Trigger();
				}

				aCol = (sColMap*)aColArray;
			}
		}
		public unsafe class FrameBound
		{
			public int eType;
			public Expr pExpr;
		}
		public unsafe class fts5_api
		{
			public int iVersion;
			public delegate57 xCreateTokenizer;
			public delegate58 xFindTokenizer;
			public delegate57 xCreateFunction;
		}
		public unsafe class fts5_tokenizer
		{
			public delegate54 xCreate;
			public delegate55 xDelete;
			public delegate56 xTokenize;
		}
		public unsafe struct Fts5Context
		{
		}
		public unsafe class Fts5ExtensionApi
		{
			public int iVersion;
			public delegate44 xUserData;
			public delegate45 xColumnCount;
			public delegate46 xRowCount;
			public delegate47 xColumnTotalSize;
			public delegate48 xTokenize;
			public delegate45 xPhraseCount;
			public delegate46 xPhraseSize;
			public delegate46 xInstCount;
			public delegate48 xInst;
			public delegate49 xRowid;
			public delegate50 xColumnText;
			public delegate47 xColumnSize;
			public delegate50 xQueryPhrase;
			public delegate47 xSetAuxdata;
			public delegate51 xGetAuxdata;
			public delegate48 xPhraseFirst;
			public delegate52 xPhraseNext;
			public delegate50 xPhraseFirstColumn;
			public delegate53 xPhraseNextColumn;
		}
		public unsafe struct Fts5PhraseIter
		{
			public byte* a;
			public byte* b;
		}
		public unsafe struct Fts5Tokenizer
		{
		}
		public unsafe class FuncDef
		{
			public sbyte nArg;
			public uint funcFlags;
			public void* pUserData;
			public FuncDef pNext;
			public delegate68 xSFunc;
			public delegate69 xFinalize;
			public delegate69 xValue;
			public delegate68 xInverse;
			public sbyte* zName;
			[StructLayout(LayoutKind.Explicit)]
			public unsafe struct unnamed1
			{
				[FieldOffset(0)]
				public FuncDef pHash;
				[FieldOffset(0)]
				public FuncDestructor pDestructor;
			}

			public unnamed1 u;
		}
		public unsafe class FuncDefHash
		{
			public FuncDef[] a = new FuncDef[23];
			public FuncDefHash()
			{
				for (var i = 0; i < 23; ++i)
				{
					a[i] = new FuncDef();
				}
			}
		}
		public unsafe class FuncDestructor
		{
			public int nRef;
			public delegate17 xDestroy;
			public void* pUserData;
		}
		public unsafe class GroupConcatCtx
		{
			public sqlite3_str str;
			public int nAccum;
			public int nFirstSepLength;
			public int* pnSepLengths;
		}
		public unsafe struct Hash
		{
			public uint htsize;
			public uint count;
			public HashElem* first;
			public unsafe struct _ht
			{
				public uint count;
				public HashElem* chain;
			}

			public _ht* ht;
		}
		public unsafe struct HashElem
		{
			public HashElem* next;
			public HashElem* prev;
			public void* data;
			public sbyte* pKey;
		}
		public unsafe class HiddenIndexInfo
		{
			public WhereClause pWC;
			public Parse pParse;
			public int eDistinct;
			public uint mIn;
			public uint mHandleIn;
			public sqlite3_value[] aRhs = new sqlite3_value[1];
			public HiddenIndexInfo()
			{
				for (var i = 0; i < 1; ++i)
				{
					aRhs[i] = new sqlite3_value();
				}
			}
		}
		public unsafe struct IdList
		{
			public unsafe struct IdList_item
			{
				public sbyte* zName;
				public int idx;
			}

			public IdList_item* a;
			public int nId;
		}
		public unsafe class IdxCover
		{
			public Index pIdx;
			public int iCur;
		}
		public unsafe class IdxExprTrans
		{
			public Expr pIdxExpr;
			public int iTabCur;
			public int iIdxCur;
			public int iIdxCol;
			public int iTabCol;
			public WhereInfo pWInfo;
			public sqlite3 db;
		}
		public unsafe class Incrblob
		{
			public int nByte;
			public int iOffset;
			public ushort iCol;
			public BtCursor pCsr;
			public sqlite3_stmt* pStmt;
			public sqlite3 db;
			public sbyte* zDb;
			public Table pTab;
		}
		public unsafe class IncrMerger
		{
			public SortSubtask pTask;
			public MergeEngine pMerger;
			public long iStartOff;
			public int mxSz;
			public int bEof;
			public int bUseThread;
			public SorterFile[] aFile = new SorterFile[2];
			public IncrMerger()
			{
				for (var i = 0; i < 2; ++i)
				{
					aFile[i] = new SorterFile();
				}
			}
		}
		public unsafe class Index
		{
			public sbyte* zName;
			public short* aiColumn;
			public short* aiRowLogEst;
			public Table pTable;
			public sbyte* zColAff;
			public Index pNext;
			public Schema pSchema;
			public byte* aSortOrder;
			public sbyte** azColl;
			public Expr pPartIdxWhere;
			public ExprList aColExpr;
			public uint tnum;
			public short szIdxRow;
			public ushort nKeyCol;
			public ushort nColumn;
			public byte onError;
			public uint idxType;
			public uint bUnordered;
			public uint uniqNotNull;
			public uint isResized;
			public uint isCovering;
			public uint noSkipScan;
			public uint hasStat1;
			public uint bNoQuery;
			public uint bAscKeyBug;
			public uint bHasVCol;
			public ulong colNotIdxed;
		}
		public unsafe struct IndexIterator
		{
			public int eType;
			public int i;
			[StructLayout(LayoutKind.Explicit)]
			public unsafe struct unnamed1
			{
				public unsafe struct unnamed2
				{
					public Index pIdx;
				}

				[FieldOffset(0)]
				public unnamed2 lx;
				public unsafe struct unnamed3
				{
					public int nIdx;
					public IndexListTerm aIdx;
				}

				[FieldOffset(0)]
				public unnamed3 ax;
			}

			public unnamed1 u;
		}
		public unsafe class IndexListTerm
		{
			public Index p;
			public int ix;
		}
		public unsafe struct IndexSample
		{
			public void* p;
			public int n;
			public uint* anEq;
			public uint* anLt;
			public uint* anDLt;
		}
		public unsafe class InitData
		{
			public sqlite3 db;
			public sbyte** pzErrMsg;
			public int iDb;
			public int rc;
			public uint mInitFlags;
			public uint nInitRow;
			public uint mxPage;
		}
		public unsafe class IntegrityCk
		{
			public BtShared pBt;
			public Pager pPager;
			public byte* aPgRef;
			public uint nPage;
			public int mxErr;
			public int nErr;
			public int bOomFault;
			public sbyte* zPfx;
			public uint v1;
			public int v2;
			public sqlite3_str errMsg;
			public uint* heap;
			public sqlite3 db;
		}
		public unsafe class JsonEachCursor
		{
			public sqlite3_vtab_cursor _base_;
			public uint iRowid;
			public uint iBegin;
			public uint i;
			public uint iEnd;
			public byte eType;
			public byte bRecursive;
			public sbyte* zJson;
			public sbyte* zRoot;
			public JsonParse sParse;
		}
		public unsafe struct JsonNode
		{
			public byte eType;
			public byte jnFlags;
			public byte eU;
			public uint n;
			[StructLayout(LayoutKind.Explicit)]
			public unsafe struct unnamed1
			{
				[FieldOffset(0)]
				public sbyte* zJContent;
				[FieldOffset(0)]
				public uint iAppend;
				[FieldOffset(0)]
				public uint iKey;
				[FieldOffset(0)]
				public uint iReplace;
				[FieldOffset(0)]
				public JsonNode* pPatch;
			}

			public unnamed1 u;
		}
		public unsafe struct JsonParse
		{
			public uint nNode;
			public uint nAlloc;
			public JsonNode* aNode;
			public sbyte* zJson;
			public uint* aUp;
			public byte oom;
			public byte nErr;
			public ushort iDepth;
			public int nJson;
			public uint iHold;
		}
		public unsafe class JsonString
		{
			public sqlite3_context pCtx;
			public sbyte* zBuf;
			public ulong nAlloc;
			public ulong nUsed;
			public byte bStatic;
			public byte bErr;
			public UnsafeArray1D<sbyte> zSpaceArray = new UnsafeArray1D<sbyte>(100);
			public sbyte* zSpace;
			public JsonString()
			{
				zSpace = (sbyte*)zSpaceArray;
			}
		}
		public unsafe struct KeyClass
		{
		}
		public unsafe class KeyInfo
		{
			public uint nRef;
			public byte enc;
			public ushort nKeyField;
			public ushort nAllField;
			public sqlite3 db;
			public byte* aSortFlags;
			public CollSeq[] aColl = new CollSeq[1];
			public KeyInfo()
			{
				for (var i = 0; i < 1; ++i)
				{
					aColl[i] = new CollSeq();
				}
			}
		}
		public unsafe class LastValueCtx
		{
			public sqlite3_value pVal;
			public int nVal;
		}
		public unsafe struct Lookaside
		{
			public uint bDisable;
			public ushort sz;
			public ushort szTrue;
			public byte bMalloced;
			public uint nSlot;
			public fixed uint anStat[3];
			public LookasideSlot* pInit;
			public LookasideSlot* pFree;
			public LookasideSlot* pSmallInit;
			public LookasideSlot* pSmallFree;
			public void* pMiddle;
			public void* pStart;
			public void* pEnd;
		}
		public unsafe struct LookasideSlot
		{
			public LookasideSlot* pNext;
		}
		public unsafe struct Mem0Global
		{
			public sqlite3_mutex* mutex;
			public long alarmThreshold;
			public long hardLimit;
			public int nearlyFull;
		}
		public unsafe class MemFile
		{
			public sqlite3_file _base_;
			public MemStore* pStore;
			public int eLock;
		}
		public unsafe struct MemFS
		{
			public int nMemStore;
			public MemStore** apMemStore;
		}
		public unsafe class MemJournal
		{
			public sqlite3_io_methods pMethod;
			public int nChunkSize;
			public int nSpill;
			public FileChunk* pFirst;
			public FilePoint endpoint;
			public FilePoint readpoint;
			public int flags;
			public sqlite3_vfs pVfs;
			public sbyte* zJournal;
		}
		public unsafe class MemPage
		{
			public byte isInit;
			public byte intKey;
			public byte intKeyLeaf;
			public uint pgno;
			public byte leaf;
			public byte hdrOffset;
			public byte childPtrSize;
			public byte max1bytePayload;
			public byte nOverflow;
			public ushort maxLocal;
			public ushort minLocal;
			public ushort cellOffset;
			public int nFree;
			public ushort nCell;
			public ushort maskPage;
			public UnsafeArray1D<ushort> aiOvflArray = new UnsafeArray1D<ushort>(4);
			public ushort* aiOvfl;
			public UnsafeArray1D<byte> apOvflArray = new UnsafeArray1D<byte>(4);
			public byte** apOvfl;
			public BtShared pBt;
			public byte* aData;
			public byte* aDataEnd;
			public byte* aCellIdx;
			public byte* aDataOfst;
			public PgHdr pDbPage;
			public delegate78 xCellSize;
			public delegate79 xParseCell;
			public MemPage()
			{
				aiOvfl = (ushort*)aiOvflArray;
				apOvfl = (byte**)apOvflArray;
			}
		}
		public unsafe struct MemStore
		{
			public long sz;
			public long szAlloc;
			public long szMax;
			public byte* aData;
			public sqlite3_mutex* pMutex;
			public int nMmap;
			public uint mFlags;
			public int nRdLock;
			public int nWrLock;
			public int nRef;
			public sbyte* zFName;
		}
		public unsafe class MergeEngine
		{
			public int nTree;
			public SortSubtask pTask;
			public int* aTree;
			public PmaReader aReadr;
		}
		public unsafe class Module
		{
			public sqlite3_module pModule;
			public sbyte* zName;
			public int nRefModule;
			public void* pAux;
			public delegate17 xDestroy;
			public Table pEpoTab;
		}
		public unsafe class NameContext
		{
			public Parse pParse;
			public SrcList pSrcList;
			[StructLayout(LayoutKind.Explicit)]
			public unsafe struct unnamed1
			{
				[FieldOffset(0)]
				public ExprList pEList;
				[FieldOffset(0)]
				public AggInfo pAggInfo;
				[FieldOffset(0)]
				public Upsert pUpsert;
				[FieldOffset(0)]
				public int iBaseReg;
			}

			public unnamed1 uNC;
			public NameContext pNext;
			public int nRef;
			public int nNcErr;
			public int ncFlags;
			public Select pWinSelect;
		}
		public unsafe class NthValueCtx
		{
			public long nStep;
			public sqlite3_value pValue;
		}
		public unsafe struct NtileCtx
		{
			public long nTotal;
			public long nParam;
			public long iRow;
		}
		public unsafe class Pager
		{
			public sqlite3_vfs pVfs;
			public byte exclusiveMode;
			public byte journalMode;
			public byte useJournal;
			public byte noSync;
			public byte fullSync;
			public byte extraSync;
			public byte syncFlags;
			public byte walSyncFlags;
			public byte tempFile;
			public byte noLock;
			public byte readOnly;
			public byte memDb;
			public byte memVfs;
			public byte eState;
			public byte eLock;
			public byte changeCountDone;
			public byte setSuper;
			public byte doNotSpill;
			public byte subjInMemory;
			public byte bUseFetch;
			public byte hasHeldSharedLock;
			public uint dbSize;
			public uint dbOrigSize;
			public uint dbFileSize;
			public uint dbHintSize;
			public int errCode;
			public int nRec;
			public uint cksumInit;
			public uint nSubRec;
			public Bitvec* pInJournal;
			public sqlite3_file fd;
			public sqlite3_file jfd;
			public sqlite3_file sjfd;
			public long journalOff;
			public long journalHdr;
			public sqlite3_backup pBackup;
			public PagerSavepoint* aSavepoint;
			public int nSavepoint;
			public uint iDataVersion;
			public UnsafeArray1D<sbyte> dbFileVersArray = new UnsafeArray1D<sbyte>(16);
			public sbyte* dbFileVers;
			public int nMmapOut;
			public long szMmap;
			public PgHdr pMmapFreelist;
			public ushort nExtra;
			public short nReserve;
			public uint vfsFlags;
			public uint sectorSize;
			public uint mxPgno;
			public long pageSize;
			public long journalSizeLimit;
			public sbyte* zFilename;
			public sbyte* zJournal;
			public delegate19 xBusyHandler;
			public void* pBusyHandlerArg;
			public UnsafeArray1D<int> aStatArray = new UnsafeArray1D<int>(4);
			public int* aStat;
			public delegate76 xReiniter;
			public delegate77 xGet;
			public sbyte* pTmpSpace;
			public PCache pPCache;
			public Wal pWal;
			public sbyte* zWal;
			public Pager()
			{
				dbFileVers = (sbyte*)dbFileVersArray;
				aStat = (int*)aStatArray;
			}
		}
		public unsafe struct PagerSavepoint
		{
			public long iOffset;
			public long iHdrOffset;
			public Bitvec* pInSavepoint;
			public uint nOrig;
			public uint iSubRec;
			public int bTruncateOnRelease;
			public fixed uint aWalData[4];
		}
		public unsafe class Parse
		{
			public sqlite3 db;
			public sbyte* zErrMsg;
			public Vdbe pVdbe;
			public int rc;
			public byte colNamesSet;
			public byte checkSchema;
			public byte nested;
			public byte nTempReg;
			public byte isMultiWrite;
			public byte mayAbort;
			public byte hasCompound;
			public byte okConstFactor;
			public byte disableLookaside;
			public byte disableVtab;
			public int nRangeReg;
			public int iRangeReg;
			public int nErr;
			public int nTab;
			public int nMem;
			public int szOpAlloc;
			public int iSelfTab;
			public int nLabel;
			public int nLabelAlloc;
			public int* aLabel;
			public ExprList pConstExpr;
			public Token constraintName;
			public uint writeMask;
			public uint cookieMask;
			public int regRowid;
			public int regRoot;
			public int nMaxArg;
			public int nSelect;
			public int nTableLock;
			public TableLock* aTableLock;
			public AutoincInfo pAinc;
			public Parse pToplevel;
			public Table pTriggerTab;
			public TriggerPrg pTriggerPrg;
			public ParseCleanup pCleanup;
			[StructLayout(LayoutKind.Explicit)]
			public unsafe struct unnamed1
			{
				[FieldOffset(0)]
				public int addrCrTab;
				[FieldOffset(0)]
				public Returning pReturning;
			}

			public unnamed1 u1;
			public uint nQueryLoop;
			public uint oldmask;
			public uint newmask;
			public byte eTriggerOp;
			public byte bReturning;
			public byte eOrconf;
			public byte disableTriggers;
			public UnsafeArray1D<int> aTempRegArray = new UnsafeArray1D<int>(8);
			public int* aTempReg;
			public Parse pOuterParse;
			public Token sNameToken;
			public Token sLastToken;
			public short nVar;
			public byte iPkSortOrder;
			public byte explain;
			public byte eParseMode;
			public int nVtabLock;
			public int nHeight;
			public int addrExplain;
			public int* pVList;
			public Vdbe pReprepare;
			public sbyte* zTail;
			public Table pNewTable;
			public Index pNewIndex;
			public Trigger pNewTrigger;
			public sbyte* zAuthContext;
			public Token sArg;
			public Table apVtabLock;
			public With pWith;
			public RenameToken* pRename;
			public Parse()
			{
				aTempReg = (int*)aTempRegArray;
			}
		}
		public unsafe class ParseCleanup
		{
			public ParseCleanup pNext;
			public void* pPtr;
			public delegate71 xCleanup;
		}
		public unsafe class PCache
		{
			public PgHdr pDirty;
			public PgHdr pDirtyTail;
			public PgHdr pSynced;
			public int nRefSum;
			public int szCache;
			public int szSpill;
			public int szPage;
			public int szExtra;
			public byte bPurgeable;
			public byte eCreate;
			public delegate59 xStress;
			public void* pStress;
			public sqlite3_pcache* pCache;
		}
		public unsafe struct PCache1
		{
			public PGroup* pGroup;
			public uint* pnPurgeable;
			public int szPage;
			public int szExtra;
			public int szAlloc;
			public int bPurgeable;
			public uint nMin;
			public uint nMax;
			public uint n90pct;
			public uint iMaxKey;
			public uint nPurgeableDummy;
			public uint nRecyclable;
			public uint nPage;
			public uint nHash;
			public PgHdr1** apHash;
			public PgHdr1* pFree;
			public void* pBulk;
		}
		public unsafe struct PCacheGlobal
		{
			public PGroup grp;
			public int isInit;
			public int separateCache;
			public int nInitPage;
			public int szSlot;
			public int nSlot;
			public int nReserve;
			public void* pStart;
			public void* pEnd;
			public sqlite3_mutex* mutex;
			public PgFreeslot* pFree;
			public int nFreeSlot;
			public int bUnderPressure;
		}
		public unsafe struct PgFreeslot
		{
			public PgFreeslot* pNext;
		}
		public unsafe class PgHdr
		{
			public sqlite3_pcache_page* pPage;
			public void* pData;
			public void* pExtra;
			public PCache pCache;
			public PgHdr pDirty;
			public Pager pPager;
			public uint pgno;
			public ushort flags;
			public short nRef;
			public PgHdr pDirtyNext;
			public PgHdr pDirtyPrev;
		}
		public unsafe struct PgHdr1
		{
			public sqlite3_pcache_page page;
			public uint iKey;
			public ushort isBulkLocal;
			public ushort isAnchor;
			public PgHdr1* pNext;
			public PCache1* pCache;
			public PgHdr1* pLruNext;
			public PgHdr1* pLruPrev;
		}
		public unsafe struct PGroup
		{
			public sqlite3_mutex* mutex;
			public uint nMaxPage;
			public uint nMinPage;
			public uint mxPinned;
			public uint nPurgeable;
			public PgHdr1 lru;
		}
		public unsafe class PmaReader
		{
			public long iReadOff;
			public long iEof;
			public int nAlloc;
			public int nKey;
			public sqlite3_file pFd;
			public byte* aAlloc;
			public byte* aKey;
			public byte* aBuffer;
			public int nBuffer;
			public byte* aMap;
			public IncrMerger pIncr;
		}
		public unsafe class PmaWriter
		{
			public int eFWErr;
			public byte* aBuffer;
			public int nBuffer;
			public int iBufStart;
			public int iBufEnd;
			public long iWriteOff;
			public sqlite3_file pFd;
		}
		public unsafe struct PragmaName
		{
			public sbyte* zName;
			public byte ePragTyp;
			public byte mPragFlg;
			public byte iPragCName;
			public byte nPragCName;
			public ulong iArg;
		}
		public unsafe class PragmaVtab
		{
			public sqlite3_vtab _base_;
			public sqlite3 db;
			public PragmaName* pName;
			public byte nHidden;
			public byte iHidden;
		}
		public unsafe class PragmaVtabCursor
		{
			public sqlite3_vtab_cursor _base_;
			public sqlite3_stmt* pPragma;
			public long iRowid;
			public UnsafeArray1D<sbyte> azArgArray = new UnsafeArray1D<sbyte>(2);
			public sbyte** azArg;
			public PragmaVtabCursor()
			{
				azArg = (sbyte**)azArgArray;
			}
		}
		public unsafe class PreUpdate
		{
			public Vdbe v;
			public VdbeCursor pCsr;
			public int op;
			public byte* aRecord;
			public KeyInfo keyinfo;
			public UnpackedRecord pUnpacked;
			public UnpackedRecord pNewUnpacked;
			public int iNewReg;
			public int iBlobWrite;
			public long iKey1;
			public long iKey2;
			public sqlite3_value aNew;
			public Table pTab;
			public Index pPk;
		}
		public unsafe class PrintfArguments
		{
			public int nArg;
			public int nUsed;
			public sqlite3_value apArg;
		}
		public unsafe class RefSrcList
		{
			public sqlite3 db;
			public SrcList pRef;
			public long nExclude;
			public int* aiExclude;
		}
		public unsafe class RenameCtx
		{
			public RenameToken* pList;
			public int nList;
			public int iCol;
			public Table pTab;
			public sbyte* zOld;
		}
		public unsafe struct RenameToken
		{
			public void* p;
			public Token t;
			public RenameToken* pNext;
		}
		public unsafe class Returning
		{
			public Parse pParse;
			public ExprList pReturnEL;
			public Trigger retTrig;
			public TriggerStep retTStep;
			public int iRetCur;
			public int nRetCol;
			public int iRetReg;
		}
		public unsafe struct ReusableSpace
		{
			public byte* pSpace;
			public long nFree;
			public long nNeeded;
		}
		public unsafe struct RowLoadInfo
		{
			public int regResult;
			public byte ecelFlags;
		}
		public unsafe class RowSet
		{
			public RowSetChunk pChunk;
			public sqlite3 db;
			public RowSetEntry* pEntry;
			public RowSetEntry* pLast;
			public RowSetEntry* pFresh;
			public RowSetEntry* pForest;
			public ushort nFresh;
			public ushort rsFlags;
			public int iBatch;
		}
		public unsafe class RowSetChunk
		{
			public RowSetChunk pNextChunk;
			public UnsafeArray1D<RowSetEntry> aEntryArray = new UnsafeArray1D<RowSetEntry>(42);
			public RowSetEntry* aEntry;
			public RowSetChunk()
			{
				aEntry = (RowSetEntry*)aEntryArray;
			}
		}
		public unsafe struct RowSetEntry
		{
			public long v;
			public RowSetEntry* pRight;
			public RowSetEntry* pLeft;
		}
		public unsafe struct Savepoint
		{
			public sbyte* zName;
			public long nDeferredCons;
			public long nDeferredImmCons;
			public Savepoint* pNext;
		}
		public unsafe struct ScanStatus
		{
			public int addrExplain;
			public int addrLoop;
			public int addrVisit;
			public int iSelectID;
			public short nEst;
			public sbyte* zName;
		}
		public unsafe class Schema
		{
			public int schema_cookie;
			public int iGeneration;
			public Hash tblHash;
			public Hash idxHash;
			public Hash trigHash;
			public Hash fkeyHash;
			public Table pSeqTab;
			public byte file_format;
			public byte enc;
			public ushort schemaFlags;
			public int cache_size;
		}
		public unsafe class Select
		{
			public byte op;
			public short nSelectRow;
			public uint selFlags;
			public int iLimit;
			public int iOffset;
			public uint selId;
			public UnsafeArray1D<int> addrOpenEphmArray = new UnsafeArray1D<int>(2);
			public int* addrOpenEphm;
			public ExprList pEList;
			public SrcList pSrc;
			public Expr pWhere;
			public ExprList pGroupBy;
			public Expr pHaving;
			public ExprList pOrderBy;
			public Select pPrior;
			public Select pNext;
			public Expr pLimit;
			public With pWith;
			public Window pWin;
			public Window pWinDefn;
			public Select()
			{
				addrOpenEphm = (int*)addrOpenEphmArray;
			}
		}
		public unsafe class SelectDest
		{
			public byte eDest;
			public int iSDParm;
			public int iSDParm2;
			public int iSdst;
			public int nSdst;
			public sbyte* zAffSdst;
			public ExprList pOrderBy;
		}
		public unsafe class SortCtx
		{
			public ExprList pOrderBy;
			public int nOBSat;
			public int iECursor;
			public int regReturn;
			public int labelBkOut;
			public int addrSortIndex;
			public int labelDone;
			public int labelOBLopt;
			public byte sortFlags;
			public RowLoadInfo* pDeferredRowLoad;
		}
		public unsafe class SorterFile
		{
			public sqlite3_file pFd;
			public long iEof;
		}
		public unsafe struct SorterList
		{
			public SorterRecord* pList;
			public byte* aMemory;
			public int szPMA;
		}
		public unsafe struct SorterRecord
		{
			public int nVal;
			[StructLayout(LayoutKind.Explicit)]
			public unsafe struct unnamed1
			{
				[FieldOffset(0)]
				public SorterRecord* pNext;
				[FieldOffset(0)]
				public int iNext;
			}

			public unnamed1 u;
		}
		public unsafe class SortSubtask
		{
			public SQLiteThread pThread;
			public int bDone;
			public VdbeSorter pSorter;
			public UnpackedRecord pUnpacked;
			public SorterList list;
			public int nPMA;
			public delegate80 xCompare;
			public SorterFile file;
			public SorterFile file2;
		}
		public unsafe class sqlite3
		{
			public sqlite3_vfs pVfs;
			public Vdbe pVdbe;
			public CollSeq pDfltColl;
			public sqlite3_mutex* mutex;
			public Db aDb;
			public int nDb;
			public uint mDbFlags;
			public ulong flags;
			public long lastRowid;
			public long szMmap;
			public uint nSchemaLock;
			public uint openFlags;
			public int errCode;
			public int errByteOffset;
			public int errMask;
			public int iSysErrno;
			public uint dbOptFlags;
			public byte enc;
			public byte autoCommit;
			public byte temp_store;
			public byte mallocFailed;
			public byte bBenignMalloc;
			public byte dfltLockMode;
			public sbyte nextAutovac;
			public byte suppressErr;
			public byte vtabOnConflict;
			public byte isTransactionSavepoint;
			public byte mTrace;
			public byte noSharedCache;
			public byte nSqlExec;
			public byte eOpenState;
			public int nextPagesize;
			public long nChange;
			public long nTotalChange;
			public UnsafeArray1D<int> aLimitArray = new UnsafeArray1D<int>(12);
			public int* aLimit;
			public int nMaxSorterMmap;
			public unsafe struct sqlite3InitInfo
			{
				public uint newTnum;
				public byte iDb;
				public byte busy;
				public uint orphanTrigger;
				public uint imposterTable;
				public uint reopenMemdb;
				public sbyte** azInit;
			}

			public sqlite3InitInfo init;
			public int nVdbeActive;
			public int nVdbeRead;
			public int nVdbeWrite;
			public int nVdbeExec;
			public int nVDestroy;
			public int nExtension;
			public void** aExtension;
			[StructLayout(LayoutKind.Explicit)]
			public unsafe struct unnamed2
			{
				[FieldOffset(0)]
				public delegate61 xLegacy;
				[FieldOffset(0)]
				public delegate62 xV2;
			}

			public unnamed2 trace;
			public void* pTraceArg;
			public delegate63 xProfile;
			public void* pProfileArg;
			public void* pCommitArg;
			public delegate19 xCommitCallback;
			public void* pRollbackArg;
			public delegate17 xRollbackCallback;
			public void* pUpdateArg;
			public delegate64 xUpdateCallback;
			public void* pAutovacPagesArg;
			public delegate17 xAutovacDestr;
			public delegate65 xAutovacPages;
			public Parse pParse;
			public delegate54 xWalCallback;
			public void* pWalArg;
			public delegate66 xCollNeeded;
			public delegate66 xCollNeeded16;
			public void* pCollNeededArg;
			public sqlite3_value pErr;
			[StructLayout(LayoutKind.Explicit)]
			public unsafe struct unnamed3
			{
				[FieldOffset(0)]
				public int isInterrupted;
				[FieldOffset(0)]
				public double notUsed1;
			}

			public unnamed3 u1;
			public Lookaside lookaside;
			public delegate67 xAuth;
			public void* pAuthArg;
			public delegate19 xProgress;
			public void* pProgressArg;
			public uint nProgressOps;
			public int nVTrans;
			public Hash aModule;
			public VtabCtx pVtabCtx;
			public VTable aVTrans;
			public VTable pDisconnect;
			public Hash aFunc;
			public Hash aCollSeq;
			public BusyHandler busyHandler;
			public Db[] aDbStatic = new Db[2];
			public Savepoint* pSavepoint;
			public int nAnalysisLimit;
			public int busyTimeout;
			public int nSavepoint;
			public int nStatement;
			public long nDeferredCons;
			public long nDeferredImmCons;
			public int* pnBytesFreed;
			public sqlite3()
			{
				aLimit = (int*)aLimitArray;
				for (var i = 0; i < 2; ++i)
				{
					aDbStatic[i] = new Db();
				}
			}
		}
		public unsafe class sqlite3_api_routines
		{
			public delegate81 aggregate_context;
			public delegate82 aggregate_count;
			public delegate83 bind_blob;
			public delegate84 bind_double;
			public delegate84 bind_int;
			public delegate84 bind_int64;
			public delegate85 bind_null;
			public delegate86 bind_parameter_count;
			public delegate85 bind_parameter_index;
			public delegate87 bind_parameter_name;
			public delegate83 bind_text;
			public delegate83 bind_text16;
			public delegate84 bind_value;
			public delegate88 busy_handler;
			public delegate89 busy_timeout;
			public delegate90 changes;
			public delegate90 close;
			public delegate88 collation_needed;
			public delegate88 collation_needed16;
			public delegate91 column_blob;
			public delegate85 column_bytes;
			public delegate85 column_bytes16;
			public delegate86 column_count;
			public delegate87 column_database_name;
			public delegate91 column_database_name16;
			public delegate87 column_decltype;
			public delegate91 column_decltype16;
			public delegate92 column_double;
			public delegate85 column_int;
			public delegate93 column_int64;
			public delegate87 column_name;
			public delegate91 column_name16;
			public delegate87 column_origin_name;
			public delegate91 column_origin_name16;
			public delegate87 column_table_name;
			public delegate91 column_table_name16;
			public delegate94 column_text;
			public delegate91 column_text16;
			public delegate85 column_type;
			public delegate95 column_value;
			public delegate96 commit_hook;
			public delegate30 complete;
			public delegate19 complete16;
			public delegate97 create_collation;
			public delegate97 create_collation16;
			public delegate98 create_function;
			public delegate98 create_function16;
			public delegate99 create_module;
			public delegate86 data_count;
			public delegate100 db_handle;
			public delegate89 declare_vtab;
			public delegate20 enable_shared_cache;
			public delegate90 errcode;
			public delegate101 errmsg;
			public delegate102 errmsg16;
			public delegate97 exec;
			public delegate86 expired;
			public delegate86 finalize;
			public delegate17 free;
			public delegate103 free_table;
			public delegate90 get_autocommit;
			public delegate81 get_auxdata;
			public delegate21 get_table;
			public delegate31 global_recover;
			public delegate104 interruptx;
			public delegate105 last_insert_rowid;
			public delegate106 libversion;
			public delegate31 libversion_number;
			public delegate16 malloc;
			public delegate107 mprintf;
			public delegate108 open;
			public delegate59 open16;
			public delegate97 prepare;
			public delegate97 prepare16;
			public delegate96 profile;
			public delegate109 progress_handler;
			public delegate18 realloc;
			public delegate86 reset;
			public delegate110 result_blob;
			public delegate111 result_double;
			public delegate68 result_error;
			public delegate68 result_error16;
			public delegate111 result_int;
			public delegate111 result_int64;
			public delegate69 result_null;
			public delegate110 result_text;
			public delegate110 result_text16;
			public delegate110 result_text16be;
			public delegate110 result_text16le;
			public delegate111 result_value;
			public delegate96 rollback_hook;
			public delegate88 set_authorizer;
			public delegate110 set_auxdata;
			public delegate112 xsnprintf;
			public delegate86 step;
			public delegate113 table_column_metadata;
			public delegate74 thread_cleanup;
			public delegate90 total_changes;
			public delegate96 trace;
			public delegate85 transfer_bindings;
			public delegate96 update_hook;
			public delegate114 user_data;
			public delegate115 value_blob;
			public delegate116 value_bytes;
			public delegate116 value_bytes16;
			public delegate117 value_double;
			public delegate116 value_int;
			public delegate118 value_int64;
			public delegate116 value_numeric_type;
			public delegate119 value_text;
			public delegate115 value_text16;
			public delegate115 value_text16be;
			public delegate115 value_text16le;
			public delegate116 value_type;
			public delegate120 vmprintf;
			public delegate88 overload_function;
			public delegate97 prepare_v2;
			public delegate97 prepare16_v2;
			public delegate86 clear_bindings;
			public delegate97 create_module_v2;
			public delegate84 bind_zeroblob;
			public delegate121 blob_bytes;
			public delegate121 blob_close;
			public delegate122 blob_open;
			public delegate123 blob_read;
			public delegate123 blob_write;
			public delegate21 create_collation_v2;
			public delegate99 file_control;
			public delegate124 memory_highwater;
			public delegate125 memory_used;
			public delegate32 mutex_alloc;
			public delegate33 mutex_enter;
			public delegate33 mutex_free;
			public delegate33 mutex_leave;
			public delegate34 mutex_try;
			public delegate126 open_v2;
			public delegate20 release_memory;
			public delegate69 result_error_nomem;
			public delegate69 result_error_toobig;
			public delegate20 sleep;
			public delegate127 soft_heap_limit;
			public delegate128 vfs_find;
			public delegate13 vfs_register;
			public delegate129 vfs_unregister;
			public delegate31 xthreadsafe;
			public delegate111 result_zeroblob;
			public delegate111 result_error_code;
			public delegate20 test_control;
			public delegate130 randomness;
			public delegate131 context_db_handle;
			public delegate89 extended_result_codes;
			public delegate88 limit;
			public delegate132 next_stmt;
			public delegate133 sql;
			public delegate134 status;
			public delegate135 backup_finish;
			public delegate136 backup_init;
			public delegate135 backup_pagecount;
			public delegate135 backup_remaining;
			public delegate137 backup_step;
			public delegate138 compileoption_get;
			public delegate30 compileoption_used;
			public delegate113 create_function_v2;
			public delegate89 db_config;
			public delegate139 db_mutex;
			public delegate97 db_status;
			public delegate90 extended_errcode;
			public delegate130 log;
			public delegate140 soft_heap_limit64;
			public delegate106 sourceid;
			public delegate84 stmt_status;
			public delegate141 strnicmp;
			public delegate88 unlock_notify;
			public delegate89 wal_autocheckpoint;
			public delegate89 wal_checkpoint;
			public delegate96 wal_hook;
			public delegate142 blob_reopen;
			public delegate89 vtab_config;
			public delegate90 vtab_on_conflict;
			public delegate90 close_v2;
			public delegate143 db_filename;
			public delegate89 db_readonly;
			public delegate90 db_release_memory;
			public delegate138 errstr;
			public delegate86 stmt_busy;
			public delegate86 stmt_readonly;
			public delegate108 stricmp;
			public delegate141 uri_boolean;
			public delegate144 uri_int64;
			public delegate120 uri_parameter;
			public delegate145 xvsnprintf;
			public delegate97 wal_checkpoint_v2;
			public delegate146 auto_extension;
			public delegate83 bind_blob64;
			public delegate147 bind_text64;
			public delegate146 cancel_auto_extension;
			public delegate99 load_extension;
			public delegate148 malloc64;
			public delegate149 msize;
			public delegate18 realloc64;
			public delegate74 reset_auto_extension;
			public delegate110 result_blob64;
			public delegate150 result_text64;
			public delegate108 strglob;
			public delegate151 value_dup;
			public delegate152 value_free;
			public delegate153 result_zeroblob64;
			public delegate84 bind_zeroblob64;
			public delegate154 value_subtype;
			public delegate111 result_subtype;
			public delegate134 status64;
			public delegate141 strlike;
			public delegate90 db_cacheflush;
			public delegate90 system_errno;
			public delegate99 trace_v2;
			public delegate133 expanded_sql;
			public delegate71 set_last_insert_rowid;
			public delegate21 prepare_v3;
			public delegate21 prepare16_v3;
			public delegate83 bind_pointer;
			public delegate110 result_pointer;
			public delegate155 value_pointer;
			public delegate82 vtab_nochange;
			public delegate116 value_nochange;
			public delegate156 vtab_collation;
			public delegate31 keyword_count;
			public delegate157 keyword_name;
			public delegate108 keyword_check;
			public delegate158 str_new;
			public delegate159 str_finish;
			public delegate160 str_appendf;
			public delegate161 str_vappendf;
			public delegate161 str_append;
			public delegate160 str_appendall;
			public delegate161 str_appendchar;
			public delegate162 str_reset;
			public delegate163 str_errcode;
			public delegate163 str_length;
			public delegate159 str_value;
			public delegate164 create_window_function;
			public delegate133 normalized_sql;
			public delegate86 stmt_isexplain;
			public delegate116 value_frombind;
			public delegate89 drop_modules;
			public delegate140 hard_heap_limit64;
			public delegate120 uri_key;
			public delegate107 filename_database;
			public delegate107 filename_journal;
			public delegate107 filename_wal;
			public delegate165 create_filename;
			public delegate166 free_filename;
			public delegate167 database_file_object;
			public delegate89 txn_state;
			public delegate105 changes64;
			public delegate105 total_changes64;
			public delegate99 autovacuum_pages;
			public delegate90 error_offset;
			public delegate168 vtab_rhs_value;
			public delegate169 vtab_distinct;
			public delegate168 vtab_in;
			public delegate170 vtab_in_first;
			public delegate170 vtab_in_next;
		}
		public unsafe class sqlite3_backup
		{
			public sqlite3 pDestDb;
			public Btree pDest;
			public uint iDestSchema;
			public int bDestLocked;
			public uint iNext;
			public sqlite3 pSrcDb;
			public Btree pSrc;
			public int rc;
			public uint nRemaining;
			public uint nPagecount;
			public int isAttached;
			public sqlite3_backup pNext;
		}
		public unsafe struct sqlite3_blob
		{
		}
		public unsafe class sqlite3_context
		{
			public sqlite3_value pOut;
			public FuncDef pFunc;
			public sqlite3_value pMem;
			public Vdbe pVdbe;
			public int iOp;
			public int isError;
			public byte skipFlag;
			public byte argc;
			public sqlite3_value[] argv = new sqlite3_value[1];
			public sqlite3_context()
			{
				for (var i = 0; i < 1; ++i)
				{
					argv[i] = new sqlite3_value();
				}
			}
		}
		public unsafe class sqlite3_file
		{
			public sqlite3_io_methods pMethods;
		}
		public unsafe struct sqlite3_index_info
		{
			public int nConstraint;
			public unsafe struct sqlite3_index_constraint
			{
				public int iColumn;
				public byte op;
				public byte usable;
				public int iTermOffset;
			}

			public sqlite3_index_constraint* aConstraint;
			public int nOrderBy;
			public unsafe struct sqlite3_index_orderby
			{
				public int iColumn;
				public byte desc;
			}

			public sqlite3_index_orderby* aOrderBy;
			public unsafe struct sqlite3_index_constraint_usage
			{
				public int argvIndex;
				public byte omit;
			}

			public sqlite3_index_constraint_usage* aConstraintUsage;
			public int idxNum;
			public sbyte* idxStr;
			public int needToFreeIdxStr;
			public int orderByConsumed;
			public double estimatedCost;
			public long estimatedRows;
			public int idxFlags;
			public ulong colUsed;
		}
		public unsafe class sqlite3_io_methods
		{
			public int iVersion;
			public delegate0 xClose;
			public delegate1 xRead;
			public delegate1 xWrite;
			public delegate2 xTruncate;
			public delegate2 xSync;
			public delegate2 xFileSize;
			public delegate2 xLock;
			public delegate2 xUnlock;
			public delegate2 xCheckReservedLock;
			public delegate3 xFileControl;
			public delegate0 xSectorSize;
			public delegate0 xDeviceCharacteristics;
			public delegate4 xShmMap;
			public delegate1 xShmLock;
			public delegate5 xShmBarrier;
			public delegate2 xShmUnmap;
			public delegate1 xFetch;
			public delegate3 xUnfetch;
		}
		public unsafe class sqlite3_mem_methods
		{
			public delegate16 xMalloc;
			public delegate17 xFree;
			public delegate18 xRealloc;
			public delegate19 xSize;
			public delegate20 xRoundup;
			public delegate19 xInit;
			public delegate17 xShutdown;
			public void* pAppData;
		}
		public unsafe class sqlite3_module
		{
			public int iVersion;
			public delegate21 xCreate;
			public delegate21 xConnect;
			public delegate22 xBestIndex;
			public delegate23 xDisconnect;
			public delegate23 xDestroy;
			public delegate22 xOpen;
			public delegate24 xClose;
			public delegate25 xFilter;
			public delegate24 xNext;
			public delegate24 xEof;
			public delegate26 xColumn;
			public delegate27 xRowid;
			public delegate28 xUpdate;
			public delegate23 xBegin;
			public delegate23 xSync;
			public delegate23 xCommit;
			public delegate23 xRollback;
			public delegate29 xFindFunction;
			public delegate22 xRename;
			public delegate22 xSavepoint;
			public delegate22 xRelease;
			public delegate22 xRollbackTo;
			public delegate30 xShadowName;
		}
		public unsafe struct sqlite3_mutex
		{
			public unsafe struct _RTL_CRITICAL_SECTION
			{
			}

			public _RTL_CRITICAL_SECTION mutex;
			public int id;
		}
		public unsafe class sqlite3_mutex_methods
		{
			public delegate31 xMutexInit;
			public delegate31 xMutexEnd;
			public delegate32 xMutexAlloc;
			public delegate33 xMutexFree;
			public delegate33 xMutexEnter;
			public delegate34 xMutexTry;
			public delegate33 xMutexLeave;
			public delegate34 xMutexHeld;
			public delegate34 xMutexNotheld;
		}
		public unsafe struct sqlite3_pcache
		{
		}
		public unsafe class sqlite3_pcache_methods
		{
			public void* pArg;
			public delegate19 xInit;
			public delegate17 xShutdown;
			public delegate42 xCreate;
			public delegate36 xCachesize;
			public delegate37 xPagecount;
			public delegate43 xFetch;
			public delegate39 xUnpin;
			public delegate40 xRekey;
			public delegate36 xTruncate;
			public delegate41 xDestroy;
		}
		public unsafe class sqlite3_pcache_methods2
		{
			public int iVersion;
			public void* pArg;
			public delegate19 xInit;
			public delegate17 xShutdown;
			public delegate35 xCreate;
			public delegate36 xCachesize;
			public delegate37 xPagecount;
			public delegate38 xFetch;
			public delegate39 xUnpin;
			public delegate40 xRekey;
			public delegate36 xTruncate;
			public delegate41 xDestroy;
			public delegate41 xShrink;
		}
		public unsafe struct sqlite3_pcache_page
		{
			public void* pBuf;
			public void* pExtra;
		}
		public unsafe class sqlite3_rtree_geometry
		{
			public void* pContext;
			public int nParam;
			public double* aParam;
			public void* pUser;
			public delegate17 xDelUser;
		}
		public unsafe class sqlite3_rtree_query_info
		{
			public void* pContext;
			public int nParam;
			public double* aParam;
			public void* pUser;
			public delegate17 xDelUser;
			public double* aCoord;
			public uint* anQueue;
			public int nCoord;
			public int iLevel;
			public int mxLevel;
			public long iRowid;
			public double rParentScore;
			public int eParentWithin;
			public int eWithin;
			public double rScore;
			public sqlite3_value apSqlParam;
		}
		public unsafe struct sqlite3_snapshot
		{
			public fixed byte hidden[48];
		}
		public unsafe struct sqlite3_stmt
		{
		}
		public unsafe class sqlite3_str
		{
			public sqlite3 db;
			public sbyte* zText;
			public uint nAlloc;
			public uint mxAlloc;
			public uint nChar;
			public byte accError;
			public byte printfFlags;
		}
		public unsafe class sqlite3_value
		{
			[StructLayout(LayoutKind.Explicit)]
			public unsafe struct MemValue
			{
				[FieldOffset(0)]
				public double r;
				[FieldOffset(0)]
				public long i;
				[FieldOffset(0)]
				public int nZero;
				[FieldOffset(0)]
				public sbyte* zPType;
				[FieldOffset(0)]
				public FuncDef pDef;
			}

			public MemValue u;
			public ushort flags;
			public byte enc;
			public byte eSubtype;
			public int n;
			public sbyte* z;
			public sbyte* zMalloc;
			public int szMalloc;
			public uint uTemp;
			public sqlite3 db;
			public delegate17 xDel;
		}
		public unsafe class sqlite3_vfs
		{
			public int iVersion;
			public int szOsFile;
			public int mxPathname;
			public sqlite3_vfs pNext;
			public sbyte* zName;
			public void* pAppData;
			public delegate6 xOpen;
			public delegate7 xDelete;
			public delegate8 xAccess;
			public delegate8 xFullPathname;
			public delegate9 xDlOpen;
			public delegate10 xDlError;
			public delegate11 xDlSym;
			public delegate12 xDlClose;
			public delegate7 xRandomness;
			public delegate13 xSleep;
			public delegate13 xCurrentTime;
			public delegate7 xGetLastError;
			public delegate13 xCurrentTimeInt64;
			public delegate7 xSetSystemCall;
			public delegate14 xGetSystemCall;
			public delegate15 xNextSystemCall;
		}
		public unsafe class sqlite3_vtab
		{
			public sqlite3_module pModule;
			public int nRef;
			public sbyte* zErrMsg;
		}
		public unsafe class sqlite3_vtab_cursor
		{
			public sqlite3_vtab pVtab;
		}
		public unsafe class sqlite3AutoExtList
		{
			public uint nExt;
			public delegate171 aExt;
		}
		public unsafe class Sqlite3Config
		{
			public int bMemstat;
			public byte bCoreMutex;
			public byte bFullMutex;
			public byte bOpenUri;
			public byte bUseCis;
			public byte bSmallMalloc;
			public byte bExtraSchemaChecks;
			public int mxStrlen;
			public int neverCorrupt;
			public int szLookaside;
			public int nLookaside;
			public int nStmtSpill;
			public sqlite3_mem_methods m;
			public sqlite3_mutex_methods mutex;
			public sqlite3_pcache_methods2 pcache2;
			public void* pHeap;
			public int nHeap;
			public int mnReq;
			public int mxReq;
			public long szMmap;
			public long mxMmap;
			public void* pPage;
			public int szPage;
			public int nPage;
			public int mxParserStack;
			public int sharedCacheEnabled;
			public uint szPma;
			public int isInit;
			public int inProgress;
			public int isMutexInit;
			public int isMallocInit;
			public int isPCacheInit;
			public int nRefInitMutex;
			public sqlite3_mutex* pInitMutex;
			public delegate63 xLog;
			public void* pLogArg;
			public long mxMemdbSize;
			public delegate20 xTestCallback;
			public int bLocaltimeFault;
			public delegate59 xAltLocaltime;
			public int iOnceResetThreshold;
			public uint szSorterRef;
			public uint iPrngSeed;
		}
		public unsafe struct sqlite3PrngType
		{
			public byte isInit;
			public byte i;
			public byte j;
			public fixed byte s[256];
		}
		public unsafe struct sqlite3StatType
		{
			public fixed long nowValue[10];
			public fixed long mxValue[10];
		}
		public unsafe class SQLiteThread
		{
			public void* tid;
			public uint id;
			public delegate75 xTask;
			public void* pIn;
			public void* pResult;
		}
		public unsafe class SrcItem
		{
			public Schema pSchema;
			public sbyte* zDatabase;
			public sbyte* zName;
			public sbyte* zAlias;
			public Table pTab;
			public Select pSelect;
			public int addrFillSub;
			public int regReturn;
			public int regResult;
			public unsafe struct unnamed1
			{
				public byte jointype;
				public uint notIndexed;
				public uint isIndexedBy;
				public uint isTabFunc;
				public uint isCorrelated;
				public uint viaCoroutine;
				public uint isRecursive;
				public uint fromDDL;
				public uint isCte;
				public uint notCte;
			}

			public unnamed1 fg;
			public int iCursor;
			public Expr pOn;
			public IdList* pUsing;
			public ulong colUsed;
			[StructLayout(LayoutKind.Explicit)]
			public unsafe struct unnamed2
			{
				[FieldOffset(0)]
				public sbyte* zIndexedBy;
				[FieldOffset(0)]
				public ExprList pFuncArg;
			}

			public unnamed2 u1;
			[StructLayout(LayoutKind.Explicit)]
			public unsafe struct unnamed3
			{
				[FieldOffset(0)]
				public Index pIBIndex;
				[FieldOffset(0)]
				public CteUse* pCteUse;
			}

			public unnamed3 u2;
		}
		public unsafe class SrcList
		{
			public int nSrc;
			public uint nAlloc;
			public SrcItem[] a = new SrcItem[1];
			public SrcList()
			{
				for (var i = 0; i < 1; ++i)
				{
					a[i] = new SrcItem();
				}
			}
		}
		public unsafe class StatAccum
		{
			public sqlite3 db;
			public uint nEst;
			public uint nRow;
			public int nLimit;
			public int nCol;
			public int nKeyCol;
			public byte nSkipAhead;
			public StatSample current;
		}
		public unsafe struct StatSample
		{
			public uint* anEq;
			public uint* anDLt;
		}
		public unsafe struct SubProgram
		{
			public VdbeOp* aOp;
			public int nOp;
			public int nMem;
			public int nCsr;
			public byte* aOnce;
			public void* token;
			public SubProgram* pNext;
		}
		public unsafe class SubstContext
		{
			public Parse pParse;
			public int iTable;
			public int iNewTable;
			public int isLeftJoin;
			public ExprList pEList;
		}
		public unsafe struct SumCtx
		{
			public double rSum;
			public long iSum;
			public long cnt;
			public byte overflow;
			public byte approx;
		}
		public unsafe class Table
		{
			public sbyte* zName;
			public Column* aCol;
			public Index pIndex;
			public sbyte* zColAff;
			public ExprList pCheck;
			public uint tnum;
			public uint nTabRef;
			public uint tabFlags;
			public short iPKey;
			public short nCol;
			public short nNVCol;
			public short nRowLogEst;
			public short szTabRow;
			public byte keyConf;
			public byte eTabType;
			[StructLayout(LayoutKind.Explicit)]
			public unsafe struct unnamed1
			{
				public unsafe struct unnamed2
				{
					public int addColOffset;
					public FKey pFKey;
					public ExprList pDfltList;
				}

				[FieldOffset(0)]
				public unnamed2 tab;
				public unsafe struct unnamed3
				{
					public Select pSelect;
				}

				[FieldOffset(0)]
				public unnamed3 view;
				public unsafe struct unnamed4
				{
					public int nArg;
					public sbyte** azArg;
					public VTable p;
				}

				[FieldOffset(0)]
				public unnamed4 vtab;
			}

			public unnamed1 u;
			public Trigger pTrigger;
			public Schema pSchema;
		}
		public unsafe struct TableLock
		{
			public int iDb;
			public uint iTab;
			public byte isWriteLock;
			public sbyte* zLockName;
		}
		public unsafe struct TabResult
		{
			public sbyte** azResult;
			public sbyte* zErrMsg;
			public uint nAlloc;
			public uint nRow;
			public uint nColumn;
			public uint nData;
			public int rc;
		}
		public unsafe struct Token
		{
			public sbyte* z;
			public uint n;
		}
		public unsafe struct TreeView
		{
		}
		public unsafe struct TrigEvent
		{
			public int a;
			public IdList* b;
		}
		public unsafe class Trigger
		{
			public sbyte* zName;
			public sbyte* table;
			public byte op;
			public byte tr_tm;
			public byte bReturning;
			public Expr pWhen;
			public IdList* pColumns;
			public Schema pSchema;
			public Schema pTabSchema;
			public TriggerStep step_list;
			public Trigger pNext;
		}
		public unsafe class TriggerPrg
		{
			public Trigger pTrigger;
			public TriggerPrg pNext;
			public SubProgram* pProgram;
			public int orconf;
			public UnsafeArray1D<uint> aColmaskArray = new UnsafeArray1D<uint>(2);
			public uint* aColmask;
			public TriggerPrg()
			{
				aColmask = (uint*)aColmaskArray;
			}
		}
		public unsafe class TriggerStep
		{
			public byte op;
			public byte orconf;
			public Trigger pTrig;
			public Select pSelect;
			public sbyte* zTarget;
			public SrcList pFrom;
			public Expr pWhere;
			public ExprList pExprList;
			public IdList* pIdList;
			public Upsert pUpsert;
			public sbyte* zSpan;
			public TriggerStep pNext;
			public TriggerStep pLast;
		}
		public unsafe class UnpackedRecord
		{
			public KeyInfo pKeyInfo;
			public sqlite3_value aMem;
			public ushort nField;
			public sbyte default_rc;
			public byte errCode;
			public sbyte r1;
			public sbyte r2;
			public byte eqSeen;
		}
		public unsafe class Upsert
		{
			public ExprList pUpsertTarget;
			public Expr pUpsertTargetWhere;
			public ExprList pUpsertSet;
			public Expr pUpsertWhere;
			public Upsert pNextUpsert;
			public byte isDoUpdate;
			public void* pToFree;
			public Index pUpsertIdx;
			public SrcList pUpsertSrc;
			public int regData;
			public int iDataCur;
			public int iIdxCur;
		}
		public unsafe class ValueList
		{
			public BtCursor pCsr;
			public sqlite3_value pOut;
		}
		public unsafe class ValueNewStat4Ctx
		{
			public Parse pParse;
			public Index pIdx;
			public UnpackedRecord ppRec;
			public int iVal;
		}
		public unsafe class Vdbe
		{
			public sqlite3 db;
			public Vdbe pPrev;
			public Vdbe pNext;
			public Parse pParse;
			public short nVar;
			public uint iVdbeMagic;
			public int nMem;
			public int nCursor;
			public uint cacheCtr;
			public int pc;
			public int rc;
			public long nChange;
			public int iStatement;
			public long iCurrentTime;
			public long nFkConstraint;
			public long nStmtDefCons;
			public long nStmtDefImmCons;
			public sqlite3_value aMem;
			public sqlite3_value apArg;
			public VdbeCursor apCsr;
			public sqlite3_value aVar;
			public VdbeOp* aOp;
			public int nOp;
			public int nOpAlloc;
			public sqlite3_value aColName;
			public sqlite3_value pResultSet;
			public sbyte* zErrMsg;
			public int* pVList;
			public long startTime;
			public ushort nResColumn;
			public byte errorAction;
			public byte minWriteFileFormat;
			public byte prepFlags;
			public byte doingRerun;
			public uint expired;
			public uint explain;
			public uint changeCntOn;
			public uint runOnlyOnce;
			public uint usesStmtJournal;
			public uint readOnly;
			public uint bIsReader;
			public uint btreeMask;
			public uint lockMask;
			public UnsafeArray1D<uint> aCounterArray = new UnsafeArray1D<uint>(9);
			public uint* aCounter;
			public sbyte* zSql;
			public void* pFree;
			public VdbeFrame pFrame;
			public VdbeFrame pDelFrame;
			public int nFrame;
			public uint expmask;
			public SubProgram* pProgram;
			public AuxData pAuxData;
			public Vdbe()
			{
				aCounter = (uint*)aCounterArray;
			}
		}
		public unsafe class VdbeCursor
		{
			public byte eCurType;
			public sbyte iDb;
			public byte nullRow;
			public byte deferredMoveto;
			public byte isTable;
			public uint isEphemeral;
			public uint useRandomRowid;
			public uint isOrdered;
			public uint hasBeenDuped;
			public ushort seekHit;
			[StructLayout(LayoutKind.Explicit)]
			public unsafe struct unnamed1
			{
				[FieldOffset(0)]
				public Btree pBtx;
				[FieldOffset(0)]
				public uint* aAltMap;
			}

			public unnamed1 ub;
			public long seqCount;
			public uint cacheStatus;
			public int seekResult;
			public VdbeCursor pAltCursor;
			[StructLayout(LayoutKind.Explicit)]
			public unsafe struct unnamed2
			{
				[FieldOffset(0)]
				public BtCursor pCursor;
				[FieldOffset(0)]
				public sqlite3_vtab_cursor pVCur;
				[FieldOffset(0)]
				public VdbeSorter pSorter;
			}

			public unnamed2 uc;
			public KeyInfo pKeyInfo;
			public uint iHdrOffset;
			public uint pgnoRoot;
			public short nField;
			public ushort nHdrParsed;
			public long movetoTarget;
			public uint* aOffset;
			public byte* aRow;
			public uint payloadSize;
			public uint szRow;
			public UnsafeArray1D<uint> aTypeArray = new UnsafeArray1D<uint>(1);
			public uint* aType;
			public VdbeCursor()
			{
				aType = (uint*)aTypeArray;
			}
		}
		public unsafe class VdbeFrame
		{
			public Vdbe v;
			public VdbeFrame pParent;
			public VdbeOp* aOp;
			public long* anExec;
			public sqlite3_value aMem;
			public VdbeCursor apCsr;
			public byte* aOnce;
			public void* token;
			public long lastRowid;
			public AuxData pAuxData;
			public int nCursor;
			public int pc;
			public int nOp;
			public int nMem;
			public int nChildMem;
			public int nChildCsr;
			public long nChange;
			public long nDbChange;
		}
		public unsafe struct VdbeOp
		{
			public byte opcode;
			public sbyte p4type;
			public ushort p5;
			public int p1;
			public int p2;
			public int p3;
			[StructLayout(LayoutKind.Explicit)]
			public unsafe struct p4union
			{
				[FieldOffset(0)]
				public int i;
				[FieldOffset(0)]
				public void* p;
				[FieldOffset(0)]
				public sbyte* z;
				[FieldOffset(0)]
				public long* pI64;
				[FieldOffset(0)]
				public double* pReal;
				[FieldOffset(0)]
				public FuncDef pFunc;
				[FieldOffset(0)]
				public sqlite3_context pCtx;
				[FieldOffset(0)]
				public CollSeq pColl;
				[FieldOffset(0)]
				public sqlite3_value pMem;
				[FieldOffset(0)]
				public VTable pVtab;
				[FieldOffset(0)]
				public KeyInfo pKeyInfo;
				[FieldOffset(0)]
				public uint* ai;
				[FieldOffset(0)]
				public SubProgram* pProgram;
				[FieldOffset(0)]
				public Table pTab;
				[FieldOffset(0)]
				public delegate60 xAdvance;
			}

			public p4union p4;
		}
		public unsafe struct VdbeOpList
		{
			public byte opcode;
			public sbyte p1;
			public sbyte p2;
			public sbyte p3;
		}
		public unsafe class VdbeSorter
		{
			public int mnPmaSize;
			public int mxPmaSize;
			public int mxKeysize;
			public int pgsz;
			public PmaReader pReader;
			public MergeEngine pMerger;
			public sqlite3 db;
			public KeyInfo pKeyInfo;
			public UnpackedRecord pUnpacked;
			public SorterList list;
			public int iMemory;
			public int nMemory;
			public byte bUsePMA;
			public byte bUseThreads;
			public byte iPrev;
			public byte nTask;
			public byte typeMask;
			public SortSubtask[] aTask = new SortSubtask[1];
			public VdbeSorter()
			{
				for (var i = 0; i < 1; ++i)
				{
					aTask[i] = new SortSubtask();
				}
			}
		}
		public unsafe class VtabCtx
		{
			public VTable pVTable;
			public Table pTab;
			public VtabCtx pPrior;
			public int bDeclared;
		}
		public unsafe class VTable
		{
			public sqlite3 db;
			public Module pMod;
			public sqlite3_vtab pVtab;
			public int nRef;
			public byte bConstraint;
			public byte eVtabRisk;
			public int iSavepoint;
			public VTable pNext;
		}
		public unsafe class Wal
		{
			public sqlite3_vfs pVfs;
			public sqlite3_file pDbFd;
			public sqlite3_file pWalFd;
			public uint iCallback;
			public long mxWalSize;
			public int nWiData;
			public int szFirstBlock;
			public uint** apWiData;
			public uint szPage;
			public short readLock;
			public byte syncFlags;
			public byte exclusiveMode;
			public byte writeLock;
			public byte ckptLock;
			public byte readOnly;
			public byte truncateOnCommit;
			public byte syncHeader;
			public byte padToSectorBoundary;
			public byte bShmUnreliable;
			public WalIndexHdr hdr;
			public uint minFrame;
			public uint iReCksum;
			public sbyte* zWalName;
			public uint nCkpt;
		}
		public unsafe struct WalCkptInfo
		{
			public uint nBackfill;
			public fixed uint aReadMark[5];
			public fixed byte aLock[8];
			public uint nBackfillAttempted;
			public uint notUsed0;
		}
		public unsafe struct WalHashLoc
		{
			public ushort* aHash;
			public uint* aPgno;
			public uint iZero;
		}
		public unsafe struct WalIndexHdr
		{
			public uint iVersion;
			public uint unused;
			public uint iChange;
			public byte isInit;
			public byte bigEndCksum;
			public ushort szPage;
			public uint mxFrame;
			public uint nPage;
			public fixed uint aFrameCksum[2];
			public fixed uint aSalt[2];
			public fixed uint aCksum[2];
		}
		public unsafe class WalIterator
		{
			public uint iPrior;
			public int nSegment;
			public unsafe struct WalSegment
			{
				public int iNext;
				public ushort* aIndex;
				public uint* aPgno;
				public int nEntry;
				public int iZero;
			}

			public UnsafeArray1D<WalSegment> aSegmentArray = new UnsafeArray1D<WalSegment>(1);
			public WalSegment* aSegment;
			public WalIterator()
			{
				aSegment = (WalSegment*)aSegmentArray;
			}
		}
		public unsafe class Walker
		{
			public Parse pParse;
			public delegate72 xExprCallback;
			public delegate72 xSelectCallback;
			public delegate73 xSelectCallback2;
			public int walkerDepth;
			public ushort eCode;
			[StructLayout(LayoutKind.Explicit)]
			public unsafe struct unnamed1
			{
				[FieldOffset(0)]
				public NameContext pNC;
				[FieldOffset(0)]
				public int n;
				[FieldOffset(0)]
				public int iCur;
				[FieldOffset(0)]
				public SrcList pSrcList;
				public unsafe struct CCurHint
				{
				}

				[FieldOffset(0)]
				public CCurHint* pCCurHint;
				[FieldOffset(0)]
				public RefSrcList pRefSrcList;
				[FieldOffset(0)]
				public int* aiCol;
				[FieldOffset(0)]
				public IdxCover pIdxCover;
				[FieldOffset(0)]
				public IdxExprTrans pIdxTrans;
				[FieldOffset(0)]
				public ExprList pGroupBy;
				[FieldOffset(0)]
				public Select pSelect;
				[FieldOffset(0)]
				public WindowRewrite pRewrite;
				[FieldOffset(0)]
				public WhereConst pConst;
				[FieldOffset(0)]
				public RenameCtx pRename;
				[FieldOffset(0)]
				public Table pTab;
				[FieldOffset(0)]
				public SrcItem pSrcItem;
				[FieldOffset(0)]
				public DbFixer pFix;
			}

			public unnamed1 u;
		}
		public unsafe class WalWriter
		{
			public Wal pWal;
			public sqlite3_file pFd;
			public long iSyncPoint;
			public int syncFlags;
			public int szPage;
		}
		public unsafe class WhereAndInfo
		{
			public WhereClause wc;
		}
		public unsafe class WhereClause
		{
			public WhereInfo pWInfo;
			public WhereClause pOuter;
			public byte op;
			public byte hasOr;
			public int nTerm;
			public int nSlot;
			public int nBase;
			public WhereTerm a;
			public WhereTerm[] aStatic = new WhereTerm[8];
			public WhereClause()
			{
				for (var i = 0; i < 8; ++i)
				{
					aStatic[i] = new WhereTerm();
				}
			}
		}
		public unsafe class WhereConst
		{
			public Parse pParse;
			public byte* pOomFault;
			public int nConst;
			public int nChng;
			public int bHasAffBlob;
			public Expr apExpr;
		}
		public unsafe class WhereExprMod
		{
			public WhereExprMod pNext;
			public Expr pExpr;
			public Expr orig;
		}
		public unsafe class WhereInfo
		{
			public Parse pParse;
			public SrcList pTabList;
			public ExprList pOrderBy;
			public ExprList pResultSet;
			public Expr pWhere;
			public Select pLimit;
			public UnsafeArray1D<int> aiCurOnePassArray = new UnsafeArray1D<int>(2);
			public int* aiCurOnePass;
			public int iContinue;
			public int iBreak;
			public int savedNQueryLoop;
			public ushort wctrlFlags;
			public short iLimit;
			public byte nLevel;
			public sbyte nOBSat;
			public byte eOnePass;
			public byte eDistinct;
			public uint bDeferredSeek;
			public uint untestedTerms;
			public uint bOrderedInnerLoop;
			public uint sorted;
			public short nRowOut;
			public int iTop;
			public int iEndWhere;
			public WhereLoop pLoops;
			public WhereExprMod pExprMods;
			public ulong revMask;
			public WhereClause sWC;
			public WhereMaskSet sMaskSet;
			public WhereLevel[] a = new WhereLevel[1];
			public WhereInfo()
			{
				aiCurOnePass = (int*)aiCurOnePassArray;
				for (var i = 0; i < 1; ++i)
				{
					a[i] = new WhereLevel();
				}
			}
		}
		public unsafe class WhereLevel
		{
			public int iLeftJoin;
			public int iTabCur;
			public int iIdxCur;
			public int addrBrk;
			public int addrNxt;
			public int addrSkip;
			public int addrCont;
			public int addrFirst;
			public int addrBody;
			public int regBignull;
			public int addrBignull;
			public uint iLikeRepCntr;
			public int addrLikeRep;
			public int regFilter;
			public byte iFrom;
			public byte op;
			public byte p3;
			public byte p5;
			public int p1;
			public int p2;
			[StructLayout(LayoutKind.Explicit)]
			public unsafe struct unnamed1
			{
				public unsafe struct unnamed2
				{
					public int nIn;
					public unsafe struct InLoop
					{
						public int iCur;
						public int addrInTop;
						public int iBase;
						public int nPrefix;
						public byte eEndLoopOp;
					}

					public InLoop* aInLoop;
				}

				[FieldOffset(0)]
				public unnamed2 _in_;
				[FieldOffset(0)]
				public Index pCoveringIdx;
			}

			public unnamed1 u;
			public WhereLoop pWLoop;
			public ulong notReady;
		}
		public unsafe class WhereLoop
		{
			public ulong prereq;
			public ulong maskSelf;
			public byte iTab;
			public byte iSortIdx;
			public short rSetup;
			public short rRun;
			public short nOut;
			[StructLayout(LayoutKind.Explicit)]
			public unsafe struct unnamed1
			{
				public unsafe struct unnamed2
				{
					public ushort nEq;
					public ushort nBtm;
					public ushort nTop;
					public ushort nDistinctCol;
					public Index pIndex;
				}

				[FieldOffset(0)]
				public unnamed2 btree;
				public unsafe struct unnamed3
				{
					public int idxNum;
					public uint needFree;
					public uint bOmitOffset;
					public sbyte isOrdered;
					public ushort omitMask;
					public sbyte* idxStr;
					public uint mHandleIn;
				}

				[FieldOffset(0)]
				public unnamed3 vtab;
			}

			public unnamed1 u;
			public uint wsFlags;
			public ushort nLTerm;
			public ushort nSkip;
			public ushort nLSlot;
			public WhereTerm aLTerm;
			public WhereLoop pNextLoop;
			public WhereTerm[] aLTermSpace = new WhereTerm[3];
			public WhereLoop()
			{
				for (var i = 0; i < 3; ++i)
				{
					aLTermSpace[i] = new WhereTerm();
				}
			}
		}
		public unsafe class WhereLoopBuilder
		{
			public WhereInfo pWInfo;
			public WhereClause pWC;
			public WhereLoop pNew;
			public WhereOrSet pOrSet;
			public byte bldFlags1;
			public byte bldFlags2;
			public uint iPlanLimit;
		}
		public unsafe struct WhereMaskSet
		{
			public int bVarSelect;
			public int n;
			public fixed int ix[64];
		}
		public unsafe struct WhereOrCost
		{
			public ulong prereq;
			public short rRun;
			public short nOut;
		}
		public unsafe class WhereOrInfo
		{
			public WhereClause wc;
			public ulong indexable;
		}
		public unsafe class WhereOrSet
		{
			public ushort n;
			public UnsafeArray1D<WhereOrCost> aArray = new UnsafeArray1D<WhereOrCost>(3);
			public WhereOrCost* a;
			public WhereOrSet()
			{
				a = (WhereOrCost*)aArray;
			}
		}
		public unsafe class WherePath
		{
			public ulong maskLoop;
			public ulong revLoop;
			public short nRow;
			public short rCost;
			public short rUnsorted;
			public sbyte isOrdered;
			public WhereLoop aLoop;
		}
		public unsafe class WhereScan
		{
			public WhereClause pOrigWC;
			public WhereClause pWC;
			public sbyte* zCollName;
			public Expr pIdxExpr;
			public int k;
			public uint opMask;
			public sbyte idxaff;
			public byte iEquiv;
			public byte nEquiv;
			public UnsafeArray1D<int> aiCurArray = new UnsafeArray1D<int>(11);
			public int* aiCur;
			public UnsafeArray1D<short> aiColumnArray = new UnsafeArray1D<short>(11);
			public short* aiColumn;
			public WhereScan()
			{
				aiCur = (int*)aiCurArray;
				aiColumn = (short*)aiColumnArray;
			}
		}
		public unsafe class WhereTerm
		{
			public Expr pExpr;
			public WhereClause pWC;
			public short truthProb;
			public ushort wtFlags;
			public ushort eOperator;
			public byte nChild;
			public byte eMatchOp;
			public int iParent;
			public int leftCursor;
			[StructLayout(LayoutKind.Explicit)]
			public unsafe struct unnamed1
			{
				public unsafe struct unnamed2
				{
					public int leftColumn;
					public int iField;
				}

				[FieldOffset(0)]
				public unnamed2 x;
				[FieldOffset(0)]
				public WhereOrInfo pOrInfo;
				[FieldOffset(0)]
				public WhereAndInfo pAndInfo;
			}

			public unnamed1 u;
			public ulong prereqRight;
			public ulong prereqAll;
		}
		public unsafe class win_syscall
		{
			public sbyte* zName;
			public delegate74 pCurrent;
			public delegate74 pDefault;
		}
		public unsafe class Window
		{
			public sbyte* zName;
			public sbyte* zBase;
			public ExprList pPartition;
			public ExprList pOrderBy;
			public byte eFrmType;
			public byte eStart;
			public byte eEnd;
			public byte bImplicitFrame;
			public byte eExclude;
			public Expr pStart;
			public Expr pEnd;
			public Window ppThis;
			public Window pNextWin;
			public Expr pFilter;
			public FuncDef pFunc;
			public int iEphCsr;
			public int regAccum;
			public int regResult;
			public int csrApp;
			public int regApp;
			public int regPart;
			public Expr pOwner;
			public int nBufferCol;
			public int iArgCol;
			public int regOne;
			public int regStartRowid;
			public int regEndRowid;
			public byte bExprArgs;
		}
		public unsafe class WindowCodeArg
		{
			public Parse pParse;
			public Window pMWin;
			public Vdbe pVdbe;
			public int addrGosub;
			public int regGosub;
			public int regArg;
			public int eDelete;
			public int regRowid;
			public WindowCsrAndReg start;
			public WindowCsrAndReg current;
			public WindowCsrAndReg end;
		}
		public unsafe struct WindowCsrAndReg
		{
			public int csr;
			public int reg;
		}
		public unsafe class WindowRewrite
		{
			public Window pWin;
			public SrcList pSrc;
			public ExprList pSub;
			public Table pTab;
			public Select pSubSelect;
		}
		public unsafe class winFile
		{
			public sqlite3_io_methods pMethod;
			public sqlite3_vfs pVfs;
			public void* h;
			public byte locktype;
			public short sharedLockByte;
			public byte ctrlFlags;
			public uint lastErrno;
			public winShm pShm;
			public sbyte* zPath;
			public int szChunk;
			public int nFetchOut;
			public void* hMap;
			public void* pMapRegion;
			public long mmapSize;
			public long mmapSizeMax;
		}
		public unsafe class winShm
		{
			public winShmNode pShmNode;
			public winShm pNext;
			public byte hasMutex;
			public ushort sharedMask;
			public ushort exclMask;
		}
		public unsafe class winShmNode
		{
			public sqlite3_mutex* mutex;
			public sbyte* zFilename;
			public winFile hFile;
			public int szRegion;
			public int nRegion;
			public byte isReadonly;
			public byte isUnlocked;
			public unsafe struct ShmRegion
			{
				public void* hMap;
				public void* pMap;
			}

			public ShmRegion* aRegion;
			public uint lastErrno;
			public int nRef;
			public winShm pFirst;
			public winShmNode pNext;
		}
		public unsafe class winVfsAppData
		{
			public sqlite3_io_methods pMethod;
			public void* pAppData;
			public int bNoLock;
		}
		public unsafe class With
		{
			public int nCte;
			public int bView;
			public With pOuter;
			public Cte[] a = new Cte[1];
			public With()
			{
				for (var i = 0; i < 1; ++i)
				{
					a[i] = new Cte();
				}
			}
		}
		public unsafe class yyParser
		{
			public yyStackEntry* yytos;
			public Parse pParse;
			public UnsafeArray1D<yyStackEntry> yystackArray = new UnsafeArray1D<yyStackEntry>(100);
			public yyStackEntry* yystack;
			public yyStackEntry* yystackEnd;
			public yyParser()
			{
				yystack = (yyStackEntry*)yystackArray;
			}
		}
		public unsafe struct yyStackEntry
		{
			public ushort stateno;
			public ushort major;
			public unsafe struct YYMINORTYPE
			{
			}

			public YYMINORTYPE minor;
		}
	}
}