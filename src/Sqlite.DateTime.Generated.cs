// Generated by Hebron at 4/3/2022 2:10:11 AM

using System;
using System.Runtime.InteropServices;
using Hebron.Runtime;

namespace SqliteSharp
{
	unsafe partial class Sqlite
	{
		public static void clearYMD_HMS_TZ(DateTime* p)
		{
			p->validYMD = (sbyte)(0);
			p->validHMS = (sbyte)(0);
			p->validTZ = (sbyte)(0);
		}
		public static void computeHMS(DateTime* p)
		{
			int s = 0;
			if ((p->validHMS) != 0)
				return;
			computeJD(p);
			s = ((int)((p->iJD + 43200000) % 86400000));
			p->s = (double)(s / 1000.0);
			s = ((int)(p->s));
			p->s -= (double)(s);
			p->h = (int)(s / 3600);
			s -= (int)(p->h * 3600);
			p->m = (int)(s / 60);
			p->s += (double)(s - p->m * 60);
			p->rawS = (sbyte)(0);
			p->validHMS = (sbyte)(1);
		}
		public static void computeJD(DateTime* p)
		{
			int Y = 0; int M = 0; int D = 0; int A = 0; int B = 0; int X1 = 0; int X2 = 0;
			if ((p->validJD) != 0)
				return;
			if ((p->validYMD) != 0)
			{
				Y = (int)(p->Y);
				M = (int)(p->M);
				D = (int)(p->D);
			}
			else
			{
				Y = (int)(2000);
				M = (int)(1);
				D = (int)(1);
			}

			if ((((Y) < (-4713)) || ((Y) > (9999))) || ((p->rawS) != 0))
			{
				datetimeError(p);
				return;
			}

			if ((M) <= (2))
			{
				Y--;
				M += (int)(12);
			}

			A = (int)(Y / 100);
			B = (int)(2 - A + (A / 4));
			X1 = (int)(36525 * (Y + 4716) / 100);
			X2 = (int)(306001 * (M + 1) / 10000);
			p->iJD = ((long)((X1 + X2 + D + B - 1524.5) * 86400000));
			p->validJD = (sbyte)(1);
			if ((p->validHMS) != 0)
			{
				p->iJD += (long)(p->h * 3600000 + p->m * 60000 + (long)(p->s * 1000));
				if ((p->validTZ) != 0)
				{
					p->iJD -= (long)(p->tz * 60000);
					p->validYMD = (sbyte)(0);
					p->validHMS = (sbyte)(0);
					p->validTZ = (sbyte)(0);
				}
			}
		}
		public static void computeYMD(DateTime* p)
		{
			int Z = 0; int A = 0; int B = 0; int C = 0; int D = 0; int E = 0; int X1 = 0;
			if ((p->validYMD) != 0)
				return;
			if (p->validJD == 0)
			{
				p->Y = (int)(2000);
				p->M = (int)(1);
				p->D = (int)(1);
			}
			else if (validJulianDay((long)(p->iJD)) == 0)
			{
				datetimeError(p);
				return;
			}
			else
			{
				Z = ((int)((p->iJD + 43200000) / 86400000));
				A = ((int)((Z - 1867216.25) / 36524.25));
				A = (int)(Z + 1 + A - (A / 4));
				B = (int)(A + 1524);
				C = ((int)((B - 122.1) / 365.25));
				D = (int)((36525 * (C & 32767)) / 100);
				E = ((int)((B - D) / 30.6001));
				X1 = ((int)(30.6001 * E));
				p->D = (int)(B - D - X1);
				p->M = (int)((E) < (14) ? E - 1 : E - 13);
				p->Y = (int)((p->M) > (2) ? C - 4716 : C - 4715);
			}

			p->validYMD = (sbyte)(1);
		}
		public static void computeYMD_HMS(DateTime* p)
		{
			computeYMD(p);
			computeHMS(p);
		}
		public static void datetimeError(DateTime* p)
		{
			CRuntime.memset(p, (int)(0), (ulong)(sizeof(DateTime)));
			p->isError = (sbyte)(1);
		}
		public static void setRawDateNumber(DateTime* p, double r)
		{
			p->s = (double)(r);
			p->rawS = (sbyte)(1);
			if (((r) >= (0.0)) && ((r) < (5373484.5)))
			{
				p->iJD = ((long)(r * 86400000.0 + 0.5));
				p->validJD = (sbyte)(1);
			}
		}
		public static int toLocaltime(DateTime* p, sqlite3_context pCtx)
		{
			long t = 0;
			tm sLocal = new tm();
			int iYearDiff = 0;
			CRuntime.memset(&sLocal, (int)(0), (ulong)(sizeof(tm)));
			computeJD(p);
			if (((p->iJD) < (2108667600 * (long)(100000))) || ((p->iJD) > (2130141456 * (long)(100000))))
			{
				DateTime x = (DateTime)(*p);
				computeYMD_HMS(&x);
				iYearDiff = (int)((2000 + x.Y % 4) - x.Y);
				x.Y += (int)(iYearDiff);
				x.validJD = (sbyte)(0);
				computeJD(&x);
				t = (long)(x.iJD / 1000 - 21086676 * (long)(10000));
			}
			else
			{
				iYearDiff = (int)(0);
				t = (long)(p->iJD / 1000 - 21086676 * (long)(10000));
			}

			if ((osLocaltime(&t, &sLocal)) != 0)
			{
				sqlite3_result_error(pCtx, "local time unavailable", (int)(-1));
				return (int)(1);
			}

			p->Y = (int)(sLocal.tm_year + 1900 - iYearDiff);
			p->M = (int)(sLocal.tm_mon + 1);
			p->D = (int)(sLocal.tm_mday);
			p->h = (int)(sLocal.tm_hour);
			p->m = (int)(sLocal.tm_min);
			p->s = (double)(sLocal.tm_sec + (p->iJD % 1000) * 0.001);
			p->validYMD = (sbyte)(1);
			p->validHMS = (sbyte)(1);
			p->validJD = (sbyte)(0);
			p->rawS = (sbyte)(0);
			p->validTZ = (sbyte)(0);
			p->isError = (sbyte)(0);
			return (int)(0);
		}
	}
}