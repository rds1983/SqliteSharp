using Hebron;
using Hebron.Roslyn;
using Microsoft.CodeAnalysis;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Xml.Linq;

namespace StbSharp.Sqlite.Generator
{
	class Program
	{
		private static string Write<T>(Dictionary<string, T> input) where T : SyntaxNode
		{
			var sb = new StringBuilder();
			var keys = (from string k in input.Keys orderby k select k).ToArray();
			foreach (var key in keys)
			{
				string value;
				using (var sw = new StringWriter())
				{
					input[key].NormalizeWhitespace().WriteTo(sw);

					value = sw.ToString();
					value += Environment.NewLine;
				}

				sb.Append(value);
			}

			return sb.ToString();
		}

		private static string PostProcess(string data)
		{
			return data;
		}

		private static string WrapCode(string code)
		{
			var sb = new StringBuilder();
			sb.AppendLine(string.Format("// Generated by Hebron at {0}", DateTime.Now));
			sb.AppendLine();

			sb.AppendLine("using System;");
			sb.AppendLine("using System.Runtime.InteropServices;");
			sb.AppendLine("using Hebron.Runtime;");

			sb.AppendLine();

			sb.Append("namespace SqliteSharp\n{\n\t");
			sb.AppendLine("unsafe partial class Sqlite\n\t{");

			sb.Append(code);
			sb.Append("}\n}");

			return sb.ToString();
		}

		static void Process()
		{
			var parameters = new RoslynConversionParameters
			{
				InputPath = @"sqlite3.c",
//				ConversionEntities = ConversionEntities.Enums | ConversionEntities.GlobalVariables | ConversionEntities.Structs,
				Defines = new[]
				{
					"STBI_NO_SIMD",
					"STBI_NO_PIC",
					"STBI_NO_PNM",
					"STBI_NO_STDIO",
					"STB_IMAGE_IMPLEMENTATION",
				},
				SkipStructs = new[]
				{
					"stbi_io_callbacks",
					"stbi__context",
				},
				SkipGlobalVariables = new[]
				{
					"stbi__g_failure_reason",
					"stbi__vertically_flip_on_load",
					"stbi__parse_png_file_invalid_chunk",
				},
				SkipFunctions = new[]
				{
					"stbi_failure_reason",
					"stbi_image_free",
					"stbi__err",
					"stbi_is_hdr_from_memory",
					"stbi_is_hdr_from_callbacks",
					"stbi__pnm_isspace",
					"stbi__pnm_skip_whitespace",
					"stbi__pic_is4",
					"stbi__start_mem",
					"stbi__start_callbacks",
					"stbi__rewind",
					"stbi_load_16_from_callbacks",
					"stbi_load_from_callbacks",
					"stbi__get8",
					"stbi__refill_buffer",
					"stbi__at_eof",
					"stbi__skip",
					"stbi__getn",
					"stbi_load_16_from_memory",
					"stbi_load_from_memory",
					"stbi_load_gif_from_memory",
					"stbi_info_from_memory",
					"stbi_info_from_callbacks",
					"stbi_is_16_bit_from_memory",
					"stbi_is_16_bit_from_callbacks",
					"stbi_loadf_from_memory",
					"stbi_loadf_from_callbacks"
				}
			};

			/*			var textResult = TextCodeConverter.Convert(parameters.InputPath, parameters.Defines);
						File.WriteAllText(@"..\..\..\..\..\..\src\a", textResult);*/

			var result = RoslynCodeConverter.Convert(parameters);

			// Post processing
			Logger.Info("Post processing...");

			var data = string.Empty;
			data += Write(result.NamedEnums);
			data += Write(result.UnnamedEnumValues);
			data += Write(result.Delegates);
			data += Write(result.Structs);

			data = PostProcess(data);
			data = WrapCode(data);

			File.WriteAllText(@"..\..\..\..\..\..\src\Sqlite.Structs.Generated.cs", data);

			data = Write(result.GlobalVariables);

			data = PostProcess(data);
			data = WrapCode(data);

			File.WriteAllText(@"..\..\..\..\..\..\src\Sqlite.GlobalVariables.Generated.cs", data);


			data = Write(result.Functions);
			data = PostProcess(data);

			var root = new XElement("functions");

			var input = result.Functions;
			var keys = (from string k in input.Keys orderby k select k).ToArray();
			foreach (var key in keys)
			{
				string value;
				using (var sw = new StringWriter())
				{
					input[key].NormalizeWhitespace().WriteTo(sw);

					value = sw.ToString();
				}

				var function = new XElement("function", value);
				root.Add(function);
			}

			var doc = new XDocument(root);
			doc.Save(@"..\..\..\..\..\..\src\Sqlite.Functions.xml");
		}

		private static string[] PrimitiveTypes = new[]
		{
			"bool", "byte","sbyte","ushort","short", "float", "double",
			"int","uint","long", "ulong", "void"
		};

		private static void ProcessXml()
		{
			var doc = XDocument.Load(@"..\..\..\..\..\..\src\Sqlite.Functions.xml");

			var regex = new Regex(@"public static (\w+) (\w+)\((\w*)");
			var output = new Dictionary<string, StringBuilder>();
			foreach (XElement function in doc.Root.Elements())
			{
				var match = regex.Match(function.Value);

				var type = match.Groups[3].Value;

				if (string.IsNullOrEmpty(type) || PrimitiveTypes.Contains(type))
				{
					type = "Utility";
				}

				StringBuilder sb;
				if (!output.TryGetValue(type, out sb))
				{
					sb = new StringBuilder();
					output[type] = sb;
				}

				if (sb.Length > 0)
				{
					sb.Append(Environment.NewLine);
				}

				sb.Append(function.Value);
			}

			foreach(var pair in output)
			{
				var code = WrapCode(pair.Value.ToString());
				File.WriteAllText(@"..\..\..\..\..\..\src\Sqlite." + pair.Key + ".Generated.cs", code);
			}
		}

		static void Main(string[] args)
		{
			try
			{
				Process();
				ProcessXml();
			}
			catch (Exception ex)
			{
				Console.WriteLine(ex.Message);
				Console.WriteLine(ex.StackTrace);
			}

			Console.WriteLine("Finished. Press any key to quit.");
		}
	}
}